<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LanguageExt.Core</name>
    </assembly>
    <members>
        <member name="T:LanguageExt.ActionObservable`1">
            <summary>
            Executes an action post-subscription.  This is useful when the action is 
            going to publish to the observable.  A kind of request/response.
            Use the IObservable extension method: PostSubscribe(() => ...)
            </summary>
        </member>
        <member name="M:LanguageExt.__ComposeExt.Compose``3(System.Func{``1,``2},System.Func{``0,``1})">
            <summary>
            Function composition
            </summary>
            <returns>b(a(v))</returns>
        </member>
        <member name="M:LanguageExt.__ComposeExt.BackCompose``3(System.Func{``0,``1},System.Func{``1,``2})">
            <summary>
            Function back composition
            </summary>
            <returns>b(a(v))</returns>
        </member>
        <member name="T:LanguageExt.Either`2">
            <summary>
            Either L R
            Holds one of two values 'Left' or 'Right'.  Usually 'Left' is considered 'wrong' or 'in error', and
            'Right' is, well, right.  So when the Either is in a Left state, it cancels computations like bind
            or map, etc.  So you can see Left as an 'early out, with a message'.  Unlike Option that has None
            as its alternative value (i.e. it has an 'early out, but no message').
            </summary>
            <remarks>
            NOTE: If you use Filter or Where (or 'where' in a LINQ expression) with Either, then the Either 
            will be put into a 'Bottom' state if the predicate returns false.  When it's in this state it is 
            neither Right nor Left.  And any usage could trigger a BottomException.  So be aware of the issue
            of filtering Either.
            
            Also note, when the Either is in a Bottom state, some operations on it will continue to give valid
            results or return another Either in the Bottom state and not throw.  This is so a filtered Either 
            doesn't needlessly break expressions. 
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
        </member>
        <member name="F:LanguageExt.Either`2.State">
            <summary>
            State of the Either
            You can also use:
                IsRight
                IsLeft
                IsBottom
            </summary>
        </member>
        <member name="P:LanguageExt.Either`2.IsRight">
            <summary>
            Is the Either in a Right state?
            </summary>
            <exception cref="T:LanguageExt.BottomException">EitherT state is Bottom</exception>
        </member>
        <member name="P:LanguageExt.Either`2.IsLeft">
            <summary>
            Is the Either in a Left state?
            </summary>
            <exception cref="T:LanguageExt.BottomException">EitherT state is Bottom</exception>
        </member>
        <member name="P:LanguageExt.Either`2.IsBottom">
            <summary>
            Is the Either in a Bottom state?
            When the Either is filtered, both Right and Left are meaningless.
            
            If you use Filter or Where (or 'where' in a LINQ expression) with Either, then the Either 
            will be put into a 'Bottom' state if the predicate returns false.  When it's in this state it is 
            neither Right nor Left.  And any usage could trigger a BottomException.  So be aware of the issue
            of filtering Either.
            
            Also note, when the Either is in a Bottom state, some operations on it will continue to give valid
            results or return another Either in the Bottom state and not throw.  This is so a filtered Either 
            doesn't needlessly break expressions. 
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.op_Implicit(`1)~LanguageExt.Either{`0,`1}">
            <summary>
            Implicit conversion operator from R to Either R L
            </summary>
            <param name="value">Value, must not be null.</param>
            <exception cref="T:LanguageExt.ValueIsNullException">Value is null</exception>
        </member>
        <member name="M:LanguageExt.Either`2.op_Implicit(`0)~LanguageExt.Either{`0,`1}">
            <summary>
            Implicit conversion operator from L to Either R L
            </summary>
            <param name="value">Value, must not be null.</param>
            <exception cref="T:LanguageExt.ValueIsNullException">Value is null</exception>
        </member>
        <member name="M:LanguageExt.Either`2.Match``1(System.Func{`1,``0},System.Func{`0,``0})">
            <summary>
            Invokes the Right or Left function depending on the state of the Either
            </summary>
            <typeparam name="Ret">Return type</typeparam>
            <param name="Right">Function to invoke if in a Right state</param>
            <param name="Left">Function to invoke if in a Left state</param>
            <returns>The return value of the invoked function</returns>
        </member>
        <member name="M:LanguageExt.Either`2.Match(System.Action{`1},System.Action{`0})">
            <summary>
            Invokes the Right or Left action depending on the state of the Either
            </summary>
            <param name="Right">Action to invoke if in a Right state</param>
            <param name="Left">Action to invoke if in a Left state</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Either`2.IfLeft(System.Func{`1})">
            <summary>
            Executes the Left function if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="Left">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Either`2.IfLeft(System.Func{`0,`1})">
            <summary>
            Executes the leftMap function if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="leftMap">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Either`2.IfLeft(`1)">
            <summary>
            Returns the rightValue if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="rightValue">Value to return if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Either`2.IfLeft(System.Action{`0})">
            <summary>
            Executes the Left action if the Either is in a Left state.
            </summary>
            <param name="Left">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Either`2.IfRight(System.Action{`1})">
            <summary>
            Invokes the Right action if the Either is in a Right state, otherwise does nothing
            </summary>
            <param name="Right">Action to invoke</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Either`2.IfRight(`0)">
            <summary>
            Returns the leftValue if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="leftValue">Value to return if in the Left state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.Either`2.IfRight(System.Func{`0})">
            <summary>
            Returns the result of Right() if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="Right">Function to generate a Left value if in the Right state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.Either`2.IfRight(System.Func{`1,`0})">
            <summary>
            Returns the result of rightMap if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="rightMap">Function to generate a Left value if in the Right state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.Either`2.Right(System.Action{`1})">
            <summary>
            Match Right and return a context.  You must follow this with .Left(...) to complete the match
            </summary>
            <param name="right">Action to invoke if the Either is in a Right state</param>
            <returns>Context that must have Left() called upon it.</returns>
        </member>
        <member name="M:LanguageExt.Either`2.Right``1(System.Func{`1,``0})">
            <summary>
            Match Right and return a context.  You must follow this with .Left(...) to complete the match
            </summary>
            <param name="right">Action to invoke if the Either is in a Right state</param>
            <returns>Context that must have Left() called upon it.</returns>
        </member>
        <member name="M:LanguageExt.Either`2.ToString">
            <summary>
            Return a string representation of the Either
            </summary>
            <returns>String representation of the Either</returns>
        </member>
        <member name="M:LanguageExt.Either`2.GetHashCode">
            <summary>
            Returns a hash code of the wrapped value of the Either
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:LanguageExt.Either`2.Equals(System.Object)">
            <summary>
            Equality check
            </summary>
            <param name="obj">Object to test for equality</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:LanguageExt.Either`2.ToList">
            <summary>
            Project the Either into a Lst R
            </summary>
            <returns>If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Either`2.ToArray">
            <summary>
            Project the Either into an ImmutableArray R
            </summary>
            <returns>If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Either`2.RightToList">
            <summary>
            Project the Either into a Lst R
            </summary>
            <returns>If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Either`2.RightToArray">
            <summary>
            Project the Either into an ImmutableArray R
            </summary>
            <returns>If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Either`2.LeftToList">
            <summary>
            Project the Either into a Lst R
            </summary>
            <returns>If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Either`2.LeftToArray">
            <summary>
            Project the Either into an ImmutableArray R
            </summary>
            <returns>If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Either`2.RightAsEnumerable">
            <summary>
            Project the Either into a IEnumerable R
            </summary>
            <returns>If the Either is in a Right state, a IEnumerable of R with one item.  A zero length IEnumerable R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Either`2.LeftAsEnumerable">
            <summary>
            Project the Either into a IEnumerable L
            </summary>
            <returns>If the Either is in a Left state, a IEnumerable of L with one item.  A zero length IEnumerable L otherwise</returns>
        </member>
        <member name="M:LanguageExt.Either`2.AsEnumerable">
            <summary>
            Project the Either into a IEnumerable R
            </summary>
            <returns>If the Either is in a Right state, a IEnumerable of R with one item.  A zero length IEnumerable R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Either`2.ToOption">
            <summary>
            Convert the Either to an Option
            </summary>
            <returns>Some(Right) or None</returns>
        </member>
        <member name="M:LanguageExt.Either`2.ToEitherUnsafe">
            <summary>
            Convert the Either to an EitherUnsafe
            </summary>
            <returns>EitherUnsafe</returns>
        </member>
        <member name="M:LanguageExt.Either`2.ToTryOption">
            <summary>
            Convert the Either to an TryOption
            </summary>
            <returns>Some(Right) or None</returns>
        </member>
        <member name="M:LanguageExt.Either`2.op_Equality(LanguageExt.Either{`0,`1},LanguageExt.Either{`0,`1})">
            <summary>
            Equality operator override
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.op_Inequality(LanguageExt.Either{`0,`1},LanguageExt.Either{`0,`1})">
            <summary>
            Non-equality operator override
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.op_BitwiseOr(LanguageExt.Either{`0,`1},LanguageExt.Either{`0,`1})">
            <summary>
            Override of the Or operator to be a Left coalescing operator
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.op_True(LanguageExt.Either{`0,`1})">
            <summary>
            Override of the True operator to return True if the Either is Right
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.op_False(LanguageExt.Either{`0,`1})">
            <summary>
            Override of the False operator to return True if the Either is Left
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.CompareTo(LanguageExt.Either{`0,`1})">
            <summary>
            CompareTo override
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.CompareTo(`1)">
            <summary>
            CompareTo override
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.CompareTo(`0)">
            <summary>
            CompareTo override
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.Equals(`1)">
            <summary>
            Equality override
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.Equals(`0)">
            <summary>
            Equality override
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.Equals(LanguageExt.Either{`0,`1})">
            <summary>
            Equality override
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.MatchUntyped``1(System.Func{System.Object,``0},System.Func{System.Object,``0})">
            <summary>
            Match the Right and Left values but as objects.  This can be useful to avoid reflection.
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.GetUnderlyingRightType">
            <summary>
            Find out the underlying Right type
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.GetUnderlyingLeftType">
            <summary>
            Find out the underlying Left type
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.op_Addition(LanguageExt.Either{`0,`1},LanguageExt.Either{`0,`1})">
            <summary>
            Append the Right of one either to the Right of another
            For numeric values the behaviour is to sum the Rights (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.Either`2.Append(LanguageExt.Either{`0,`1})">
            <summary>
            Append the Right of one either to the Right of another
            For numeric values the behaviour is to sum the Rights (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.Either`2.op_Subtraction(LanguageExt.Either{`0,`1},LanguageExt.Either{`0,`1})">
            <summary>
            Subtract the Right of one either from the Right of another
            For numeric values the behaviour is to find the difference between the Rights (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.Either`2.Subtract(LanguageExt.Either{`0,`1})">
            <summary>
            Subtract the Right of one either from the Right of another
            For numeric values the behaviour is to find the difference between the Rights (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.Either`2.op_Multiply(LanguageExt.Either{`0,`1},LanguageExt.Either{`0,`1})">
            <summary>
            Find the product of the Rights 
            For numeric values the behaviour is to multiply the Rights (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.Either`2.Multiply(LanguageExt.Either{`0,`1})">
            <summary>
            Find the product of the Rights 
            For numeric values the behaviour is to multiply the Rights (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.Either`2.op_Division(LanguageExt.Either{`0,`1},LanguageExt.Either{`0,`1})">
            <summary>
            Divide the Rights 
            For numeric values the behaviour is to divide the Rights (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.Either`2.Divide(LanguageExt.Either{`0,`1})">
            <summary>
            Divide the Rights 
            For numeric values the behaviour is to divide the Rights (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.Either`2.Failure(System.Func{`1})">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:LanguageExt.Either`2.Failure(`1)">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:LanguageExt.EitherContext`3">
            <summary>
            Context for the fluent Either matching
            </summary>
        </member>
        <member name="M:LanguageExt.EitherContext`3.Left(System.Func{`0,`2})">
            <summary>
            Left match
            </summary>
            <param name="left"></param>
            <returns>Result of the match</returns>
        </member>
        <member name="T:LanguageExt.EitherUnitContext`2">
            <summary>
            Context for the fluent Either matching
            </summary>
        </member>
        <member name="T:LanguageExt.EitherState">
            <summary>
            Possible states of an Either
            </summary>
        </member>
        <member name="F:LanguageExt.EitherState.IsBottom">
            <summary>
            Bottom state 
            </summary>
            <remarks>
            If you use Filter or Where (or 'where' in a LINQ expression) with Either, then the Either 
            will be put into a 'Bottom' state if the predicate returns false.  When it's in this state it is 
            neither Right nor Left.  And any usage could trigger a BottomException.  So be aware of the issue
            of filtering Either.
            
            Also note, when the Either is in a Bottom state, some operations on it will continue to give valid
            results or return another Either in the Bottom state and not throw.  This is so a filtered Either 
            doesn't needlessly break expressions. 
            </remarks>
        </member>
        <member name="F:LanguageExt.EitherState.IsLeft">
            <summary>
            Left state
            </summary>
        </member>
        <member name="F:LanguageExt.EitherState.IsRight">
            <summary>
            Right state
            </summary>
        </member>
        <member name="T:LanguageExt.Prelude">
            <summary>
            Common functions that acts like a functional language's 'prelude'; that is usually
            a standard set of functions for dealing with built-in types.  In our case we have a
            set of core types:
            
                Lst T
                Map T
                Option T
                OptionUnsafe T
                Either L R
                EitherUnsafe L R
                TryOption T
                Try T
                Reader E T
                Writer W T
                State S cT
                Rws E W S T
                Unit
            
            </summary>
        </member>
        <member name="P:LanguageExt.Prelude.None">
            <summary>
            'No value' state of Option T.
            </summary>
        </member>
        <member name="P:LanguageExt.Prelude.unit">
            <summary>
            Unit constructor
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.ignore``1(``0)">
            <summary>
            Takes any value, ignores it, returns a unit
            </summary>
            <param name="anything">Value to ignore</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.map``2(``0,System.Func{``0,``1})">
            <summary>
            Projects a value into a lambda
            Useful when one needs to declare a local variable which breaks your
            expression.  This allows you to keep the expression going.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``3(``0,``1,System.Func{``0,``1,``2})">
            <summary>
            Projects values into a lambda
            Useful when one needs to declare a local variable which breaks your
            expression.  This allows you to keep the expression going.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``4(``0,``1,``2,System.Func{``0,``1,``2,``3})">
            <summary>
            Projects values into a lambda
            Useful when one needs to declare a local variable which breaks your
            expression.  This allows you to keep the expression going.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``5(``0,``1,``2,``3,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Projects values into a lambda
            Useful when one needs to declare a local variable which breaks your
            expression.  This allows you to keep the expression going.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``6(``0,``1,``2,``3,``4,System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Projects values into a lambda
            Useful when one needs to declare a local variable which breaks your
            expression.  This allows you to keep the expression going.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.with``2(``0,System.Func{``0,``1})">
            <summary>
            Use with the 'match' function to match values and map a result
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.with``2(System.Func{``0,``1})">
            <summary>
            Use with the 'match' function to match values and map a result
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.otherwise``2(System.Func{``0,``1})">
            <summary>
            Use with the 'match' function to catch a non-matched value and map a result
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.match``2(``0,System.Func{``0,LanguageExt.Option{``1}}[])">
            <summary>
            Pattern matching for values
            </summary>
            <typeparam name="T">Value type to match</typeparam>
            <typeparam name="R">Result of expression</typeparam>
            <param name="value">Value to match</param>
            <param name="clauses">Clauses to test</param>
            <returns>Result</returns>
        </member>
        <member name="M:LanguageExt.Prelude.function``2(System.Func{``0,LanguageExt.Option{``1}}[])">
            <summary>
            Pattern matching for values
            </summary>
            <typeparam name="T">Value type to match</typeparam>
            <typeparam name="R">Result of expression</typeparam>
            <param name="value">Value to match</param>
            <param name="clauses">Clauses to test</param>
            <returns>Result</returns>
        </member>
        <member name="M:LanguageExt.Prelude.identity``1(``0)">
            <summary>
            Identity function
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.failwith(System.String)">
            <summary>
            Raises a lazy Exception with the message provided
            </summary>
            <param name="message">Exception message</param>
            <returns>Action that when executed throws</returns>
        </member>
        <member name="M:LanguageExt.Prelude.failwith``1(System.String)">
            <summary>
            Raises an Exception wigth the messge provided
            </summary>
            <typeparam name="R">The return type of the expression this function is being used in.
            This allows exceptions to be thrown in ternary operators, or LINQ expressions for
            example</typeparam>
            <param name="message">Exception message</param>
            <returns>Throws an exception</returns>
        </member>
        <member name="M:LanguageExt.Prelude.raise``1(System.Exception)">
            <summary>
            Raise an exception
            </summary>
            <typeparam name="R">The return type of the expression this function is being used in.
            This allows exceptions to be thrown in ternary operators, or LINQ expressions for
            example</typeparam>
            <param name="ex">Exception to throw</param>
            <returns>Throws an exception</returns>
        </member>
        <member name="M:LanguageExt.Prelude.exceptionIs``1(System.Exception)">
            <summary>
            Identifies an exception as being of type E
            </summary>
            <typeparam name="E">Type to match</typeparam>
            <param name="e">Exception to test</param>
            <returns>True if e is of type E</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Cons``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Construct a list from head and tail
            head becomes the first item in the list
            Is lazy
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Cons``1(``0,LanguageExt.Lst{``0})">
            <summary>
            Construct a list from head and tail
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Lazily generate a range of integers.  
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Range(System.Char,System.Char)">
            <summary>
            Lazily generate a range of chars.  
            
              Remarks:
                Can go in a positive direction ('a'..'z') as well as negative ('z'..'a')
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Range(LanguageExt.IntegerRange[])">
            <summary>
            Lazily generate integers from any number of provided ranges
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Range(LanguageExt.CharRange[])">
            <summary>
            Lazily generate chars from any number of provided ranges
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Map``2">
            <summary>
            Create an immutable map
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Map``2(System.Tuple{``0,``1}[])">
            <summary>
            Create an immutable map
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Map``2(System.Collections.Generic.KeyValuePair{``0,``1}[])">
            <summary>
            Create an immutable map
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.List``1">
            <summary>
            Create an immutable list
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.List``1(``0[])">
            <summary>
            Create an immutable list
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.toList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an immutable list
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Array``1">
            <summary>
            Create an immutable queue
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Array``1(``0)">
            <summary>
            Create an immutable queue
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Array``1(``0[])">
            <summary>
            Create an immutable queue
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.toArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an immutable queue
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Queue``1">
            <summary>
            Create an immutable queue
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Queue``1(``0[])">
            <summary>
            Create an immutable queue
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.toQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an immutable queue
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Stack``1">
            <summary>
            Create an immutable stack
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Stack``1(``0[])">
            <summary>
            Create an immutable stack
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.toStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an immutable stack
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Set``1">
            <summary>
            Create an immutable set
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Set``1(``0)">
            <summary>
            Create an immutable set
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Set``1(``0[])">
            <summary>
            Create an immutable set
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.toSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create an immutable set
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Query``1(``0[])">
            <summary>
            Create a queryable
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.toQuery``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert to queryable
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List matching
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List matching
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,``0,``1},System.Func{``0,``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List matching
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,``0,``1},System.Func{``0,``0,``0,``1},System.Func{``0,``0,``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List matching
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,``0,``1},System.Func{``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List matching
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,``0,``1},System.Func{``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List matching
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,``0,``1},System.Func{``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``0,``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List matching
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.curry``3(System.Func{``0,``1,``2})">
            <summary>
            Curry the function 'f' provided.
            You can then partially apply by calling: 
            
                var curried = curry(f);
                var r = curried(a)(b)
            
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.curry``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Curry the function 'f' provided.
            You can then partially apply by calling: 
            
                var curried = curry(f);
                var r = curried(a)(b)(c)
            
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.curry``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Curry the function 'f' provided.
            You can then partially apply by calling: 
            
                var curried = curry(f);
                var r = curried(a)(b)(c)(d)
            
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.curry``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Curry the function 'f' provided.
            You can then partially apply by calling: 
            
                var curried = curry(f);
                var r = curried(a)(b)(c)(d)(e)
            
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.curry``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Curry the function 'func' provided.
            You can then partially apply by calling: 
            
                var curried = curry(f);
                var r = curried(a)(b)(c)(d)(e)(f)
            
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.curry``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Curry the function 'func' provided.
            You can then partially apply by calling: 
            
                var curried = curry(f);
                var r = curried(a)(b)(c)(d)(e)(f)(g)
            
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.curry``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Curry the function 'func' provided.
            You can then partially apply by calling: 
            
                var curried = curry(f);
                var r = curried(a)(b)(c)(d)(e)(f)(g)(h)
            
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.curry``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>
            Curry the function 'func' provided.
            You can then partially apply by calling: 
            
                var curried = curry(f);
                var r = curried(a)(b)(c)(d)(e)(f)(g)(h)(i)
            
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.curry``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
            <summary>
            Curry the function 'func' provided.
            You can then partially apply by calling: 
            
                var curried = curry(f);
                var r = curried(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)
            
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.append``2(LanguageExt.Either{``0,``1},LanguageExt.Either{``0,``1})">
            <summary>
            Append the Right of one either to the Right of another
            For numeric values the behaviour is to sum the Rights (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.subtract``2(LanguageExt.Either{``0,``1},LanguageExt.Either{``0,``1})">
            <summary>
            Subtract the Right of one either from the Right of another
            For numeric values the behaviour is to find the difference between the Rights (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.multiply``2(LanguageExt.Either{``0,``1},LanguageExt.Either{``0,``1})">
            <summary>
            Find the product of the Rights 
            For numeric values the behaviour is to multiply the Rights (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.divide``2(LanguageExt.Either{``0,``1},LanguageExt.Either{``0,``1})">
            <summary>
            Divide the Rights 
            For numeric values the behaviour is to divide the Rights (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.isRight``2(LanguageExt.Either{``0,``1})">
            <summary>
            Returns the state of the Either provided
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="value">Either to check</param>
            <returns>True if the Either is in a Right state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.isLeft``2(LanguageExt.Either{``0,``1})">
            <summary>
            Returns the state of the Either provided
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="value">Either to check</param>
            <returns>True if the Either is in a Left state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Right``2(``1)">
            <summary>
            Either constructor
            Constructs an Either in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="value">Right value</param>
            <returns>A new Either instance</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Left``2(``0)">
            <summary>
            Either constructor
            Constructs an Either in a Left state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="value">Left value</param>
            <returns>A new Either instance</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Right``2(System.Nullable{``1})">
            <summary>
            Either constructor from Nullable
            Constructs an Either in a Right state or throws a ValueIsNullException if the value is null
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="value">Right value</param>
            <returns>A new Either instance</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Left``2(System.Nullable{``0})">
            <summary>
            Either constructor from Nullable
            Constructs an Either in a Left state or throws a ValueIsNullException if the value is null
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="value">Left value</param>
            <returns>A new Either instance</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifLeft``2(LanguageExt.Either{``0,``1},System.Func{``1})">
            <summary>
            Executes the Left function if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="Left">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifLeft``2(LanguageExt.Either{``0,``1},System.Func{``0,``1})">
            <summary>
            Executes the leftMap function if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="leftMap">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifLeft``2(LanguageExt.Either{``0,``1},``1)">
            <summary>
            Returns the rightValue if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="rightValue">Value to return if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifLeft``2(LanguageExt.Either{``0,``1},System.Action{``0})">
            <summary>
            Executes the Left action if the Either is in a Left state.
            </summary>
            <param name="Left">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifRight``2(LanguageExt.Either{``0,``1},System.Action{``1})">
            <summary>
            Invokes the Right action if the Either is in a Right state, otherwise does nothing
            </summary>
            <param name="Right">Action to invoke</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifRight``2(LanguageExt.Either{``0,``1},``0)">
            <summary>
            Returns the leftValue if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="leftValue">Value to return if in the Left state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifRight``2(LanguageExt.Either{``0,``1},System.Func{``0})">
            <summary>
            Returns the result of Left() if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="Left">Function to generate a Left value if in the Right state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifRight``2(LanguageExt.Either{``0,``1},System.Func{``1,``0})">
            <summary>
            Returns the result of leftMap if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="leftMap">Function to generate a Left value if in the Right state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.match``3(LanguageExt.Either{``0,``1},System.Func{``1,``2},System.Func{``0,``2})">
            <summary>
            Invokes the Right or Left function depending on the state of the Either provided
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Return type</typeparam>
            <param name="either">Either to match</param>
            <param name="Right">Function to invoke if in a Right state</param>
            <param name="Left">Function to invoke if in a Left state</param>
            <returns>The return value of the invoked function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.match``2(LanguageExt.Either{``0,``1},System.Action{``1},System.Action{``0})">
            <summary>
            Invokes the Right or Left action depending on the state of the Either provided
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to match</param>
            <param name="Right">Action to invoke if in a Right state</param>
            <param name="Left">Action to invoke if in a Left state</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``3(LanguageExt.Either{``0,System.Func{``1,``2}},LanguageExt.Either{``0,``1})">
            <summary>
            Apply an Either value to an Either function
            </summary>
            <param name="either">Either function</param>
            <param name="arg">Either argument</param>
            <returns>Returns the result of applying the Either argument to the Either function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``4(LanguageExt.Either{``0,System.Func{``1,``2,``3}},LanguageExt.Either{``0,``1})">
            <summary>
            Apply an Either value to an Either function of arity 2
            </summary>
            <param name="self">Either function</param>
            <param name="arg">Either argument</param>
            <returns>Returns the result of applying the Either argument to the Either function:
            an Either function of arity 1</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``4(LanguageExt.Either{``0,System.Func{``1,``2,``3}},LanguageExt.Either{``0,``1},LanguageExt.Either{``0,``2})">
            <summary>
            Apply Either values to an Either function of arity 2
            </summary>
            <param name="self">Either function</param>
            <param name="arg1">Either argument</param>
            <param name="arg2">Either argument</param>
            <returns>Returns the result of applying the optional arguments to the optional function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``3(LanguageExt.Either{``1,``2},``0,System.Func{``0,``2,``0})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``3(LanguageExt.Either{``1,``2},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``3(LanguageExt.Either{``0,``1},``2,System.Func{``2,``1,``2},System.Func{``2,``0,``2})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="Right">Right fold function</param>
            <param name="Left">Left fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.forall``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to forall</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Left state.  
            True if the Either is in a Right state and the predicate returns True.  
            False otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.forall``2(LanguageExt.Either{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to forall</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Left state.  
            True if the Either is in a Right state and the predicate returns True.  
            False otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.forall``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to forall</param>
            <param name="Right">Right predicate</param>
            <param name="Left">Left predicate</param>
            <returns>True if the predicate returns True.  True if the Either is in a bottom state.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.count``2(LanguageExt.Either{``0,``1})">
            <summary>
            Counts the Either
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to count</param>
            <returns>1 if the Either is in a Right state, 0 otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.exists``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to check existence of</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Right state and the predicate returns True.  False otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.exists``2(LanguageExt.Either{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to check existence of</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Right state and the predicate returns True.  False otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.exists``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to check existence of</param>
            <param name="Right">Right predicate</param>
            <param name="Left">Left predicate</param>
            <returns>True if the predicate returns True.  False otherwise or if the Either is in a bottom state.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.map``3(LanguageExt.Either{``0,``1},System.Func{``1,``2})">
            <summary>
            Maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped Either type</typeparam>
            <param name="either">Either to map</param>
            <param name="mapper">Map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.mapLeft``3(LanguageExt.Either{``0,``1},System.Func{``0,``2})">
            <summary>
            Maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped Either type</typeparam>
            <param name="either">Either to map</param>
            <param name="mapper">Map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.bimap``4(LanguageExt.Either{``0,``1},System.Func{``1,``3},System.Func{``0,``2})">
            <summary>
            Bi-maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="LRet">Left return</typeparam>
            <typeparam name="RRet">Right return</typeparam>
            <param name="self">Either to map</param>
            <param name="Right">Right map function</param>
            <param name="Left">Left map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.map``4(LanguageExt.Either{``0,``1},System.Func{``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.map``5(LanguageExt.Either{``0,``1},System.Func{``1,``2,``3,``4})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.filter``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>If the Either is in the Left state it is returned as-is.  
            If in the Right state the predicate is applied to the Right value.
            If the predicate returns True the Either is returned as-is.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.filter``2(LanguageExt.Either{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>If the Either is in the Right state it is returned as-is.  
            If in the Left state the predicate is applied to the Left value.
            If the predicate returns True the Either is returned as-is.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.filter``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Bi-filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>
            If the Either is in the Left state then the Left predicate is run against it.
            If the Either is in the Right state then the Right predicate is run against it.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.bind``3(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Either{``0,``2}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="either"></param>
            <param name="binder"></param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.bind``3(LanguageExt.Either{``0,``1},System.Func{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="either"></param>
            <param name="binder"></param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.bind``4(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Either{``2,``3}},System.Func{``0,LanguageExt.Either{``2,``3}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="self">this</param>
            <param name="Right">Right bind function</param>
            <param name="Left">Left bind function</param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Match``3(System.Collections.Generic.IEnumerable{LanguageExt.Either{``0,``1}},System.Func{``1,``2},System.Func{``0,``2})">
            <summary>
            Match over a sequence of Eithers
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped type</typeparam>
            <param name="list">Sequence to match over</param>
            <param name="Right">Right match function</param>
            <param name="Left">Left match function</param>
            <returns>Sequence of mapped values</returns>
        </member>
        <member name="M:LanguageExt.Prelude.match``3(System.Collections.Generic.IEnumerable{LanguageExt.Either{``0,``1}},System.Func{``1,``2},System.Func{``0,``2})">
            <summary>
            Match over a sequence of Eithers
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped type</typeparam>
            <param name="list">Sequence to match over</param>
            <param name="Right">Right match function</param>
            <param name="Left">Left match function</param>
            <returns>Sequence of mapped values</returns>
        </member>
        <member name="M:LanguageExt.Prelude.rightToList``2(LanguageExt.Either{``0,``1})">
            <summary>
            Project the Either into a Lst R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.rightToArray``2(LanguageExt.Either{``0,``1})">
            <summary>
            Project the Either into an ImmutableArray R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.leftToList``2(LanguageExt.Either{``0,``1})">
            <summary>
            Project the Either into a Lst L
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Left state, a Lst of L with one item.  A zero length Lst L otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.leftToArray``2(LanguageExt.Either{``0,``1})">
            <summary>
            Project the Either into an array of L
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, an array of L with one item.  A zero length array of L otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.toQuery``2(LanguageExt.Either{``0,``1})">
            <summary>
            Project the Either into an IQueryable of R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, an IQueryable of R with one item.  A zero length IQueryable R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.rightToQuery``2(LanguageExt.Either{``0,``1})">
            <summary>
            Project the Either into an IQueryable of R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, an IQueryable of R with one item.  A zero length IQueryable R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.leftToQuery``2(LanguageExt.Either{``0,``1})">
            <summary>
            Project the Either into an IQueryable of L
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Left state, an IQueryable of L with one item.  A zero length IQueryable L otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.lefts``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``0,``1}})">
            <summary>
            Extracts from a list of 'Either' all the 'Left' elements.
            All the 'Left' elements are extracted in order.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>An enumerable of L</returns>
        </member>
        <member name="M:LanguageExt.Prelude.rights``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``0,``1}})">
            <summary>
            Extracts from a list of 'Either' all the 'Right' elements.
            All the 'Right' elements are extracted in order.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>An enumerable of L</returns>
        </member>
        <member name="M:LanguageExt.Prelude.partition``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``0,``1}})">
            <summary>
            Partitions a list of 'Either' into two lists.
            All the 'Left' elements are extracted, in order, to the first
            component of the output.  Similarly the 'Right' elements are extracted
            to the second component of the output.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>A tuple containing the an enumerable of L and an enumerable of R</returns>
        </member>
        <member name="M:LanguageExt.Prelude.append``2(LanguageExt.EitherUnsafe{``0,``1},LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Append the Right of one either to the Right of another
            For numeric values the behaviour is to sum the Rights (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.subtract``2(LanguageExt.EitherUnsafe{``0,``1},LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Subtract the Right of one either from the Right of another
            For numeric values the behaviour is to find the difference between the Rights (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.multiply``2(LanguageExt.EitherUnsafe{``0,``1},LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Find the product of the Rights 
            For numeric values the behaviour is to multiply the Rights (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.divide``2(LanguageExt.EitherUnsafe{``0,``1},LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Divide the Rights 
            For numeric values the behaviour is to divide the Rights (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.isRight``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Returns the state of the Either provided
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="value">Either to check</param>
            <returns>True if the Either is in a Right state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.isLeft``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Returns the state of the Either provided
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="value">Either to check</param>
            <returns>True if the Either is in a Left state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.RightUnsafe``2(``1)">
            <summary>
            Either constructor
            Constructs an Either in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="value">Right value</param>
            <returns>A new Either instance</returns>
        </member>
        <member name="M:LanguageExt.Prelude.LeftUnsafe``2(``0)">
            <summary>
            Either constructor
            Constructs an Either in a Left state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="value">Left value</param>
            <returns>A new Either instance</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifLeftUnsafe``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1})">
            <summary>
            Executes the Left function if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="Left">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifLeftUnsafe``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,``1})">
            <summary>
            Executes the leftMap function if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="leftMap">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifLeftUnsafe``2(LanguageExt.EitherUnsafe{``0,``1},``1)">
            <summary>
            Returns the rightValue if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="rightValue">Value to return if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifLeftUnsafe``2(LanguageExt.EitherUnsafe{``0,``1},System.Action{``0})">
            <summary>
            Executes the Left action if the Either is in a Left state.
            </summary>
            <param name="Left">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifRightUnsafe``2(LanguageExt.EitherUnsafe{``0,``1},System.Action{``1})">
            <summary>
            Invokes the Right action if the Either is in a Right state, otherwise does nothing
            </summary>
            <param name="Right">Action to invoke</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifRightUnsafe``2(LanguageExt.EitherUnsafe{``0,``1},``0)">
            <summary>
            Returns the leftValue if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="leftValue">Value to return if in the Left state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifRightUnsafe``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0})">
            <summary>
            Returns the result of Left() if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="Left">Function to generate a Left value if in the Right state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ifRightUnsafe``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``0})">
            <summary>
            Returns the result of leftMap if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="leftMap">Function to generate a Left value if in the Right state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.matchUnsafe``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2},System.Func{``0,``2})">
            <summary>
            Invokes the Right or Left function depending on the state of the Either provided
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Return type</typeparam>
            <param name="either">Either to match</param>
            <param name="Right">Function to invoke if in a Right state</param>
            <param name="Left">Function to invoke if in a Left state</param>
            <returns>The return value of the invoked function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.matchUnsafe``2(LanguageExt.EitherUnsafe{``0,``1},System.Action{``1},System.Action{``0})">
            <summary>
            Invokes the Right or Left action depending on the state of the Either provided
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to match</param>
            <param name="Right">Action to invoke if in a Right state</param>
            <param name="Left">Action to invoke if in a Left state</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``3(LanguageExt.EitherUnsafe{``0,System.Func{``1,``2}},LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Apply an Either value to an Either function
            </summary>
            <param name="either">Either function</param>
            <param name="arg">Either argument</param>
            <returns>Returns the result of applying the Either argument to the Either function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``4(LanguageExt.EitherUnsafe{``0,System.Func{``1,``2,``3}},LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Apply an Either value to an Either function of arity 2
            </summary>
            <param name="self">Either function</param>
            <param name="arg">Either argument</param>
            <returns>Returns the result of applying the Either argument to the Either function:
            an Either function of arity 1</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``4(LanguageExt.EitherUnsafe{``0,System.Func{``1,``2,``3}},LanguageExt.EitherUnsafe{``0,``1},LanguageExt.EitherUnsafe{``0,``2})">
            <summary>
            Apply Either values to an Either function of arity 2
            </summary>
            <param name="self">Either function</param>
            <param name="arg1">Either argument</param>
            <param name="arg2">Either argument</param>
            <returns>Returns the result of applying the optional arguments to the optional function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``3(LanguageExt.EitherUnsafe{``1,``2},``0,System.Func{``0,``2,``0})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``3(LanguageExt.EitherUnsafe{``1,``2},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``3(LanguageExt.EitherUnsafe{``0,``1},``2,System.Func{``2,``1,``2},System.Func{``2,``0,``2})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="Right">Right fold function</param>
            <param name="Left">Left fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.forall``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to forall</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Left state.  
            True if the Either is in a Right state and the predicate returns True.  
            False otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.forall``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to forall</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Left state.  
            True if the Either is in a Right state and the predicate returns True.  
            False otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.forall``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to forall</param>
            <param name="Right">Right predicate</param>
            <param name="Left">Left predicate</param>
            <returns>True if the predicate returns True.  True if the Either is in a bottom state.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.count``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Counts the Either
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to count</param>
            <returns>1 if the Either is in a Right state, 0 otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.exists``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to check existence of</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Right state and the predicate returns True.  False otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.exists``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to check existence of</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Right state and the predicate returns True.  False otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.exists``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to check existence of</param>
            <param name="Right">Right predicate</param>
            <param name="Left">Left predicate</param>
            <returns>True if the predicate returns True.  False otherwise or if the Either is in a bottom state.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.map``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2})">
            <summary>
            Maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped Either type</typeparam>
            <param name="either">Either to map</param>
            <param name="mapper">Map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.mapLeft``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,``2})">
            <summary>
            Maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped Either type</typeparam>
            <param name="either">Either to map</param>
            <param name="mapper">Map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.bimap``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``3},System.Func{``0,``2})">
            <summary>
            Bi-maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="LRet">Left return</typeparam>
            <typeparam name="RRet">Right return</typeparam>
            <param name="self">Either to map</param>
            <param name="Right">Right map function</param>
            <param name="Left">Left map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.map``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.map``5(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2,``3,``4})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.filter``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>If the Either is in the Left state it is returned as-is.  
            If in the Right state the predicate is applied to the Right value.
            If the predicate returns True the Either is returned as-is.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.filter``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>If the Either is in the Right state it is returned as-is.  
            If in the Left state the predicate is applied to the Left value.
            If the predicate returns True the Either is returned as-is.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.filter``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Bi-filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>
            If the Either is in the Left state then the Left predicate is run against it.
            If the Either is in the Right state then the Right predicate is run against it.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.bind``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="either"></param>
            <param name="binder"></param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.bind``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="either"></param>
            <param name="binder"></param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.bind``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}},System.Func{``0,LanguageExt.EitherUnsafe{``2,``3}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="self">this</param>
            <param name="Right">Right bind function</param>
            <param name="Left">Left bind function</param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:LanguageExt.Prelude.match``3(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,``2},System.Func{``0,``2})">
            <summary>
            Match over a sequence of Eithers
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped type</typeparam>
            <param name="list">Sequence to match over</param>
            <param name="Right">Right match function</param>
            <param name="Left">Left match function</param>
            <returns>Sequence of mapped values</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Match``3(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,``2},System.Func{``0,``2})">
            <summary>
            Match over a sequence of Eithers
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped type</typeparam>
            <param name="list">Sequence to match over</param>
            <param name="Right">Right match function</param>
            <param name="Left">Left match function</param>
            <returns>Sequence of mapped values</returns>
        </member>
        <member name="M:LanguageExt.Prelude.rightToList``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Project the Either into a Lst R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.rightToArray``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Project the Either into an ImmutableArray R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.leftToList``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Project the Either into a Lst L
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Left state, a Lst of L with one item.  A zero length Lst L otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.leftToArray``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Project the Either into an array of L
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, an array of L with one item.  A zero length array of L otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.toQuery``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Project the Either into an IQueryable of R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, an IQueryable of R with one item.  A zero length IQueryable R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.rightToQuery``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Project the Either into an IQueryable of R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, an IQueryable of R with one item.  A zero length IQueryable R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.leftToQuery``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Project the Either into an IQueryable of L
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Left state, an IQueryable of L with one item.  A zero length IQueryable L otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.lefts``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Extracts from a list of 'Either' all the 'Left' elements.
            All the 'Left' elements are extracted in order.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>An enumerable of L</returns>
        </member>
        <member name="M:LanguageExt.Prelude.rights``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Extracts from a list of 'Either' all the 'Right' elements.
            All the 'Right' elements are extracted in order.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>An enumerable of L</returns>
        </member>
        <member name="M:LanguageExt.Prelude.partition``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Partitions a list of 'Either' into two lists.
            All the 'Left' elements are extracted, in order, to the first
            component of the output.  Similarly the 'Right' elements are extracted
            to the second component of the output.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>A tuple containing the an enumerable of L and an enumerable of R</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``1(System.Func{``0})">
            <summary>
            Func type inference helper
            
            Try it with lambdas, instead of doing:
            
                Func&lt;int,int,int&gt; add = (int x, int y) => x + y;
            
            You can use this function and do:
            
                var add = fun((int x, int y) => x + y);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>The same func you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``2(System.Func{``0,``1})">
            <summary>
            Func type inference helper
            
            Try it with lambdas, instead of doing:
            
                Func&lt;int,int,int&gt; add = (int x, int y) => x + y;
            
            You can use this function and do:
            
                var add = fun((int x, int y) => x + y);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>The same func you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``3(System.Func{``0,``1,``2})">
            <summary>
            Func type inference helper
            
            Try it with lambdas, instead of doing:
            
                Func&lt;int,int,int&gt; add = (int x, int y) => x + y;
            
            You can use this function and do:
            
                var add = fun((int x, int y) => x + y);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>The same func you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Func type inference helper
            
            Try it with lambdas, instead of doing:
            
                Func&lt;int,int,int&gt; add = (int x, int y) => x + y;
            
            You can use this function and do:
            
                var add = fun((int x, int y) => x + y);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>The same func you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Func type inference helper
            
            Try it with lambdas, instead of doing:
            
                Func&lt;int,int,int&gt; add = (int x, int y) => x + y;
            
            You can use this function and do:
            
                var add = fun((int x, int y) => x + y);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>The same func you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Func type inference helper
            
            Try it with lambdas, instead of doing:
            
                Func&lt;int,int,int&gt; add = (int x, int y) => x + y;
            
            You can use this function and do:
            
                var add = fun((int x, int y) => x + y);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>The same func you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Func type inference helper
            
            Try it with lambdas, instead of doing:
            
                Func&lt;int,int,int&gt; add = (int x, int y) => x + y;
            
            You can use this function and do:
            
                var add = fun((int x, int y) => x + y);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>The same func you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Func type inference helper
            
            Try it with lambdas, instead of doing:
            
                Func&lt;int,int,int&gt; add = (int x, int y) => x + y;
            
            You can use this function and do:
            
                var add = fun((int x, int y) => x + y);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>The same func you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun(System.Action)">
            <summary>
            Action type inference helper and converts it to a Func that returns a Unit instead of void
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string,Unit&gt; putStr = (string x) => { Console.WriteLine(x); return unit; }
            
            You can use this function and do:
            
                var putStr = fun((string x) => Console.WriteLine(x) );
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Func that returns a Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``1(System.Action{``0})">
            <summary>
            Action type inference helper and converts it to a Func that returns a Unit instead of void
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string,Unit&gt; putStr = (string x) => { Console.WriteLine(x); return unit; }
            
            You can use this function and do:
            
                var putStr = fun((string x) => Console.WriteLine(x) );
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Func that returns a Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``2(System.Action{``0,``1})">
            <summary>
            Action type inference helper and converts it to a Func that returns a Unit instead of void
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string,Unit&gt; putStr = (string x) => { Console.WriteLine(x); return unit; }
            
            You can use this function and do:
            
                var putStr = fun((string x) => Console.WriteLine(x) );
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Func that returns a Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``3(System.Action{``0,``1,``2})">
            <summary>
            Action type inference helper and converts it to a Func that returns a Unit instead of void
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string,Unit&gt; putStr = (string x) => { Console.WriteLine(x); return unit; }
            
            You can use this function and do:
            
                var putStr = fun((string x) => Console.WriteLine(x) );
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Func that returns a Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Action type inference helper and converts it to a Func that returns a Unit instead of void
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string,Unit&gt; putStr = (string x) => { Console.WriteLine(x); return unit; }
            
            You can use this function and do:
            
                var putStr = fun((string x) => Console.WriteLine(x) );
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Func that returns a Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Action type inference helper and converts it to a Func that returns a Unit instead of void
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string,Unit&gt; putStr = (string x) => { Console.WriteLine(x); return unit; }
            
            You can use this function and do:
            
                var putStr = fun((string x) => Console.WriteLine(x) );
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Func that returns a Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Action type inference helper and converts it to a Func that returns a Unit instead of void
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string,Unit&gt; putStr = (string x) => { Console.WriteLine(x); return unit; }
            
            You can use this function and do:
            
                var putStr = fun((string x) => Console.WriteLine(x) );
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Func that returns a Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fun``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Action type inference helper and converts it to a Func that returns a Unit instead of void
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string,Unit&gt; putStr = (string x) => { Console.WriteLine(x); return unit; }
            
            You can use this function and do:
            
                var putStr = fun((string x) => Console.WriteLine(x) );
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Func that returns a Unit</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act(System.Action)">
            <summary>
            Action type inference helper
            
            Try it with lambdas, instead of doing:
            
                Action&lt;string&gt; putStr = (string x) => Console.WriteLine(x);
            
            You can use this function and do:
            
                var putStr = act((string x) => Console.WriteLine(x));
            
            </summary>
            <param name="f">Action to infer</param>
            <returns>The same Action you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``1(System.Action{``0})">
            <summary>
            Action type inference helper
            
            Try it with lambdas, instead of doing:
            
                Action&lt;string&gt; putStr = (string x) => Console.WriteLine(x);
            
            You can use this function and do:
            
                var putStr = act((string x) => Console.WriteLine(x));
            
            </summary>
            <param name="f">Action to infer</param>
            <returns>The same Action you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``2(System.Action{``0,``1})">
            <summary>
            Action type inference helper
            
            Try it with lambdas, instead of doing:
            
                Action&lt;string&gt; putStr = (string x) => Console.WriteLine(x);
            
            You can use this function and do:
            
                var putStr = act((string x) => Console.WriteLine(x));
            
            </summary>
            <param name="f">Action to infer</param>
            <returns>The same Action you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``3(System.Action{``0,``1,``2})">
            <summary>
            Action type inference helper
            
            Try it with lambdas, instead of doing:
            
                Action&lt;string&gt; putStr = (string x) => Console.WriteLine(x);
            
            You can use this function and do:
            
                var putStr = act((string x) => Console.WriteLine(x));
            
            </summary>
            <param name="f">Action to infer</param>
            <returns>The same Action you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Action type inference helper
            
            Try it with lambdas, instead of doing:
            
                Action&lt;string&gt; putStr = (string x) => Console.WriteLine(x);
            
            You can use this function and do:
            
                var putStr = act((string x) => Console.WriteLine(x));
            
            </summary>
            <param name="f">Action to infer</param>
            <returns>The same Action you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Action type inference helper
            
            Try it with lambdas, instead of doing:
            
                Action&lt;string&gt; putStr = (string x) => Console.WriteLine(x);
            
            You can use this function and do:
            
                var putStr = act((string x) => Console.WriteLine(x));
            
            </summary>
            <param name="f">Action to infer</param>
            <returns>The same Action you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Action type inference helper
            
            Try it with lambdas, instead of doing:
            
                Action&lt;string&gt; putStr = (string x) => Console.WriteLine(x);
            
            You can use this function and do:
            
                var putStr = act((string x) => Console.WriteLine(x));
            
            </summary>
            <param name="f">Action to infer</param>
            <returns>The same Action you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Action type inference helper
            
            Try it with lambdas, instead of doing:
            
                Action&lt;string&gt; putStr = (string x) => Console.WriteLine(x);
            
            You can use this function and do:
            
                var putStr = act((string x) => Console.WriteLine(x));
            
            </summary>
            <param name="f">Action to infer</param>
            <returns>The same Action you gave it, but allows the type system to work out what f is</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``1(System.Func{``0})">
            <summary>
            Func type inference helper; converts it to an Action by dropping the return value
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string, string&gt; thereIs = ...
            
                Action&lt;string,Unit&gt; thereIsNoReturn = (string x) => { thereis(x); };
            
            You can use this function and do:
            
                var thereIsNoReturn = act(thereIs);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Action that is the same as the Func passed in, but with the return type dropped</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``2(System.Func{``0,``1})">
            <summary>
            Func type inference helper; converts it to an Action by dropping the return value
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string, string&gt; thereIs = ...
            
                Action&lt;string,Unit&gt; thereIsNoReturn = (string x) => { thereis(x); };
            
            You can use this function and do:
            
                var thereIsNoReturn = act(thereIs);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Action that is the same as the Func passed in, but with the return type dropped</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``3(System.Func{``0,``1,``2})">
            <summary>
            Func type inference helper; converts it to an Action by dropping the return value
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string, string&gt; thereIs = ...
            
                Action&lt;string,Unit&gt; thereIsNoReturn = (string x) => { thereis(x); };
            
            You can use this function and do:
            
                var thereIsNoReturn = act(thereIs);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Action that is the same as the Func passed in, but with the return type dropped</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Func type inference helper; converts it to an Action by dropping the return value
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string, string&gt; thereIs = ...
            
                Action&lt;string,Unit&gt; thereIsNoReturn = (string x) => { thereis(x); };
            
            You can use this function and do:
            
                var thereIsNoReturn = act(thereIs);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Action that is the same as the Func passed in, but with the return type dropped</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Func type inference helper; converts it to an Action by dropping the return value
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string, string&gt; thereIs = ...
            
                Action&lt;string,Unit&gt; thereIsNoReturn = (string x) => { thereis(x); };
            
            You can use this function and do:
            
                var thereIsNoReturn = act(thereIs);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Action that is the same as the Func passed in, but with the return type dropped</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Func type inference helper; converts it to an Action by dropping the return value
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string, string&gt; thereIs = ...
            
                Action&lt;string,Unit&gt; thereIsNoReturn = (string x) => { thereis(x); };
            
            You can use this function and do:
            
                var thereIsNoReturn = act(thereIs);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Action that is the same as the Func passed in, but with the return type dropped</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Func type inference helper; converts it to an Action by dropping the return value
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string, string&gt; thereIs = ...
            
                Action&lt;string,Unit&gt; thereIsNoReturn = (string x) => { thereis(x); };
            
            You can use this function and do:
            
                var thereIsNoReturn = act(thereIs);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Action that is the same as the Func passed in, but with the return type dropped</returns>
        </member>
        <member name="M:LanguageExt.Prelude.act``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Func type inference helper; converts it to an Action by dropping the return value
            
            Try it with lambdas, instead of doing:
            
                Func&lt;string, string&gt; thereIs = ...
            
                Action&lt;string,Unit&gt; thereIsNoReturn = (string x) => { thereis(x); };
            
            You can use this function and do:
            
                var thereIsNoReturn = act(thereIs);
            
            </summary>
            <param name="f">Function to infer</param>
            <returns>Action that is the same as the Func passed in, but with the return type dropped</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``5(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``6(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.expr``7(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Expression inference
            </summary>
            <returns>Same expression passed in, just gives the type system a chance to infer</returns>
        </member>
        <member name="M:LanguageExt.Prelude.compose``3(System.Func{``0,``1},System.Func{``1,``2})">
            <summary>
            Function composition
            </summary>
            <returns>b(a(v))</returns>
        </member>
        <member name="M:LanguageExt.Prelude.compose``4(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3})">
            <summary>
            Function composition
            </summary>
            <returns>c(b(a(v)))</returns>
        </member>
        <member name="M:LanguageExt.Prelude.compose``5(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4})">
            <summary>
            Function composition
            </summary>
            <returns>c(b(a(v)))</returns>
        </member>
        <member name="M:LanguageExt.Prelude.compose``6(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5})">
            <summary>
            Function composition
            </summary>
            <returns>c(b(a(v)))</returns>
        </member>
        <member name="M:LanguageExt.Prelude.compose``7(System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``3},System.Func{``3,``4},System.Func{``4,``5},System.Func{``5,``6})">
            <summary>
            Function composition
            </summary>
            <returns>c(b(a(v)))</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LanguageExt.Prelude.memo``1(System.Func{``0})" -->
        <!-- Badly formed XML comment ignored for member "M:LanguageExt.Prelude.memo``2(System.Func{``0,``1})" -->
        <!-- Badly formed XML comment ignored for member "M:LanguageExt.Prelude.memoUnsafe``2(System.Func{``0,``1})" -->
        <member name="M:LanguageExt.Prelude.memo``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerable memoization.  As an enumerable is enumerated each item is retained
            in an internal list, so that future evalation of the enumerable isn't done. 
            Only items not seen before are evaluated.  
            
            This minimises one of the major problems with the IEnumerable / yield return 
            pattern by causing at-most-once evaluation of each item.  
            
            Use the IEnumerable extension method Memo for convenience.
            </summary>
            <remarks>
            Although this allows efficient lazy evaluation, it does come at a memory cost.
            Each item is cached internally, so this method doesn't allow for evaluation of
            infinite sequences.
            </remarks>
            <param name="seq">Enumerable to memoize</param>
            <returns>IEnumerable with caching properties</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:LanguageExt.Prelude.WeakDict`2" -->
        <member name="M:LanguageExt.Prelude.Rws``4(``3)">
            <summary>
            Reader Writer State monad constructor
            </summary>
            <returns>Rws monad</returns>
        </member>
        <member name="M:LanguageExt.Prelude.tell``3(``1)">
            <summary>
            RWS monad 'tell'
            Adds an item to the writer's output
            </summary>
            <returns>Rws monad</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ask``3">
            <summary>
            RWS monad 'ask'
            Gets the 'environment' so it can be used 
            </summary>
            <returns>Rws monad with the environment in as the wrapped value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ask``4(System.Func{``0,``3})">
            <summary>
            RWS monad 'ask'
            Gets the 'environment' and maps it
            </summary>
            <returns>Rws monad with the mapped environment in as the wrapped value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.get``3">
            <summary>
            Get the state from monad into its wrapped value (RWS)
            </summary>
            <returns>Rws monad with state in the value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.put``3(``2)">
            <summary>
            Set the state (RWS)
            </summary>
            <returns>Rws monad with state set and with a Unit value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Writer``2(``1)">
            <summary>
            Writer monad constructor
            </summary>
            <typeparam name="Out">Writer output</typeparam>
            <typeparam name="T">Wrapped type</typeparam>
            <param name="value">Wrapped value</param>
            <returns>Writer monad</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Writer``2(``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writer monad constructor
            </summary>
            <typeparam name="Out">Writer output</typeparam>
            <typeparam name="T">Wrapped type</typeparam>
            <param name="value">Wrapped value</param>
            <param name="ws">Writer log</param>
            <returns>Writer monad</returns>
        </member>
        <member name="M:LanguageExt.Prelude.tell``1(``0)">
            <summary>
            Writer monad 'tell'
            Adds an item to the writer's output
            </summary>
            <typeparam name="W"></typeparam>
            <param name="value"></param>
            <returns>Writer monad</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Reader``2(``1)">
            <summary>
            Reader monad constructor
            </summary>
            <typeparam name="Env">Environment</typeparam>
            <typeparam name="T">Wrapped type</typeparam>
            <param name="value">Wrapped value</param>
            <returns>Reader monad</returns>
        </member>
        <member name="M:LanguageExt.Prelude.ask``1">
            <summary>
            Reader monad 'ask'
            Gets the 'environment' so it can be used 
            </summary>
            <typeparam name="Env">Environment</typeparam>
            <typeparam name="T">Wrapped type</typeparam>
            <returns>Reader monad with the environment in as the wrapped value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.asks``2(System.Func{``0,``1})">
            <summary>
            Reader monad 'ask'
            Gets the 'environment' and maps it
            </summary>
            <typeparam name="Env">Environment</typeparam>
            <typeparam name="T">Wrapped type</typeparam>
            <typeparam name="R">Mapped value</typeparam>
            <returns>Reader monad with the mapped environment in as the wrapped value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.local``3(System.Func{``2,``0},LanguageExt.Reader{``0,``1})">
            <summary>
            Executes a computation in a modified environment
            </summary>
            <param name="f">The function to modify the environment.</param>
            <param name="m">Reader to modify</param>
            <returns>Modified reader</returns>
        </member>
        <member name="M:LanguageExt.Prelude.local``2(System.Func{``0,``0},LanguageExt.Reader{``0,``1})">
            <summary>
            Executes a computation in a modified environment
            </summary>
            <param name="f">The function to modify the environment.</param>
            <param name="m">Reader to modify</param>
            <returns>Modified reader</returns>
        </member>
        <member name="M:LanguageExt.Prelude.State``2(``1)">
            <summary>
            State monad constructor
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Wrapped value type</typeparam>
            <param name="value">Value</param>
            <returns>State monad</returns>
        </member>
        <member name="M:LanguageExt.Prelude.get``1">
            <summary>
            Get the state from monad into its wrapped value
            </summary>
            <typeparam name="S">State type</typeparam>
            <returns>State monad with state in the value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.put``1(``0)">
            <summary>
            Set the state 
            </summary>
            <typeparam name="S">State type</typeparam>
            <returns>State monad with state set and with a Unit value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.modify``2(LanguageExt.State{``0,``1},System.Func{``0,``0})">
            <summary>
            Modify the state in a State computation, leave the value alone
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Wrapped value type</typeparam>
            <returns>State monad with state set and with a Unit value</returns>
        </member>
        <member name="M:LanguageExt.Prelude.choose``2(LanguageExt.State{``0,LanguageExt.Option{``1}}[])">
            <summary>
            Chooses the first monad result that has a Some(x) for the value
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.query``1(``0[])">
            <summary>
            Create a queryable
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``2">
            <summary>
            Create an immutable map
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``2(System.Tuple{``0,``1}[])">
            <summary>
            Create an immutable map
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``2(System.Collections.Generic.KeyValuePair{``0,``1}[])">
            <summary>
            Create an immutable map
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.list``1">
            <summary>
            Create an immutable list
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.list``1(``0[])">
            <summary>
            Create an immutable list
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.array``1">
            <summary>
            Create an immutable queue
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.array``1(``0)">
            <summary>
            Create an immutable queue
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.array``1(``0[])">
            <summary>
            Create an immutable queue
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.set``1">
            <summary>
            Create an immutable set
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.set``1(``0)">
            <summary>
            Create an immutable set
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.set``1(``0[])">
            <summary>
            Create an immutable set
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.stack``1">
            <summary>
            Create an immutable stack
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.empty``1">
            <summary>
            Create an empty IEnumerable T
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.cons``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Construct a list from head and tail
            head becomes the first item in the list
            Is lazy
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.cons``1(``0,LanguageExt.Lst{``0})">
            <summary>
            Construct a list from head and tail
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.range(System.Char,System.Char)">
            <summary>
            Lazily generate a range of chars.  
            
              Remarks:
                Can go in a positive direction ('a'..'z') as well as negative ('z'..'a')
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.range(LanguageExt.IntegerRange[])">
            <summary>
            Lazily generate integers from any number of provided ranges
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.range(LanguageExt.CharRange[])">
            <summary>
            Lazily generate chars from any number of provided ranges
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.with``3(``0,``1,System.Func{``0,``1,``2})">
            <summary>
            Projects values into a lambda
            Useful when one needs to declare a local variable which breaks your
            expression.  This allows you to keep the expression going.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.with``4(``0,``1,``2,System.Func{``0,``1,``2,``3})">
            <summary>
            Projects values into a lambda
            Useful when one needs to declare a local variable which breaks your
            expression.  This allows you to keep the expression going.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.toList``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Project the Either into a Lst R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.toArray``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Project the Either into an ImmutableArray R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.toList``2(LanguageExt.Either{``0,``1})">
            <summary>
            Project the Either into a Lst R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.toArray``2(LanguageExt.Either{``0,``1})">
            <summary>
            Project the Either into an ImmutableArray R
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="either">Either to project</param>
            <returns>If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Failure``1(LanguageExt.TryOption{``0},``0)">
            <summary>
            Returns the Some(value) of the TryOption or a default if it's None or Fail
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Failure``1(LanguageExt.TryOption{``0},System.Func{``0})">
            <summary>
            Returns the Some(value) of the TryOption or a default if it's None or Fail
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.append``1(LanguageExt.Option{``0},LanguageExt.Option{``0})">
            <summary>
            Append the Some(x) of one option to the Some(y) of another.  If either of the
            options are None then the result is None
            For numeric values the behaviour is to sum the Somes (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.subtract``1(LanguageExt.Option{``0},LanguageExt.Option{``0})">
            <summary>
            Subtract the Some(x) of one option from the Some(y) of another.  If either of the
            options are None then the result is None
            For numeric values the behaviour is to find the difference between the Somes (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.multiply``1(LanguageExt.Option{``0},LanguageExt.Option{``0})">
            <summary>
            Find the product of the Somes.  If either of the options are None then the result is None
            For numeric values the behaviour is to multiply the Somes (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.divide``1(LanguageExt.Option{``0},LanguageExt.Option{``0})">
            <summary>
            Divide the Somes.  If either of the options are None then the result is None
            For numeric values the behaviour is to divide the Somes (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.isSome``1(LanguageExt.Option{``0})">
            <summary>
            Check if Option is in a Some state
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="value">Option</param>
            <returns>True if value is in a Some state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.isNone``1(LanguageExt.Option{``0})">
            <summary>
            Check if Option is in a None state
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="value">Option</param>
            <returns>True if value is in a None state</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LanguageExt.Prelude.Some``1(``0)" -->
        <!-- Badly formed XML comment ignored for member "M:LanguageExt.Prelude.Some``1(System.Nullable{``0})" -->
        <member name="M:LanguageExt.Prelude.Optional``1(``0)">
            <summary>
            Create an Option
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="value">Value to be made optional, or null</param>
            <returns>If the value is null it will be None else Some(value)</returns>
        </member>
        <member name="M:LanguageExt.Prelude.Optional``1(System.Nullable{``0})">
            <summary>
            Create an Option
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="value">Value to be made optional, or null</param>
            <returns>If the value is null it will be None else Some(value)</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``2(LanguageExt.Option{System.Func{``0,``1}},LanguageExt.Option{``0})">
            <summary>
            Apply an Optional value to an Optional function
            </summary>
            <param name="option">Optional function</param>
            <param name="arg">Optional argument</param>
            <returns>Returns the result of applying the optional argument to the optional function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``3(LanguageExt.Option{System.Func{``0,``1,``2}},LanguageExt.Option{``0})">
            <summary>
            Apply an Optional value to an Optional function of arity 2
            </summary>
            <param name="option">Optional function</param>
            <param name="arg">Optional argument</param>
            <returns>Returns the result of applying the optional argument to the optional function:
            an optonal function of arity 1</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``3(LanguageExt.Option{System.Func{``0,``1,``2}},LanguageExt.Option{``0},LanguageExt.Option{``1})">
            <summary>
            Apply Optional values to an Optional function of arity 2
            </summary>
            <param name="option">Optional function</param>
            <param name="arg1">Optional argument</param>
            <param name="arg2">Optional argument</param>
            <returns>Returns the result of applying the optional arguments to the optional function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``2(LanguageExt.Option{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds the option into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="option">Option to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``2(LanguageExt.Option{``1},``0,System.Func{``0,``1,``0},System.Func{``0,``0})">
            <summary>
            Folds the option into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="option">Option to fold</param>
            <param name="state">Initial state</param>
            <param name="Some">Fold function for Some</param>
            <param name="None">Fold function for None</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.map``3(LanguageExt.Option{``0},System.Func{``0,``1,``2})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.map``4(LanguageExt.Option{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.somes``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}})">
            <summary>
            Extracts from a list of 'Option' all the 'Some' elements.
            All the 'Some' elements are extracted in order.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.append``1(LanguageExt.OptionUnsafe{``0},LanguageExt.OptionUnsafe{``0})">
            <summary>
            Append the Some(x) of one option to the Some(y) of another.  If either of the
            options are None then the result is None
            For numeric values the behaviour is to sum the Somes (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.subtract``1(LanguageExt.OptionUnsafe{``0},LanguageExt.OptionUnsafe{``0})">
            <summary>
            Subtract the Some(x) of one option from the Some(y) of another.  If either of the
            options are None then the result is None
            For numeric values the behaviour is to find the difference between the Somes (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.multiply``1(LanguageExt.OptionUnsafe{``0},LanguageExt.OptionUnsafe{``0})">
            <summary>
            Find the product of the Somes.  If either of the options are None then the result is None
            For numeric values the behaviour is to multiply the Somes (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.divide``1(LanguageExt.OptionUnsafe{``0},LanguageExt.OptionUnsafe{``0})">
            <summary>
            Divide the Somes.  If either of the options are None then the result is None
            For numeric values the behaviour is to divide the Somes (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LanguageExt.Prelude.SomeUnsafe``1(``0)" -->
        <member name="M:LanguageExt.Prelude.fold``2(LanguageExt.OptionUnsafe{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds the option into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="option">Option to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.map``3(LanguageExt.OptionUnsafe{``0},System.Func{``0,``1,``2})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.map``4(LanguageExt.OptionUnsafe{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.apply``2(LanguageExt.OptionUnsafe{System.Func{``0,``1}},LanguageExt.OptionUnsafe{``0})">
            <summary>
            Apply an Optional value to an Optional function
            </summary>
            <param name="option">Optional function</param>
            <param name="arg">Optional argument</param>
            <returns>Returns the result of applying the optional argument to the optional function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``3(LanguageExt.OptionUnsafe{System.Func{``0,``1,``2}},LanguageExt.OptionUnsafe{``0})">
            <summary>
            Apply an Optional value to an Optional function of arity 2
            </summary>
            <param name="option">Optional function</param>
            <param name="arg">Optional argument</param>
            <returns>Returns the result of applying the optional argument to the optional function:
            an optonal function of arity 1</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``3(LanguageExt.OptionUnsafe{System.Func{``0,``1,``2}},LanguageExt.OptionUnsafe{``0},LanguageExt.OptionUnsafe{``1})">
            <summary>
            Apply Optional values to an Optional function of arity 2
            </summary>
            <param name="option">Optional function</param>
            <param name="arg1">Optional argument</param>
            <param name="arg2">Optional argument</param>
            <returns>Returns the result of applying the optional arguments to the optional function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.somesUnsafe``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Extracts from a list of 'Option' all the 'Some' elements.
            All the 'Some' elements are extracted in order.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.lpar``3(System.Func{``0,``1,``2},``1)">
            <summary>
            Left partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``3(System.Func{``0,``1,``2},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``4(System.Func{``0,``1,``2,``3},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``4(System.Func{``0,``1,``2,``3},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``5(System.Func{``0,``1,``2,``3,``4},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``5(System.Func{``0,``1,``2,``3,``4},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``6(System.Func{``0,``1,``2,``3,``4,``5},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``6(System.Func{``0,``1,``2,``3,``4,``5},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Func{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``2(System.Action{``0,``1},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``3(System.Action{``0,``1,``2},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``3(System.Action{``0,``1,``2},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``4(System.Action{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``4(System.Action{``0,``1,``2,``3},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``4(System.Action{``0,``1,``2,``3},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``5(System.Action{``0,``1,``2,``3,``4},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``5(System.Action{``0,``1,``2,``3,``4},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``5(System.Action{``0,``1,``2,``3,``4},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``6(System.Action{``0,``1,``2,``3,``4,``5},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``6(System.Action{``0,``1,``2,``3,``4,``5},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``7(System.Action{``0,``1,``2,``3,``4,``5,``6},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.par``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Partially apply 
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.random(System.Int32)">
            <summary>
            Thread-safe cryptographically strong random number generator
            </summary>
            <param name="max">Maximum value to return + 1</param>
            <returns>A non-negative random number, less than the value specified.</returns>
        </member>
        <member name="M:LanguageExt.Prelude.randomBase64(System.Int32)">
            <summary>
            Thread-safe cryptographically strong random base-64 string generator
            </summary>
            <param name="count">bytesCount - number of bytes generated that are then 
            returned Base64 encoded</param>
            <returns>Base64 encoded random string</returns>
        </member>
        <member name="M:LanguageExt.Prelude.sum(System.Threading.Tasks.Task{System.Int32})">
            <summary>
            Get the Sum of a Task int.  Returns either the wrapped value or 0 if cancelled or faulted.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.count``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Get the Count of a Task T.  Returns either 1 or 0 if cancelled or faulted.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.bind``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Monadic bind operation for Task
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.exists``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns false if the Task is cancelled or faulted, otherwise
            it returns the result of pred(Result)
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.forall``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns false if the Task is cancelled or faulted, otherwise
            it returns the result of pred(Result)
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.filter``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the task.  This throws a BottomException when pred(Result)
            returns false
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.fold``2(System.Threading.Tasks.Task{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Folds the Task.  Returns folder(state,Result) if not faulted or
            cancelled.  Returns state otherwise.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.iter``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            Iterates the Task.  Invokes f(Result) if not faulted or cancelled
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Returns map(Result) if not faulted or cancelled.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.liftUnsafe``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Extracts the value from the Task - here for completeness so that
            the HKT work.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.lift``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Extracts the value from the Task - here for completeness so that
            the HKT work.
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.delay``1(System.Func{``0},System.TimeSpan)">
            <summary>
            Execute a function after a specified delay
            </summary>
            <param name="f">Function to execute</param>
            <param name="delayFor">Time span to delay for</param>
            <returns>IObservable T with the result</returns>
        </member>
        <member name="M:LanguageExt.Prelude.delay``1(System.Func{``0},System.DateTime)">
            <summary>
            Execute a function at a specific time
            </summary>
            <remarks>
            This will fail to be accurate across a Daylight Saving Time boundary
            </remarks>
            <param name="f">Function to execute</param>
            <param name="delayUntil">DateTime to wake up at.</param>
            <returns>IObservable T with the result</returns>
        </member>
        <member name="M:LanguageExt.Prelude.delay(System.Action,System.TimeSpan)">
            <summary>
            Execute an action after a specified delay
            </summary>
            <param name="f">Action to execute</param>
            <param name="delayFor">Time span to delay for</param>
        </member>
        <member name="M:LanguageExt.Prelude.delay(System.Action,System.DateTime)">
            <summary>
            Execute a function at a specific time
            </summary>
            <remarks>
            This will fail to be accurate across a Daylight Saving Time boundary
            </remarks>
            <param name="f">Action to execute</param>
            <param name="delayUntil">DateTime to wake up at.</param>
        </member>
        <member name="M:LanguageExt.Prelude.append``1(LanguageExt.Try{``0},LanguageExt.Try{``0})">
            <summary>
            Append the Try(x) to Try(y).  If either of the Trys throw then the result is Fail
            For numeric values the behaviour is to sum the Trys (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.subtract``1(LanguageExt.Try{``0},LanguageExt.Try{``0})">
            <summary>
            Subtract the Try(x) from Try(y).  If either of the Trys throw then the result is Fail
            For numeric values the behaviour is to find the difference between the Trys (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.multiply``1(LanguageExt.Try{``0},LanguageExt.Try{``0})">
            <summary>
            Find the product of Try(x) and Try(y).  If either of the Trys throw then the result is Fail
            For numeric values the behaviour is to multiply the Trys (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.divide``1(LanguageExt.Try{``0},LanguageExt.Try{``0})">
            <summary>
            Divide Try(x) by Try(y).  If either of the Trys throw then the result is Fail
            For numeric values the behaviour is to divide the Trys (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``2(LanguageExt.Try{System.Func{``0,``1}},LanguageExt.Try{``0})">
            <summary>
            Apply a Try value to a Try function
            </summary>
            <param name="self">Try function</param>
            <param name="arg">Try argument</param>
            <returns>Returns the result of applying the Try argument to the Try function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``3(LanguageExt.Try{System.Func{``0,``1,``2}},LanguageExt.Try{``0})">
            <summary>
            Apply a Try value to a Try function of arity 2
            </summary>
            <param name="self">Try function</param>
            <param name="arg">Try argument</param>
            <returns>Returns the result of applying the Try argument to the Try function:
            a Try function of arity 1</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``3(LanguageExt.Try{System.Func{``0,``1,``2}},LanguageExt.Try{``0},LanguageExt.Try{``1})">
            <summary>
            Apply Try values to a Try function of arity 2
            </summary>
            <param name="self">Try function</param>
            <param name="arg1">Try argument</param>
            <param name="arg2">Try argument</param>
            <returns>Returns the result of applying the Try arguments to the Try function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``2(LanguageExt.Try{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds the value of Try into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="tryDel">Try to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``2(LanguageExt.Try{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Exception,``0})">
            <summary>
            Folds the result of Try into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="tryDel">Try to fold</param>
            <param name="state">Initial state</param>
            <param name="Succ">Fold function when Try succeeds</param>
            <param name="Fail">Fold function when Try fails</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.map``3(LanguageExt.Try{``0},System.Func{``0,``1,``2})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.map``4(LanguageExt.Try{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.append``1(LanguageExt.TryOption{``0},LanguageExt.TryOption{``0})">
            <summary>
            Append the TryOption(x) to TryOption(y).
            If either of the TryOptions throw then the result is Fail
            If either of the TryOptions return None then the result is None
            For numeric values the behaviour is to sum the TryOptions (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.subtract``1(LanguageExt.TryOption{``0},LanguageExt.TryOption{``0})">
            <summary>
            Subtract the TryOption(x) from TryOption(y).
            If either of the TryOptions throw then the result is Fail
            If either of the TryOptions return None then the result is None
            For numeric values the behaviour is to find the difference between the TryOptions (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.multiply``1(LanguageExt.TryOption{``0},LanguageExt.TryOption{``0})">
            <summary>
            Find the product of TryOption(x) and TryOption(y).
            If either of the TryOptions throw then the result is Fail
            If either of the TryOptions return None then the result is None
            For numeric values the behaviour is to multiply the TryOptions (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.divide``1(LanguageExt.TryOption{``0},LanguageExt.TryOption{``0})">
            <summary>
            Divide TryOption(x) by TryOption(y).  
            If either of the TryOptions throw then the result is Fail
            If either of the TryOptions return None then the result is None
            For numeric values the behaviour is to divide the TryOptions (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``2(LanguageExt.TryOption{System.Func{``0,``1}},LanguageExt.TryOption{``0})">
            <summary>
            Apply a TryOption value to a TryOption function
            </summary>
            <param name="self">TryOption function</param>
            <param name="arg">TryOption argument</param>
            <returns>Returns the result of applying the TryOption argument to the TryOption function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``3(LanguageExt.TryOption{System.Func{``0,``1,``2}},LanguageExt.TryOption{``0})">
            <summary>
            Apply a TryOption value to a TryOption function of arity 2
            </summary>
            <param name="self">TryOption function</param>
            <param name="arg">TryOption argument</param>
            <returns>Returns the result of applying the TryOption argument to the TryOption function:
            a TryOption function of arity 1</returns>
        </member>
        <member name="M:LanguageExt.Prelude.apply``3(LanguageExt.TryOption{System.Func{``0,``1,``2}},LanguageExt.TryOption{``0},LanguageExt.TryOption{``1})">
            <summary>
            Apply TryOption values to a TryOption function of arity 2
            </summary>
            <param name="self">TryOption function</param>
            <param name="arg1">TryOption argument</param>
            <param name="arg2">TryOption argument</param>
            <returns>Returns the result of applying the TryOption arguments to TryOption Try function</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``2(LanguageExt.TryOption{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds the value of TryOption into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="tryDel">Try to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.fold``2(LanguageExt.TryOption{``1},``0,System.Func{``0,``1,``0},System.Func{``0,``0},System.Func{``0,System.Exception,``0})">
            <summary>
            Folds the result of TryOption into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="tryDel">Try to fold</param>
            <param name="state">Initial state</param>
            <param name="Some">Fold function for Some</param>
            <param name="None">Fold function for None</param>
            <param name="Fail">Fold function for Failure</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Prelude.map``3(LanguageExt.TryOption{``0},System.Func{``0,``1,``2})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.map``4(LanguageExt.TryOption{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.Prelude.Tuple``2(``0,``1)">
            <summary>
            Tuple constructor
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Tuple``3(``0,``1,``2)">
            <summary>
            Tuple constructor
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Tuple``4(``0,``1,``2,``3)">
            <summary>
            Tuple constructor
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Tuple``5(``0,``1,``2,``3,``4)">
            <summary>
            Tuple constructor
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Tuple``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Tuple constructor
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.Tuple``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Tuple constructor
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``5(System.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Tuple map
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Tuple map
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Tuple map
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Tuple map
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.iter``4(System.Tuple{``0,``1,``2,``3},System.Action{``0,``1,``2,``3})">
            <summary>
            Tuple iterate
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.iter``5(System.Tuple{``0,``1,``2,``3,``4},System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Tuple iterate
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.iter``6(System.Tuple{``0,``1,``2,``3,``4,``5},System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Tuple iterate
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.iter``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Tuple iterate
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.append``3(System.Tuple{``0,``1},``2)">
            <summary>
            Append an extra item to the tuple
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.sum``2(System.Tuple{System.Int32,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.sum``2(System.Tuple{System.Double,System.Double})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.sum``2(System.Tuple{System.Single,System.Single})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.sum``2(System.Tuple{System.Decimal,System.Decimal})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``3(System.Tuple{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            Map to R
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``4(System.Tuple{``0,``1},System.Func{System.Tuple{``0,``1},System.Tuple{``2,``3}})">
            <summary>
            Map to tuple
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``4(System.Tuple{``0,``1},System.Func{``0,``2},System.Func{``1,``3})">
            <summary>
            Bi-map to tuple
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.iter``2(System.Tuple{``0,``1},System.Action{``0},System.Action{``1})">
            <summary>
            Iterate
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.iter``2(System.Tuple{``0,``1},System.Action{``0,``1})">
            <summary>
            Iterate
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.fold``3(System.Tuple{``0,``1},``2,System.Func{``2,``0,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.fold``3(System.Tuple{``0,``1},``2,System.Func{``2,``0,``2},System.Func{``2,``1,``2})">
            <summary>
            Bi-fold
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.foldBack``3(System.Tuple{``0,``1},``2,System.Func{``2,``1,``2},System.Func{``2,``0,``2})">
            <summary>
            Bi-fold back
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.append``4(System.Tuple{``0,``1,``2},``3)">
            <summary>
            Append an extra item to the tuple
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.sum(System.Tuple{System.Int32,System.Int32,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.sum(System.Tuple{System.Double,System.Double,System.Double})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.sum(System.Tuple{System.Single,System.Single,System.Single})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.sum(System.Tuple{System.Decimal,System.Decimal,System.Decimal})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``4(System.Tuple{``0,``1,``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Map to R
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``6(System.Tuple{``0,``1,``2},System.Func{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5}})">
            <summary>
            Map to tuple
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.map``6(System.Tuple{``0,``1,``2},System.Func{``0,``3},System.Func{``1,``4},System.Func{``2,``5})">
            <summary>
            Tri-map to tuple
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.mapFirst``4(System.Tuple{``0,``1,``2},System.Func{``0,``3})">
            <summary>
            First item-map to tuple
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.mapSecond``4(System.Tuple{``0,``1,``2},System.Func{``1,``3})">
            <summary>
            Second item-map to tuple
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.mapThird``4(System.Tuple{``0,``1,``2},System.Func{``2,``3})">
            <summary>
            Second item-map to tuple
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.iter``3(System.Tuple{``0,``1,``2},System.Action{``0,``1,``2})">
            <summary>
            Iterate
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.iter``3(System.Tuple{``0,``1,``2},System.Action{``0},System.Action{``1},System.Action{``2})">
            <summary>
            Iterate
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.fold``4(System.Tuple{``0,``1,``2},``3,System.Func{``3,``0,``1,``2,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.fold``4(System.Tuple{``0,``1,``2},``3,System.Func{``3,``0,``3},System.Func{``3,``1,``3},System.Func{``3,``2,``3})">
            <summary>
            Tri-fold
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.foldBack``4(System.Tuple{``0,``1,``2},``3,System.Func{``3,``2,``3},System.Func{``3,``1,``3},System.Func{``3,``0,``3})">
            <summary>
            Tri-fold
            </summary>
        </member>
        <member name="F:LanguageExt.Prelude.mm">
            <summary>
            Millimetre
            </summary>
            <example>
                Length x = 10*mm;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.millimetre">
            <summary>
            Millimetre
            </summary>
            <example>
                Length x = 1*millimetre;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.millimetres">
            <summary>
            Millimetre
            </summary>
            <example>
                Length x = 10*millimetres;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.millimeter">
            <summary>
            Millimeter
            </summary>
            <example>
                Length x = 1*millimeter;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.millimeters">
            <summary>
            Millimeters
            </summary>
            <example>
                Length x = 10*millimeters;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.cm">
            <summary>
            Centimetre
            </summary>
            <example>
                Length x = 100*cm;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.centimetre">
            <summary>
            Centimetre
            </summary>
            <example>
                Length x = 1*centimetre;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.centimetres">
            <summary>
            Centimetres
            </summary>
            <example>
                Length x = 100*centimetres
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.centimeter">
            <summary>
            Centimeter
            </summary>
            <example>
                Length x = 1*centimeter;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.centimeters">
            <summary>
            Centimeters
            </summary>
            <example>
                Length x = 100*centimeters;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.m">
            <summary>
            Metre
            </summary>
            <example>
                Length x = 10*m;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.metre">
            <summary>
            Metre
            </summary>
            <example>
                Length x = 1*metre;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.metres">
            <summary>
            Metres
            </summary>
            <example>
                Length x = 10*metres;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.meter">
            <summary>
            Meter
            </summary>
            <example>
                Length x = 1*meter;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.meters">
            <summary>
            Meters
            </summary>
            <example>
                Length x = 10*meters;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.km">
            <summary>
            Kilometre
            </summary>
            <example>
                Length x = 7*km;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.kilometre">
            <summary>
            Kilometre
            </summary>
            <example>
                Length x = 1*kilometre;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.kilometres">
            <summary>
            Kilometres
            </summary>
            <example>
                Length x = 7*kilometres;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.kilometer">
            <summary>
            Kilometer
            </summary>
            <example>
                Length x = 1*kilometer;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.kilometers">
            <summary>
            Kilometers
            </summary>
            <example>
                Length x = 7*kilometers;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.inch">
            <summary>
            Inch
            </summary>
            <example>
                Length x = 7*inch;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.inches">
            <summary>
            Inch
            </summary>
            <example>
                Length x = 7*inch;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.ft">
            <summary>
            Feet
            </summary>
            <example>
                Length x = 7*ft;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.foot">
            <summary>
            Feet
            </summary>
            <example>
                Length x = 7*ft;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.feet">
            <summary>
            Feet
            </summary>
            <example>
                Length x = 7*ft;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.yd">
            <summary>
            Yard
            </summary>
            <example>
                Length x = 7*yd;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.yard">
            <summary>
            Yard
            </summary>
            <example>
                Length x = 7*yd;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.yards">
            <summary>
            Yard
            </summary>
            <example>
                Length x = 7*yd;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.mile">
            <summary>
            Mile
            </summary>
            <example>
                Length x = 7*mile;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.miles">
            <summary>
            Mile
            </summary>
            <example>
                Length x = 7*mile;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.mm2">
            <summary>
            Millimetre squared
            </summary>
            <example>
                Area x = 10*mm2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.millimetre2">
            <summary>
            Millimetre squared
            </summary>
            <example>
                Area x = 1*millimetre2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.millimeter2">
            <summary>
            Millimeter squared
            </summary>
            <example>
                Area x = 10*millimeter2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.cm2">
            <summary>
            Centimetre squared
            </summary>
            <example>
                Area x = 100*cm2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.centimetre2">
            <summary>
            Centimetre squared
            </summary>
            <example>
                Area x = 100*centimetre2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.centimeter2">
            <summary>
            Centimeter squared
            </summary>
            <example>
                Area x = 100*centimeter2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.m2">
            <summary>
            Metre squared
            </summary>
            <example>
                Area x = 10*m2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.metre2">
            <summary>
            Metre squared
            </summary>
            <example>
                Area x = 10*metre2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.meter2">
            <summary>
            Meter squared
            </summary>
            <example>
                Area x = 10*meter2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.km2">
            <summary>
            Kilometre squared
            </summary>
            <example>
                Area x = 7*km2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.kilometre2">
            <summary>
            Kilometre squared
            </summary>
            <example>
                Area x = 7*kilometre2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.kilometer2">
            <summary>
            Kilometer squared
            </summary>
            <example>
                Area x = 7*kilometer2;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.s">
            <summary>
            Second
            </summary>
            <example>
                Time x = 7*s;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.sec">
            <summary>
            Second
            </summary>
            <example>
                Time x = 7*sec;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.second">
            <summary>
            Second
            </summary>
            <example>
                Time x = 7*second;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.seconds">
            <summary>
            Second
            </summary>
            <example>
                Time x = 7*seconds;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.min">
            <summary>
            Minute
            </summary>
            <example>
                Time x = 7*min;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.mins">
            <summary>
            Minute
            </summary>
            <example>
                Time x = 7*mins;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.minute">
            <summary>
            Minute
            </summary>
            <example>
                Time x = 7*minute;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.minutes">
            <summary>
            Minute
            </summary>
            <example>
                Time x = 7*minutes;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.hr">
            <summary>
            Hour
            </summary>
            <example>
                Time x = 7*hr;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.hrs">
            <summary>
            Hour
            </summary>
            <example>
                Time x = 7*hrs;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.hour">
            <summary>
            Hour
            </summary>
            <example>
                Time x = 7*hour;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.hours">
            <summary>
            Hour
            </summary>
            <example>
                Time x = 7*hours;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.day">
            <summary>
            Day
            </summary>
            <example>
                Time x = 7*day;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.days">
            <summary>
            Day
            </summary>
            <example>
                Time x = 7*days;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.ms">
            <summary>
            Millisecond
            </summary>
            <example>
                Time x = 7*ms;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.millisecond">
            <summary>
            Millisecond
            </summary>
            <example>
                Time x = 7*millisecond;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.milliseconds">
            <summary>
            Millisecond
            </summary>
            <example>
                Time x = 7*milliseconds;
            </example>
        </member>
        <member name="F:LanguageExt.Prelude.mph">
            <summary>
            Miles per hour
            </summary>
        </member>
        <member name="F:LanguageExt.Prelude.kph">
            <summary>
            Kilometres per hour
            </summary>
        </member>
        <member name="F:LanguageExt.Prelude.ms2">
            <summary>
            Metres per-second squared
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.use``2(LanguageExt.Try{``0},System.Func{``0,``1})">
            <summary>
            Use with Try monad in LINQ expressions to auto-clean up disposable items
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.use``2(LanguageExt.Try{``0},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Use with Try monad in LINQ expressions to auto-clean up disposable items
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.use``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Use with Task in LINQ expressions to auto-clean up disposable items
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.use``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Use with Task in LINQ expressions to auto-clean up disposable items
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.use``1(``0)">
            <summary>
            Use with Try monad in LINQ expressions to auto-clean up disposable items
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.use``1(System.Func{``0})">
            <summary>
            Use with Try monad in LINQ expressions to auto-clean up disposable items
            </summary>
        </member>
        <member name="M:LanguageExt.Prelude.use``2(System.Func{``0},System.Func{``0,``1})">
            <summary>
            Functional implementation of the using(...) { } pattern
            </summary>
            <param name="generator">Disposable to use</param>
            <param name="f">Inner map function that uses the disposable value</param>
            <returns>Result of f(disposable)</returns>
        </member>
        <member name="M:LanguageExt.Prelude.use``2(``0,System.Func{``0,``1})">
            <summary>
            Functional implementation of the using(...) { } pattern
            </summary>
            <param name="disposable">Disposable to use</param>
            <param name="f">Inner map function that uses the disposable value</param>
            <returns>Result of f(disposable)</returns>
        </member>
        <member name="M:LanguageExt.Prelude.tryuse``2(System.Func{``0},System.Func{``0,``1})">
            <summary>
            Functional implementation of the using(...) { } pattern
            </summary>
            <param name="disposable">Disposable to use</param>
            <param name="f">Inner map function that uses the disposable value</param>
            <returns>Result of f(disposable)</returns>
        </member>
        <member name="M:LanguageExt.Prelude.tryuse``2(``0,System.Func{``0,``1})">
            <summary>
            Functional implementation of the using(...) { } pattern
            </summary>
            <param name="disposable">Disposable to use</param>
            <param name="f">Inner map function that uses the disposable value</param>
            <returns>Result of f(disposable)</returns>
        </member>
        <member name="T:LanguageExt.EitherUnsafe`2">
            <summary>
            EitherUnsafe L R - This is 'unsafe' because L or R can be null.
            
            Holds one of two values 'Left' or 'Right'.  Usually 'Left' is considered 'wrong' or 'in error', and
            'Right' is, well, right.  So when the Either is in a Left state, it cancels computations like bind
            or map, etc.  So you can see Left as an 'early out, with a message'.  Unlike Option that has None
            as its alternative value (i.e. it has an 'early out, but no message').
            </summary>
            <remarks>
            NOTE: If you use Filter or Where (or 'where' in a LINQ expression) with Either, then the Either 
            will be put into a 'Bottom' state if the predicate returns false.  When it's in this state it is 
            neither Right nor Left.  And any usage could trigger a BottomException.  So be aware of the issue
            of filtering Either.
            
            Also note, when the Either is in a Bottom state, some operations on it will continue to give valid
            results or return another Either in the Bottom state and not throw.  This is so a filtered Either 
            doesn't needlessly break expressions. 
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
        </member>
        <member name="F:LanguageExt.EitherUnsafe`2.State">
            <summary>
            State of the Either
            You can also use:
                IsRight
                IsLeft
                IsBottom
            </summary>
        </member>
        <member name="P:LanguageExt.EitherUnsafe`2.IsRight">
            <summary>
            Is the Either in a Right state?
            </summary>
        </member>
        <member name="P:LanguageExt.EitherUnsafe`2.IsLeft">
            <summary>
            Is the Either in a Left state?
            </summary>
        </member>
        <member name="P:LanguageExt.EitherUnsafe`2.IsBottom">
            <summary>
            Is the Either in a Bottom state?
            When the Either is filtered, both Right and Left are meaningless.
            
            If you use Filter or Where (or 'where' in a LINQ expression) with Either, then the Either 
            will be put into a 'Bottom' state if the predicate returns false.  When it's in this state it is 
            neither Right nor Left.  And any usage could trigger a BottomException.  So be aware of the issue
            of filtering Either.
            
            Also note, when the Either is in a Bottom state, some operations on it will continue to give valid
            results or return another Either in the Bottom state and not throw.  This is so a filtered Either 
            doesn't needlessly break expressions. 
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_Implicit(`1)~LanguageExt.EitherUnsafe{`0,`1}">
            <summary>
            Implicit conversion operator from R to Either R L
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_Implicit(`0)~LanguageExt.EitherUnsafe{`0,`1}">
            <summary>
            Implicit conversion operator from L to Either R L
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.MatchUnsafe``1(System.Func{`1,``0},System.Func{`0,``0})">
            <summary>
            Invokes the Right or Left function depending on the state of the Either
            </summary>
            <typeparam name="Ret">Return type</typeparam>
            <param name="Right">Function to invoke if in a Right state</param>
            <param name="Left">Function to invoke if in a Left state</param>
            <returns>The return value of the invoked function</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.MatchUnsafe(System.Action{`1},System.Action{`0})">
            <summary>
            Invokes the Right or Left action depending on the state of the Either
            </summary>
            <param name="Right">Action to invoke if in a Right state</param>
            <param name="Left">Action to invoke if in a Left state</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.IfLeftUnsafe(System.Func{`1})">
            <summary>
            Executes the Left function if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="Left">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.IfLeftUnsafe(System.Func{`0,`1})">
            <summary>
            Executes the leftMap function if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="leftMap">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.IfLeftUnsafe(`1)">
            <summary>
            Returns the rightValue if the Either is in a Left state.
            Returns the Right value if the Either is in a Right state.
            </summary>
            <param name="rightValue">Value to return if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.IfLeftUnsafe(System.Action{`0})">
            <summary>
            Executes the Left action if the Either is in a Left state.
            </summary>
            <param name="Left">Function to generate a Right value if in the Left state</param>
            <returns>Returns an unwrapped Right value</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.IfRightUnsafe(System.Action{`1})">
            <summary>
            Invokes the Right action if the Either is in a Right state, otherwise does nothing
            </summary>
            <param name="Right">Action to invoke</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.IfRightUnsafe(`0)">
            <summary>
            Returns the leftValue if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="leftValue">Value to return if in the Left state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.IfRightUnsafe(System.Func{`0})">
            <summary>
            Returns the result of Left() if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="Left">Function to generate a Left value if in the Right state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.IfRightUnsafe(System.Func{`1,`0})">
            <summary>
            Returns the result of leftMap if the Either is in a Right state.
            Returns the Left value if the Either is in a Left state.
            </summary>
            <param name="leftMap">Function to generate a Left value if in the Right state</param>
            <returns>Returns an unwrapped Left value</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.Right(System.Action{`1})">
            <summary>
            Match Right and return a context.  You must follow this with .Left(...) to complete the match
            </summary>
            <param name="rightHandler">Action to invoke if the Either is in a Right state</param>
            <returns>Context that must have Left() called upon it.</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.Right``1(System.Func{`1,``0})">
            <summary>
            Match Right and return a context.  You must follow this with .Left(...) to complete the match
            </summary>
            <param name="rightHandler">Action to invoke if the Either is in a Right state</param>
            <returns>Context that must have Left() called upon it.</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.ToString">
            <summary>
            Return a string representation of the Either
            </summary>
            <returns>String representation of the Either</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.GetHashCode">
            <summary>
            Returns a hash code of the wrapped value of the Either
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.Equals(System.Object)">
            <summary>
            Equality check
            </summary>
            <param name="obj">Object to test for equality</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.ToList">
            <summary>
            Project the Either into a Lst R
            </summary>
            <returns>If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.ToArray">
            <summary>
            Project the Either into an ImmutableArray R
            </summary>
            <returns>If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.RightToList">
            <summary>
            Project the Either into a Lst R
            </summary>
            <returns>If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.RightToArray">
            <summary>
            Project the Either into an ImmutableArray R
            </summary>
            <returns>If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.LeftToList">
            <summary>
            Project the Either into a Lst R
            </summary>
            <returns>If the Either is in a Right state, a Lst of R with one item.  A zero length Lst R otherwise</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.LeftToArray">
            <summary>
            Project the Either into an ImmutableArray R
            </summary>
            <returns>If the Either is in a Right state, a ImmutableArray of R with one item.  A zero length ImmutableArray of R otherwise</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_Equality(LanguageExt.EitherUnsafe{`0,`1},LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Equality operator override
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_Inequality(LanguageExt.EitherUnsafe{`0,`1},LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Non-equality operator override
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_BitwiseOr(LanguageExt.EitherUnsafe{`0,`1},LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Override of the Or operator to be a Left coalescing operator
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_True(LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Override of the True operator to return True if the Either is Right
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_False(LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Override of the False operator to return True if the Either is Left
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.RightAsEnumerable">
            <summary>
            Project the Either into a IEnumerable R
            </summary>
            <returns>If the Either is in a Right state, an IEnumerable of R with one item.  A zero length IEnumerable R otherwise</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.LeftAsEnumerable">
            <summary>
            Project the Either into a IEnumerable L
            </summary>
            <returns>If the Either is in a Left state, an IEnumerable of L with one item.  A zero length IEnumerable L otherwise</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.AsEnumerable">
            <summary>
            Project the Either into a IEnumerable R
            </summary>
            <returns>If the Either is in a Right state, an IEnumerable of R with one item.  A zero length IEnumerable R otherwise</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.CompareTo(`1)">
            <summary>
            CompareTo override
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.CompareTo(`0)">
            <summary>
            CompareTo override
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.Equals(`1)">
            <summary>
            CompareTo override
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.Equals(`0)">
            <summary>
            Equality override
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.Equals(LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Equality override
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.MatchUntyped``1(System.Func{System.Object,``0},System.Func{System.Object,``0})">
            <summary>
            Match the Right and Left values but as objects.  This can be useful to avoid reflection.
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.GetUnderlyingRightType">
            <summary>
            Find out the underlying Right type
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.GetUnderlyingLeftType">
            <summary>
            Find out the underlying Left type
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_Addition(LanguageExt.EitherUnsafe{`0,`1},LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Append the Right of one either to the Right of another
            For numeric values the behaviour is to sum the Rights (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.Append(LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Append the Right of one either to the Right of another
            For numeric values the behaviour is to sum the Rights (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_Subtraction(LanguageExt.EitherUnsafe{`0,`1},LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Subtract the Right of one either from the Right of another
            For numeric values the behaviour is to find the difference between the Rights (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.Subtract(LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Subtract the Right of one either from the Right of another
            For numeric values the behaviour is to find the difference between the Rights (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_Multiply(LanguageExt.EitherUnsafe{`0,`1},LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Find the product of the Rights 
            For numeric values the behaviour is to multiply the Rights (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.Multiply(LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Find the product of the Rights 
            For numeric values the behaviour is to multiply the Rights (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.op_Division(LanguageExt.EitherUnsafe{`0,`1},LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Divide the Rights 
            For numeric values the behaviour is to divide the Rights (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.Divide(LanguageExt.EitherUnsafe{`0,`1})">
            <summary>
            Divide the Rights 
            For numeric values the behaviour is to divide the Rights (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.FailureUnsafe(System.Func{`1})">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafe`2.FailureUnsafe(`1)">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="T:LanguageExt.EitherUnsafeContext`3">
            <summary>
            Context for the fluent Either matching
            </summary>
        </member>
        <member name="T:LanguageExt.EitherUnsafeUnitContext`2">
            <summary>
            Context for the fluent Either matching
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeUnitContext`2.Left(System.Action{`0})">
            <summary>
            Left match
            </summary>
            <param name="Left">Left handler</param>
            <returns>Result of the match</returns>
        </member>
        <member name="T:LanguageExt.ExceptionMatch`1">
            <summary>
            Pattern matching for exceptions.  This is to aid expression based error handling.
            </summary>
            <example>
                ex.Match&lt;string&gt;()
                  .With&lt;SystemException&gt;(e =&gt; "It's a system exception")
                  .With&lt;ArgumentNullException&gt;(e =&gt; "Arg null")
                  .Otherwise("Not handled")
            </example>
        </member>
        <member name="M:LanguageExt.ExceptionMatch`1.#ctor(`0)">
            <summary>
            Ctor
            </summary>
            <param name="e">Exception to match</param>
        </member>
        <member name="M:LanguageExt.ExceptionMatch`1.#ctor(System.Exception)">
            <summary>
            Ctor
            </summary>
            <param name="e">Exception to match</param>
        </member>
        <member name="M:LanguageExt.ExceptionMatch`1.With``1(System.Func{``0,`0})">
            <summary>
            Matches a typed exception with a mapping function
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="map">Function to map the exception to a result value</param>
            <returns>Matching context - you must use 'Otherwise()' to invoke</returns>
        </member>
        <member name="M:LanguageExt.ExceptionMatch`1.OtherwiseReThrow">
            <summary>
            Invokes the match expression and provides a default value if nothing matches
            </summary>
            <returns>Result of the expression</returns>
        </member>
        <member name="M:LanguageExt.ExceptionMatch`1.Otherwise(`0)">
            <summary>
            Invokes the match expression and provides a default value if nothing matches
            </summary>
            <param name="otherwiseValue">Default value</param>
            <returns>Result of the expression</returns>
        </member>
        <member name="M:LanguageExt.ExceptionMatch`1.Otherwise(System.Func{`0})">
            <summary>
            Invokes the match expression and provides a default function to invoke if 
            nothing matches
            </summary>
            <param name="otherwise">Default value</param>
            <returns>Result of the expression</returns>
        </member>
        <member name="M:LanguageExt.ExceptionMatch`1.Otherwise(System.Func{System.Exception,`0})">
            <summary>
            Invokes the match expression and provides a default function to invoke if 
            nothing matches
            </summary>
            <param name="otherwiseMap">Default value</param>
            <returns>Result of the expression</returns>
        </member>
        <member name="T:LanguageExt.SomeNotInitialisedException">
            <summary>
            Some T not initialised
            </summary>
        </member>
        <member name="M:LanguageExt.SomeNotInitialisedException.#ctor(System.Type)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:LanguageExt.ValueIsNoneException">
            <summary>
            Value is none
            </summary>
        </member>
        <member name="M:LanguageExt.ValueIsNoneException.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.ValueIsNoneException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.ValueIsNoneException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:LanguageExt.ValueIsNullException">
            <summary>
            Value is null
            </summary>
        </member>
        <member name="M:LanguageExt.ValueIsNullException.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.ValueIsNullException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.ValueIsNullException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:LanguageExt.ResultIsNullException">
            <summary>
            Result is null
            </summary>
        </member>
        <member name="M:LanguageExt.ResultIsNullException.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.ResultIsNullException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.ResultIsNullException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:LanguageExt.OptionIsNoneException">
            <summary>
            Option T is none
            </summary>
        </member>
        <member name="M:LanguageExt.OptionIsNoneException.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.OptionIsNoneException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.OptionIsNoneException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:LanguageExt.EitherIsNotRightException">
            <summary>
            Either is not right
            </summary>
        </member>
        <member name="M:LanguageExt.EitherIsNotRightException.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.EitherIsNotRightException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.EitherIsNotRightException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:LanguageExt.EitherIsNotLeftException">
            <summary>
            Either is not left
            </summary>
        </member>
        <member name="M:LanguageExt.EitherIsNotLeftException.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.EitherIsNotLeftException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.EitherIsNotLeftException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:LanguageExt.BottomException">
            <summary>
            Value is bottom
            </summary>
        </member>
        <member name="M:LanguageExt.BottomException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.BottomException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:LanguageExt.ListT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``6(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``6(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(System.Collections.Generic.IEnumerable{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(System.Collections.Generic.IEnumerable{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(System.Collections.Generic.IEnumerable{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(System.Collections.Generic.IEnumerable{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(System.Collections.Generic.IEnumerable{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(System.Collections.Generic.IEnumerable{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``3(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``5(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``5(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``5(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``6(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(LanguageExt.Lst{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(LanguageExt.Lst{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(LanguageExt.Lst{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(LanguageExt.Lst{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(LanguageExt.Lst{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(LanguageExt.Lst{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(LanguageExt.Lst{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(LanguageExt.Lst{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(LanguageExt.Lst{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(LanguageExt.Lst{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(LanguageExt.Lst{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(LanguageExt.Lst{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(LanguageExt.Lst{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(LanguageExt.Lst{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(LanguageExt.Lst{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(LanguageExt.Lst{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(LanguageExt.Lst{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(LanguageExt.Lst{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(LanguageExt.Lst{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(LanguageExt.Lst{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(LanguageExt.Lst{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(LanguageExt.Lst{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(LanguageExt.Lst{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(LanguageExt.Lst{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(LanguageExt.Lst{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(LanguageExt.Lst{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(LanguageExt.Lst{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(LanguageExt.Lst{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``1(LanguageExt.Lst{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``3(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``3(LanguageExt.Lst{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``3(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``4(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT``3(LanguageExt.Lst{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``5(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``5(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``5(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``6(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.sumT(LanguageExt.Lst{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.countT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.bindT``2(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.existsT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.filterT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.foldT``2(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.forallT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.iterT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.mapT``2(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.liftT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.LiftUnsafeT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ListT.SelectMany``3(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.OptionT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{``0},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{``0},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{``0},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{``0},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{``0},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{``0},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{``0},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{``0},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{``0},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{``0},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``6(LanguageExt.Option{``0},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT(LanguageExt.Option{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``2(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``2(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``2(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT(LanguageExt.Option{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``1(LanguageExt.Option{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``2(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``1(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``1(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``2(LanguageExt.Option{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``1(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``1(LanguageExt.Option{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``2(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``1(LanguageExt.Option{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``1(LanguageExt.Option{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT(LanguageExt.Option{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``2(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``2(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``2(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT(LanguageExt.Option{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``1(LanguageExt.Option{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``2(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``1(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``1(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``2(LanguageExt.Option{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``1(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``1(LanguageExt.Option{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``2(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``1(LanguageExt.Option{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``1(LanguageExt.Option{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT``1(LanguageExt.Option{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``3(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``3(LanguageExt.Option{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``3(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT(LanguageExt.Option{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``1(LanguageExt.Option{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``2(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``1(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``1(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``2(LanguageExt.Option{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``1(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``1(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``2(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``1(LanguageExt.Option{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``1(LanguageExt.Option{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT(LanguageExt.Option{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``1(LanguageExt.Option{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``2(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``1(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``1(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``2(LanguageExt.Option{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``1(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``1(LanguageExt.Option{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``2(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``1(LanguageExt.Option{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``1(LanguageExt.Option{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT``1(LanguageExt.Option{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``3(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``3(LanguageExt.Option{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``3(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT``1(LanguageExt.Option{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``3(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``3(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``3(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT``1(LanguageExt.Option{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``3(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``3(LanguageExt.Option{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``3(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT``1(LanguageExt.Option{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``3(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``3(LanguageExt.Option{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``3(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT``1(LanguageExt.Option{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``2(LanguageExt.Option{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``3(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``2(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``2(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``3(LanguageExt.Option{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``2(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``2(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``3(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``2(LanguageExt.Option{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``4(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT``3(LanguageExt.Option{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``5(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``5(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``5(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``6(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.sumT(LanguageExt.Option{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.countT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.bindT``2(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.existsT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.filterT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.foldT``2(LanguageExt.Option{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.forallT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.iterT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.mapT``2(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.liftT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.LiftUnsafeT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionT.SelectMany``3(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.OptionUnsafeT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``6(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``2(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``2(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``2(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT(LanguageExt.OptionUnsafe{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``2(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``2(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``2(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``2(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``2(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``2(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT(LanguageExt.OptionUnsafe{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``2(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``2(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``2(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT``1(LanguageExt.OptionUnsafe{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``3(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``3(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``3(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT(LanguageExt.OptionUnsafe{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``2(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``2(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``2(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT(LanguageExt.OptionUnsafe{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``2(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``2(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``2(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT``1(LanguageExt.OptionUnsafe{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``3(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``3(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``3(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT``1(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``3(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``3(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``3(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT``1(LanguageExt.OptionUnsafe{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``3(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``3(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``3(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT``1(LanguageExt.OptionUnsafe{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``3(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``3(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``3(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT``1(LanguageExt.OptionUnsafe{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``3(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``3(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``3(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT``3(LanguageExt.OptionUnsafe{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``5(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``5(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``5(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``6(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.sumT(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.countT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.bindT``2(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.existsT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.filterT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.foldT``2(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.forallT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.iterT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.mapT``2(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.liftT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafeT.SelectMany``3(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.MapT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``5(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.Either{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``5(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``5(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.Reader{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``5(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.Writer{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``5(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.State{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``7(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}},System.Func{``1,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``1(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``3(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``3(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``3(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``1(LanguageExt.Map{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``3(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``3(LanguageExt.Map{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``3(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``1(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``3(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``3(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``3(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``1(LanguageExt.Map{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``3(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``3(LanguageExt.Map{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``3(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``1(LanguageExt.Map{``0,LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``3(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,LanguageExt.Map{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``3(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``3(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,LanguageExt.Map{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``1(LanguageExt.Map{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``3(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``3(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``3(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``1(LanguageExt.Map{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``3(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``3(LanguageExt.Map{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``3(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``2(LanguageExt.Map{``0,LanguageExt.Either{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``4(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``4(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``4(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``5(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``2(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``4(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``4(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``4(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``5(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``2(LanguageExt.Map{``0,LanguageExt.Reader{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``4(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,LanguageExt.Reader{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``4(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``4(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``5(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,LanguageExt.Reader{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``2(LanguageExt.Map{``0,LanguageExt.Writer{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``4(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,LanguageExt.Writer{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``4(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``4(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``5(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,LanguageExt.Writer{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``2(LanguageExt.Map{``0,LanguageExt.State{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``4(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,LanguageExt.State{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``4(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``4(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``5(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,LanguageExt.State{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``4(LanguageExt.Map{``0,LanguageExt.Rws{``1,``2,``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``6(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``6(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},``5,System.Func{``5,``1,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``6(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``7(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}},System.Func{``1,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.sumT``1(LanguageExt.Map{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.countT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.bindT``3(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.existsT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.filterT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.foldT``3(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.forallT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.iterT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.mapT``3(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.liftT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.LiftUnsafeT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.MapT.SelectMany``4(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.TryOptionT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``6(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``2(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``2(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``2(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT(LanguageExt.TryOption{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``1(LanguageExt.TryOption{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``2(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``1(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``1(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``2(LanguageExt.TryOption{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``1(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``1(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``2(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``1(LanguageExt.TryOption{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``1(LanguageExt.TryOption{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT(LanguageExt.TryOption{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``2(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``2(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``2(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT(LanguageExt.TryOption{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``2(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``2(LanguageExt.TryOption{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``2(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT``1(LanguageExt.TryOption{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``3(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``3(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``3(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT(LanguageExt.TryOption{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``2(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``2(LanguageExt.TryOption{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``2(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT(LanguageExt.TryOption{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``1(LanguageExt.TryOption{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``2(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``1(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``1(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``2(LanguageExt.TryOption{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``1(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``1(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``2(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``1(LanguageExt.TryOption{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``1(LanguageExt.TryOption{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT``1(LanguageExt.TryOption{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``3(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``3(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``3(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT``1(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``3(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``3(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``3(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT``1(LanguageExt.TryOption{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``3(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``3(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``3(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT``1(LanguageExt.TryOption{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``3(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``3(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``3(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT``1(LanguageExt.TryOption{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``3(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``3(LanguageExt.TryOption{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``3(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``4(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT``3(LanguageExt.TryOption{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``5(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``5(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``5(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``6(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.sumT(LanguageExt.TryOption{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.countT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.bindT``2(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.existsT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.filterT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.foldT``2(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.forallT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.iterT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.mapT``2(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.liftT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.LiftUnsafeT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryOptionT.SelectMany``3(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.TryT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{``0},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{``0},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{``0},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{``0},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{``0},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{``0},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{``0},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{``0},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{``0},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{``0},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``6(LanguageExt.Try{``0},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT(LanguageExt.Try{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``2(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``2(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``2(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT(LanguageExt.Try{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``1(LanguageExt.Try{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``2(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``1(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``1(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``2(LanguageExt.Try{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``1(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``1(LanguageExt.Try{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``2(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``1(LanguageExt.Try{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``1(LanguageExt.Try{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT(LanguageExt.Try{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``2(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``2(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``2(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT(LanguageExt.Try{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``1(LanguageExt.Try{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``2(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``1(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``1(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``2(LanguageExt.Try{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``1(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``1(LanguageExt.Try{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``2(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``1(LanguageExt.Try{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``1(LanguageExt.Try{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT``1(LanguageExt.Try{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``3(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``3(LanguageExt.Try{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``3(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT(LanguageExt.Try{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``1(LanguageExt.Try{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``2(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``1(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``1(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``2(LanguageExt.Try{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``1(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``1(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``2(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``1(LanguageExt.Try{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``1(LanguageExt.Try{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT(LanguageExt.Try{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``1(LanguageExt.Try{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``2(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``1(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``1(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``2(LanguageExt.Try{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``1(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``1(LanguageExt.Try{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``2(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``1(LanguageExt.Try{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``1(LanguageExt.Try{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT``1(LanguageExt.Try{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``3(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``3(LanguageExt.Try{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``3(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT``1(LanguageExt.Try{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``3(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``3(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``3(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT``1(LanguageExt.Try{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``3(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``3(LanguageExt.Try{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``3(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT``1(LanguageExt.Try{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``3(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``3(LanguageExt.Try{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``3(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT``1(LanguageExt.Try{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``2(LanguageExt.Try{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``3(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``2(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``2(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``3(LanguageExt.Try{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``2(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``2(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``3(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``2(LanguageExt.Try{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``4(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT``3(LanguageExt.Try{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``5(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``5(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``5(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``6(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.sumT(LanguageExt.Try{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.countT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.bindT``2(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.existsT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.filterT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.foldT``2(LanguageExt.Try{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.forallT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.iterT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.mapT``2(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.liftT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.LiftUnsafeT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TryT.SelectMany``3(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.EitherT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``5(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Map{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``5(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Reader{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``5(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Writer{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``5(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.State{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``7(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}},System.Func{``1,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``1(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``3(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``3(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``3(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``1(LanguageExt.Either{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``3(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``3(LanguageExt.Either{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``3(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``1(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``3(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``3(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``3(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``1(LanguageExt.Either{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``3(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``3(LanguageExt.Either{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``3(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``2(LanguageExt.Either{``0,LanguageExt.Map{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``4(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``4(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``4(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``5(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``1(LanguageExt.Either{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``3(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``3(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``3(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``1(LanguageExt.Either{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``3(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``3(LanguageExt.Either{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``3(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``1(LanguageExt.Either{``0,LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``3(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,LanguageExt.Either{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``3(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``3(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,LanguageExt.Either{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``1(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``3(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``3(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``3(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``2(LanguageExt.Either{``0,LanguageExt.Reader{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``4(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,LanguageExt.Reader{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``4(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``4(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``5(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,LanguageExt.Reader{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``2(LanguageExt.Either{``0,LanguageExt.Writer{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``4(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,LanguageExt.Writer{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``4(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``4(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``5(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,LanguageExt.Writer{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``2(LanguageExt.Either{``0,LanguageExt.State{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``4(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,LanguageExt.State{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``4(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``4(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``5(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,LanguageExt.State{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``4(LanguageExt.Either{``0,LanguageExt.Rws{``1,``2,``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``6(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``6(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},``5,System.Func{``5,``1,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``6(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``7(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}},System.Func{``1,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.sumT``1(LanguageExt.Either{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.countT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.bindT``3(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.existsT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.filterT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.foldT``3(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.forallT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.iterT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.mapT``3(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.liftT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.LiftUnsafeT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherT.SelectMany``4(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.EitherUnsafeT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``5(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.Map{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.Either{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``5(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.Reader{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``5(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.Writer{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``5(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.State{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``7(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}},System.Func{``1,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``1(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``3(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``3(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``3(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,LanguageExt.Either{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,LanguageExt.Either{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,LanguageExt.Reader{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,LanguageExt.Reader{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,LanguageExt.Writer{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,LanguageExt.Writer{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,LanguageExt.State{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``5(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,LanguageExt.State{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``1,``2,``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``6(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``6(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},``5,System.Func{``5,``1,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``6(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``7(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}},System.Func{``1,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.sumT``1(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.countT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.bindT``3(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.existsT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.filterT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.foldT``3(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.forallT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.iterT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.mapT``3(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.liftT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.EitherUnsafeT.SelectMany``4(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.ReaderT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,``1},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,``1},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,``1},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``5(LanguageExt.Reader{``0,``1},System.Func{``1,LanguageExt.Map{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,``1},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,``1},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``5(LanguageExt.Reader{``0,``1},System.Func{``1,LanguageExt.Either{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``5(LanguageExt.Reader{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``1(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``3(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``3(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``3(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``1(LanguageExt.Reader{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``3(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``3(LanguageExt.Reader{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``3(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``1(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``3(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``3(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``3(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``1(LanguageExt.Reader{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``3(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``3(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``3(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``2(LanguageExt.Reader{``0,LanguageExt.Map{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``4(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``4(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``4(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``5(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``1(LanguageExt.Reader{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``3(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``3(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``3(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``1(LanguageExt.Reader{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``3(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``3(LanguageExt.Reader{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``3(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``2(LanguageExt.Reader{``0,LanguageExt.Either{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``4(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``4(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``4(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``5(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``2(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``4(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``4(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``4(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``5(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``1(LanguageExt.Reader{``0,LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``3(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,LanguageExt.Reader{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``3(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``3(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,LanguageExt.Reader{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.sumT``1(LanguageExt.Reader{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.countT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.bindT``3(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.existsT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.filterT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.foldT``3(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.forallT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.iterT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.mapT``3(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.liftT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.LiftUnsafeT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderT.SelectMany``4(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.WriterT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,``1},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,``1},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,``1},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``5(LanguageExt.Writer{``0,``1},System.Func{``1,LanguageExt.Map{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,``1},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,``1},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``5(LanguageExt.Writer{``0,``1},System.Func{``1,LanguageExt.Either{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``5(LanguageExt.Writer{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``1(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``3(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``3(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``3(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``1(LanguageExt.Writer{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``3(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``3(LanguageExt.Writer{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``3(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``1(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``3(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``3(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``3(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``1(LanguageExt.Writer{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``3(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``3(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``3(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``2(LanguageExt.Writer{``0,LanguageExt.Map{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``4(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``4(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``4(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``5(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``1(LanguageExt.Writer{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``3(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``3(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``3(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``1(LanguageExt.Writer{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``3(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``3(LanguageExt.Writer{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``3(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``2(LanguageExt.Writer{``0,LanguageExt.Either{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``4(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``4(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``4(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``5(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``2(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``4(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``4(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``4(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``5(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``1(LanguageExt.Writer{``0,LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``3(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,LanguageExt.Writer{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``3(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``3(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,LanguageExt.Writer{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.sumT``1(LanguageExt.Writer{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.countT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.bindT``3(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.existsT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.filterT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.foldT``3(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.forallT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.iterT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.mapT``3(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.liftT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.LiftUnsafeT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.WriterT.SelectMany``4(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.StateT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,``1},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,``1},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,``1},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``5(LanguageExt.State{``0,``1},System.Func{``1,LanguageExt.Map{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,``1},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,``1},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``5(LanguageExt.State{``0,``1},System.Func{``1,LanguageExt.Either{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``5(LanguageExt.State{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,``1},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``1(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``3(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``3(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``3(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``1(LanguageExt.State{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``2(LanguageExt.State{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``3(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``3(LanguageExt.State{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``3(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``1(LanguageExt.State{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``3(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``3(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``3(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``1(LanguageExt.State{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``3(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``3(LanguageExt.State{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``3(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``2(LanguageExt.State{``0,LanguageExt.Map{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``4(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``4(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``4(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``5(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``1(LanguageExt.State{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``3(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``3(LanguageExt.State{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``3(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``1(LanguageExt.State{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``2(LanguageExt.State{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``3(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``3(LanguageExt.State{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``3(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``2(LanguageExt.State{``0,LanguageExt.Either{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``4(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``4(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``4(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``5(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``2(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``4(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``4(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``4(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``5(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``1(LanguageExt.State{``0,LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``3(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,LanguageExt.State{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``3(LanguageExt.State{``0,LanguageExt.State{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``3(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,LanguageExt.State{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.sumT``1(LanguageExt.State{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.countT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.bindT``3(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.existsT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.filterT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.foldT``3(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.forallT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.iterT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.mapT``3(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.liftT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.LiftUnsafeT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.StateT.SelectMany``4(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.RwsT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,System.Collections.Generic.IEnumerable{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,LanguageExt.Option{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,LanguageExt.OptionUnsafe{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,LanguageExt.Lst{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``7(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,LanguageExt.Map{``4,``5}},System.Func{``3,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,LanguageExt.TryOption{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,LanguageExt.Try{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``7(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,LanguageExt.Either{``4,``5}},System.Func{``3,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``7(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,LanguageExt.EitherUnsafe{``4,``5}},System.Func{``3,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,System.Threading.Tasks.Task{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``3(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``5(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,System.Collections.Generic.IEnumerable{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``5(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``5(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,System.Collections.Generic.IEnumerable{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,LanguageExt.Option{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,LanguageExt.Option{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,LanguageExt.OptionUnsafe{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,LanguageExt.OptionUnsafe{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,LanguageExt.Lst{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,LanguageExt.Lst{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,LanguageExt.Map{``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},``5,System.Func{``5,``3,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``7(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,LanguageExt.Map{``4,``5}},System.Func{``3,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,LanguageExt.TryOption{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,LanguageExt.TryOption{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,LanguageExt.Try{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,LanguageExt.Try{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,LanguageExt.Either{``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},``5,System.Func{``5,``3,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``7(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,LanguageExt.Either{``4,``5}},System.Func{``3,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,LanguageExt.EitherUnsafe{``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},``5,System.Func{``5,``3,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``7(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,LanguageExt.EitherUnsafe{``4,``5}},System.Func{``3,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,LanguageExt.Rws{``0,``1,``2,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,LanguageExt.Rws{``0,``1,``2,``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.sumT``3(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.countT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.bindT``5(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,System.Threading.Tasks.Task{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.existsT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.filterT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.foldT``5(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.forallT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.iterT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.mapT``5(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.liftT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.RwsT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,System.Threading.Tasks.Task{``4}},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.TaskT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``6(System.Threading.Tasks.Task{``0},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT(System.Threading.Tasks.Task{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``2(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``2(System.Threading.Tasks.Task{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``2(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``2(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``2(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``2(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT(System.Threading.Tasks.Task{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``2(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``2(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``2(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT``1(System.Threading.Tasks.Task{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``3(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``3(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``3(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT(System.Threading.Tasks.Task{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``2(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``2(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``2(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT(System.Threading.Tasks.Task{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``2(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``2(System.Threading.Tasks.Task{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``2(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT``1(System.Threading.Tasks.Task{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``3(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``3(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``3(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT``1(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``3(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``3(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``3(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT``1(System.Threading.Tasks.Task{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``3(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``3(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``3(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT``1(System.Threading.Tasks.Task{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``3(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``3(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``3(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT``1(System.Threading.Tasks.Task{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``3(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``3(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``3(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT``3(System.Threading.Tasks.Task{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``5(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``5(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``5(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``6(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.sumT(System.Threading.Tasks.Task{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.countT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.bindT``2(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.existsT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.filterT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.foldT``2(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.forallT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.iterT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.mapT``2(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.liftT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.LiftUnsafeT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.TaskT.SelectMany``3(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.ListMonad">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.SumT(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.CountT``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.BindT``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.ExistsT``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.FilterT``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.FoldT``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.ForAllT``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.IterT``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.MapT``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.Lift``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.LiftUnsafe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.SumT(LanguageExt.Lst{System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.CountT``1(LanguageExt.Lst{``0})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.BindT``2(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.ExistsT``1(LanguageExt.Lst{``0},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.FilterT``1(LanguageExt.Lst{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.FoldT``2(LanguageExt.Lst{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.ForAllT``1(LanguageExt.Lst{``0},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.IterT``1(LanguageExt.Lst{``0},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.MapT``2(LanguageExt.Lst{``0},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.Lift``1(LanguageExt.Lst{``0})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListMonad.LiftUnsafe``1(LanguageExt.Lst{``0})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.OptionMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.SumT(LanguageExt.Option{System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.CountT``1(LanguageExt.Option{``0})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.BindT``2(LanguageExt.Option{``0},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.ExistsT``1(LanguageExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.FilterT``1(LanguageExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.FoldT``2(LanguageExt.Option{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.ForAllT``1(LanguageExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.IterT``1(LanguageExt.Option{``0},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.MapT``2(LanguageExt.Option{``0},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.Lift``1(LanguageExt.Option{``0})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionMonad.LiftUnsafe``1(LanguageExt.Option{``0})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.OptionUnsafeMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.SumT(LanguageExt.OptionUnsafe{System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.CountT``1(LanguageExt.OptionUnsafe{``0})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.BindT``2(LanguageExt.OptionUnsafe{``0},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.ExistsT``1(LanguageExt.OptionUnsafe{``0},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.FilterT``1(LanguageExt.OptionUnsafe{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.FoldT``2(LanguageExt.OptionUnsafe{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.ForAllT``1(LanguageExt.OptionUnsafe{``0},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.IterT``1(LanguageExt.OptionUnsafe{``0},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.MapT``2(LanguageExt.OptionUnsafe{``0},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.Lift``1(LanguageExt.OptionUnsafe{``0})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeMonad.LiftUnsafe``1(LanguageExt.OptionUnsafe{``0})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.MapMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.SumT``1(LanguageExt.Map{``0,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.CountT``2(LanguageExt.Map{``0,``1})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.BindT``3(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.Map{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.ExistsT``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.FilterT``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.FoldT``3(LanguageExt.Map{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.ForAllT``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.IterT``2(LanguageExt.Map{``0,``1},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.MapT``3(LanguageExt.Map{``0,``1},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.Lift``2(LanguageExt.Map{``0,``1})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapMonad.LiftUnsafe``2(LanguageExt.Map{``0,``1})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.TryOptionMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.SumT(LanguageExt.TryOption{System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.CountT``1(LanguageExt.TryOption{``0})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.BindT``2(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.ExistsT``1(LanguageExt.TryOption{``0},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.FilterT``1(LanguageExt.TryOption{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.FoldT``2(LanguageExt.TryOption{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.ForAllT``1(LanguageExt.TryOption{``0},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.IterT``1(LanguageExt.TryOption{``0},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.MapT``2(LanguageExt.TryOption{``0},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.Lift``1(LanguageExt.TryOption{``0})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionMonad.LiftUnsafe``1(LanguageExt.TryOption{``0})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.TryMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.SumT(LanguageExt.Try{System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.CountT``1(LanguageExt.Try{``0})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.BindT``2(LanguageExt.Try{``0},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.ExistsT``1(LanguageExt.Try{``0},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.FilterT``1(LanguageExt.Try{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.FoldT``2(LanguageExt.Try{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.ForAllT``1(LanguageExt.Try{``0},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.IterT``1(LanguageExt.Try{``0},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.MapT``2(LanguageExt.Try{``0},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.Lift``1(LanguageExt.Try{``0})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryMonad.LiftUnsafe``1(LanguageExt.Try{``0})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.EitherMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.SumT``1(LanguageExt.Either{``0,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.CountT``2(LanguageExt.Either{``0,``1})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.BindT``3(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Either{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.ExistsT``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.FilterT``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.FoldT``3(LanguageExt.Either{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.ForAllT``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.IterT``2(LanguageExt.Either{``0,``1},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.MapT``3(LanguageExt.Either{``0,``1},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.Lift``2(LanguageExt.Either{``0,``1})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherMonad.LiftUnsafe``2(LanguageExt.Either{``0,``1})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.EitherUnsafeMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.SumT``1(LanguageExt.EitherUnsafe{``0,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.CountT``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.BindT``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.ExistsT``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.FilterT``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.FoldT``3(LanguageExt.EitherUnsafe{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.ForAllT``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.IterT``2(LanguageExt.EitherUnsafe{``0,``1},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.MapT``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.Lift``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeMonad.LiftUnsafe``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.ReaderMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.SumT``1(LanguageExt.Reader{``0,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.CountT``2(LanguageExt.Reader{``0,``1})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.BindT``3(LanguageExt.Reader{``0,``1},System.Func{``1,LanguageExt.Reader{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.ExistsT``2(LanguageExt.Reader{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.FilterT``2(LanguageExt.Reader{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.FoldT``3(LanguageExt.Reader{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.ForAllT``2(LanguageExt.Reader{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.IterT``2(LanguageExt.Reader{``0,``1},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.MapT``3(LanguageExt.Reader{``0,``1},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.Lift``2(LanguageExt.Reader{``0,``1},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderMonad.LiftUnsafe``2(LanguageExt.Reader{``0,``1},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.WriterMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.SumT``1(LanguageExt.Writer{``0,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.CountT``2(LanguageExt.Writer{``0,``1})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.BindT``3(LanguageExt.Writer{``0,``1},System.Func{``1,LanguageExt.Writer{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.ExistsT``2(LanguageExt.Writer{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.FilterT``2(LanguageExt.Writer{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.FoldT``3(LanguageExt.Writer{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.ForAllT``2(LanguageExt.Writer{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.IterT``2(LanguageExt.Writer{``0,``1},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.MapT``3(LanguageExt.Writer{``0,``1},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.Lift``2(LanguageExt.Writer{``0,``1})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterMonad.LiftUnsafe``2(LanguageExt.Writer{``0,``1})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.StateMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.SumT``1(LanguageExt.State{``0,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.CountT``2(LanguageExt.State{``0,``1})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.BindT``3(LanguageExt.State{``0,``1},System.Func{``1,LanguageExt.State{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.ExistsT``2(LanguageExt.State{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.FilterT``2(LanguageExt.State{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.FoldT``3(LanguageExt.State{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.ForAllT``2(LanguageExt.State{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.IterT``2(LanguageExt.State{``0,``1},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.MapT``3(LanguageExt.State{``0,``1},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.Lift``2(LanguageExt.State{``0,``1},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateMonad.LiftUnsafe``2(LanguageExt.State{``0,``1},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.RwsMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.SumT``3(LanguageExt.Rws{``0,``1,``2,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.CountT``4(LanguageExt.Rws{``0,``1,``2,``3})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.BindT``5(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,LanguageExt.Rws{``0,``1,``2,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.ExistsT``4(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.FilterT``4(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.FoldT``5(LanguageExt.Rws{``0,``1,``2,``3},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.ForAllT``4(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.IterT``4(LanguageExt.Rws{``0,``1,``2,``3},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.MapT``5(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.Lift``4(LanguageExt.Rws{``0,``1,``2,``3},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsMonad.LiftUnsafe``4(LanguageExt.Rws{``0,``1,``2,``3},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.TaskMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.SumT(System.Threading.Tasks.Task{System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.CountT``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.BindT``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.ExistsT``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.FilterT``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.FoldT``2(System.Threading.Tasks.Task{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.ForAllT``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.IterT``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.MapT``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.Lift``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskMonad.LiftUnsafe``1(System.Threading.Tasks.Task{``0})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.ListTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(System.Collections.Generic.IEnumerable{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(System.Collections.Generic.IEnumerable{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(System.Collections.Generic.IEnumerable{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(System.Collections.Generic.IEnumerable{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(System.Collections.Generic.IEnumerable{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(System.Collections.Generic.IEnumerable{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``3(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``5(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``5(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``5(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(LanguageExt.Lst{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(LanguageExt.Lst{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(LanguageExt.Lst{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(LanguageExt.Lst{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(LanguageExt.Lst{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(LanguageExt.Lst{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(LanguageExt.Lst{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(LanguageExt.Lst{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(LanguageExt.Lst{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(LanguageExt.Lst{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(LanguageExt.Lst{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(LanguageExt.Lst{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(LanguageExt.Lst{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(LanguageExt.Lst{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(LanguageExt.Lst{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(LanguageExt.Lst{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(LanguageExt.Lst{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(LanguageExt.Lst{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(LanguageExt.Lst{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(LanguageExt.Lst{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(LanguageExt.Lst{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(LanguageExt.Lst{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(LanguageExt.Lst{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(LanguageExt.Lst{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(LanguageExt.Lst{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(LanguageExt.Lst{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(LanguageExt.Lst{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(LanguageExt.Lst{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(LanguageExt.Lst{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``1(LanguageExt.Lst{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``3(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``3(LanguageExt.Lst{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``3(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``2(LanguageExt.Lst{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT``3(LanguageExt.Lst{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``5(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``5(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``5(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.SumT(LanguageExt.Lst{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.CountT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.BindT``2(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ExistsT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FilterT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.FoldT``2(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.ForAllT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.IterT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.MapT``2(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ListTMonadT.LiftUnsafeT``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.OptionTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT(LanguageExt.Option{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``2(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``2(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``2(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT(LanguageExt.Option{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``1(LanguageExt.Option{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``2(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``1(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``1(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``2(LanguageExt.Option{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``1(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``1(LanguageExt.Option{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``2(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``1(LanguageExt.Option{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``1(LanguageExt.Option{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT(LanguageExt.Option{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``2(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``2(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``2(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT(LanguageExt.Option{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``1(LanguageExt.Option{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``2(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``1(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``1(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``2(LanguageExt.Option{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``1(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``1(LanguageExt.Option{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``2(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``1(LanguageExt.Option{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``1(LanguageExt.Option{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT``1(LanguageExt.Option{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``3(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``3(LanguageExt.Option{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``3(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT(LanguageExt.Option{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``1(LanguageExt.Option{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``2(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``1(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``1(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``2(LanguageExt.Option{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``1(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``1(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``2(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``1(LanguageExt.Option{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``1(LanguageExt.Option{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT(LanguageExt.Option{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``1(LanguageExt.Option{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``2(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``1(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``1(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``2(LanguageExt.Option{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``1(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``1(LanguageExt.Option{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``2(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``1(LanguageExt.Option{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``1(LanguageExt.Option{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT``1(LanguageExt.Option{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``3(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``3(LanguageExt.Option{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``3(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT``1(LanguageExt.Option{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``3(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``3(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``3(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT``1(LanguageExt.Option{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``3(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``3(LanguageExt.Option{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``3(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT``1(LanguageExt.Option{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``3(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``3(LanguageExt.Option{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``3(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT``1(LanguageExt.Option{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``2(LanguageExt.Option{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``3(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``2(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``2(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``3(LanguageExt.Option{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``2(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``2(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``3(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``2(LanguageExt.Option{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``2(LanguageExt.Option{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT``3(LanguageExt.Option{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``5(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``5(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``5(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.SumT(LanguageExt.Option{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.CountT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.BindT``2(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ExistsT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FilterT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.FoldT``2(LanguageExt.Option{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.ForAllT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.IterT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.MapT``2(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionTMonadT.LiftUnsafeT``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.OptionUnsafeTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``2(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``2(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``2(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT(LanguageExt.OptionUnsafe{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``2(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``2(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``2(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``2(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``2(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``2(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT(LanguageExt.OptionUnsafe{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``2(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``2(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``2(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT``1(LanguageExt.OptionUnsafe{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``3(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``3(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``3(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT(LanguageExt.OptionUnsafe{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``2(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``2(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``2(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT(LanguageExt.OptionUnsafe{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``2(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``2(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``2(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT``1(LanguageExt.OptionUnsafe{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``3(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``3(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``3(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT``1(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``3(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``3(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``3(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT``1(LanguageExt.OptionUnsafe{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``3(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``3(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``3(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT``1(LanguageExt.OptionUnsafe{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``3(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``3(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``3(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT``1(LanguageExt.OptionUnsafe{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``3(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``3(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``3(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT``3(LanguageExt.OptionUnsafe{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``5(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``5(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``5(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.SumT(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.CountT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.BindT``2(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ExistsT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FilterT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.FoldT``2(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.ForAllT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.IterT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.MapT``2(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.OptionUnsafeTMonadT.LiftUnsafeT``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.MapTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``1(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``3(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``3(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``3(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``1(LanguageExt.Map{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``3(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``3(LanguageExt.Map{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``3(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.Option{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``1(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``3(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``3(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``3(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``1(LanguageExt.Map{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``3(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``3(LanguageExt.Map{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``3(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``1(LanguageExt.Map{``0,LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``3(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,LanguageExt.Map{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``3(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``3(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``1(LanguageExt.Map{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``3(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``3(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``3(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``1(LanguageExt.Map{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``3(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``3(LanguageExt.Map{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``3(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``2(LanguageExt.Map{``0,LanguageExt.Try{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``2(LanguageExt.Map{``0,LanguageExt.Either{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``4(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``4(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``4(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``2(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``4(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``4(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``4(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``2(LanguageExt.Map{``0,LanguageExt.Reader{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``4(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,LanguageExt.Reader{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``4(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``4(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``2(LanguageExt.Map{``0,LanguageExt.Writer{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``4(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,LanguageExt.Writer{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``4(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``4(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``2(LanguageExt.Map{``0,LanguageExt.State{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``4(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,LanguageExt.State{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``4(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``4(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``4(LanguageExt.Map{``0,LanguageExt.Rws{``1,``2,``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``6(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``6(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},``5,System.Func{``5,``1,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``6(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.SumT``1(LanguageExt.Map{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.CountT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.BindT``3(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ExistsT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FilterT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.FoldT``3(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.ForAllT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.IterT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.MapT``3(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.MapTMonadT.LiftUnsafeT``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.TryOptionTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``2(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``2(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``2(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT(LanguageExt.TryOption{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``1(LanguageExt.TryOption{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``2(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``1(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``1(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``2(LanguageExt.TryOption{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``1(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``1(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``2(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``1(LanguageExt.TryOption{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``1(LanguageExt.TryOption{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT(LanguageExt.TryOption{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``2(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``2(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``2(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT(LanguageExt.TryOption{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``2(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``2(LanguageExt.TryOption{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``2(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``1(LanguageExt.TryOption{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT``1(LanguageExt.TryOption{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``3(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``3(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``3(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT(LanguageExt.TryOption{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``2(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``2(LanguageExt.TryOption{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``2(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT(LanguageExt.TryOption{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``1(LanguageExt.TryOption{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``2(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``1(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``1(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``2(LanguageExt.TryOption{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``1(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``1(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``2(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``1(LanguageExt.TryOption{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``1(LanguageExt.TryOption{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT``1(LanguageExt.TryOption{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``3(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``3(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``3(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT``1(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``3(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``3(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``3(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT``1(LanguageExt.TryOption{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``3(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``3(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``3(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT``1(LanguageExt.TryOption{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``3(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``3(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``3(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT``1(LanguageExt.TryOption{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``3(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``3(LanguageExt.TryOption{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``3(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT``3(LanguageExt.TryOption{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``5(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``5(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``5(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.SumT(LanguageExt.TryOption{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.CountT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.BindT``2(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ExistsT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FilterT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.FoldT``2(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.ForAllT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.IterT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.MapT``2(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryOptionTMonadT.LiftUnsafeT``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.TryTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT(LanguageExt.Try{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``2(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``2(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``2(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT(LanguageExt.Try{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``1(LanguageExt.Try{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``2(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``1(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``1(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``2(LanguageExt.Try{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``1(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``1(LanguageExt.Try{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``2(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``1(LanguageExt.Try{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``1(LanguageExt.Try{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT(LanguageExt.Try{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``2(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``2(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``2(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT(LanguageExt.Try{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``1(LanguageExt.Try{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``2(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``1(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``1(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``2(LanguageExt.Try{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``1(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``1(LanguageExt.Try{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``2(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``1(LanguageExt.Try{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``1(LanguageExt.Try{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT``1(LanguageExt.Try{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``3(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``3(LanguageExt.Try{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``3(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT(LanguageExt.Try{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``1(LanguageExt.Try{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``2(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``1(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``1(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``2(LanguageExt.Try{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``1(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``1(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``2(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``1(LanguageExt.Try{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``1(LanguageExt.Try{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT(LanguageExt.Try{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``1(LanguageExt.Try{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``2(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``1(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``1(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``2(LanguageExt.Try{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``1(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``1(LanguageExt.Try{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``2(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``1(LanguageExt.Try{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``1(LanguageExt.Try{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT``1(LanguageExt.Try{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``3(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``3(LanguageExt.Try{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``3(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT``1(LanguageExt.Try{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``3(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``3(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``3(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT``1(LanguageExt.Try{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``3(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``3(LanguageExt.Try{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``3(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT``1(LanguageExt.Try{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``3(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``3(LanguageExt.Try{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``3(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT``1(LanguageExt.Try{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``2(LanguageExt.Try{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``3(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``2(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``2(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``3(LanguageExt.Try{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``2(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``2(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``3(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``2(LanguageExt.Try{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``2(LanguageExt.Try{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT``3(LanguageExt.Try{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``5(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``5(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``5(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.SumT(LanguageExt.Try{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.CountT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.BindT``2(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ExistsT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FilterT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.FoldT``2(LanguageExt.Try{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.ForAllT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.IterT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.MapT``2(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TryTMonadT.LiftUnsafeT``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.EitherTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``1(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``3(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``3(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``3(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``1(LanguageExt.Either{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``3(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``3(LanguageExt.Either{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``3(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.Option{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``1(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``3(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``3(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``3(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``1(LanguageExt.Either{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``3(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``3(LanguageExt.Either{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``3(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``2(LanguageExt.Either{``0,LanguageExt.Map{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``4(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``4(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``4(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``1(LanguageExt.Either{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``3(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``3(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``3(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``1(LanguageExt.Either{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``3(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``3(LanguageExt.Either{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``3(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.Try{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``1(LanguageExt.Either{``0,LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``3(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,LanguageExt.Either{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``3(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``3(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``1(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``3(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``3(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``3(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``2(LanguageExt.Either{``0,LanguageExt.Reader{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``4(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,LanguageExt.Reader{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``4(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``4(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``2(LanguageExt.Either{``0,LanguageExt.Writer{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``4(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,LanguageExt.Writer{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``4(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``4(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``2(LanguageExt.Either{``0,LanguageExt.State{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``4(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,LanguageExt.State{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``4(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``4(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``4(LanguageExt.Either{``0,LanguageExt.Rws{``1,``2,``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``6(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``6(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},``5,System.Func{``5,``1,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``6(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.SumT``1(LanguageExt.Either{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.CountT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.BindT``3(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ExistsT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FilterT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.FoldT``3(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.ForAllT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.IterT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.MapT``3(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherTMonadT.LiftUnsafeT``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.EitherUnsafeTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``1(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``3(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``3(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``3(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,LanguageExt.Either{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``1(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,LanguageExt.Reader{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,LanguageExt.Writer{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``2(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,LanguageExt.State{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``1,``2,``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``6(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,LanguageExt.Rws{``2,``3,``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``6(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},``5,System.Func{``5,``1,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``6(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.SumT``1(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.CountT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.BindT``3(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ExistsT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FilterT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.FoldT``3(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.ForAllT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.IterT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.MapT``3(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.EitherUnsafeTMonadT.LiftUnsafeT``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.ReaderTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``1(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``3(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``3(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``3(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``1(LanguageExt.Reader{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``3(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``3(LanguageExt.Reader{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``3(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``1(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``3(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``3(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``3(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``1(LanguageExt.Reader{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``3(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``3(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``3(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``2(LanguageExt.Reader{``0,LanguageExt.Map{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``4(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``4(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``4(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``1(LanguageExt.Reader{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``3(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``3(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``3(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``1(LanguageExt.Reader{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``3(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``3(LanguageExt.Reader{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``3(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``2(LanguageExt.Reader{``0,LanguageExt.Either{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``4(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``4(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``4(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``2(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``4(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``4(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``4(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``1(LanguageExt.Reader{``0,LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``3(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,LanguageExt.Reader{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``3(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``3(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.SumT``1(LanguageExt.Reader{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.CountT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.BindT``3(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ExistsT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FilterT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.FoldT``3(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.ForAllT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.IterT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.MapT``3(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.ReaderTMonadT.LiftUnsafeT``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.WriterTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``1(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``3(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``3(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``3(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``1(LanguageExt.Writer{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``3(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``3(LanguageExt.Writer{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``3(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``1(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``3(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``3(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``3(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``1(LanguageExt.Writer{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``3(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``3(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``3(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``2(LanguageExt.Writer{``0,LanguageExt.Map{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``4(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``4(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``4(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``1(LanguageExt.Writer{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``3(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``3(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``3(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``1(LanguageExt.Writer{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``3(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``3(LanguageExt.Writer{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``3(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``2(LanguageExt.Writer{``0,LanguageExt.Either{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``4(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``4(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``4(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``2(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``4(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``4(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``4(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``1(LanguageExt.Writer{``0,LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``3(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,LanguageExt.Writer{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``3(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``3(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.SumT``1(LanguageExt.Writer{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.CountT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.BindT``3(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ExistsT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FilterT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.FoldT``3(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.ForAllT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.IterT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.MapT``3(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.WriterTMonadT.LiftUnsafeT``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.StateTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``1(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``3(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``3(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``3(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``1(LanguageExt.State{``0,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``2(LanguageExt.State{``0,LanguageExt.Option{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``3(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,LanguageExt.Option{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``3(LanguageExt.State{``0,LanguageExt.Option{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``3(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.Option{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``1(LanguageExt.State{``0,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``3(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,LanguageExt.OptionUnsafe{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``3(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``3(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``1(LanguageExt.State{``0,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``3(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,LanguageExt.Lst{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``3(LanguageExt.State{``0,LanguageExt.Lst{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``3(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``2(LanguageExt.State{``0,LanguageExt.Map{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``4(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,LanguageExt.Map{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``4(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``4(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``1(LanguageExt.State{``0,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``3(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,LanguageExt.TryOption{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``3(LanguageExt.State{``0,LanguageExt.TryOption{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``3(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``1(LanguageExt.State{``0,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``2(LanguageExt.State{``0,LanguageExt.Try{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``3(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,LanguageExt.Try{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``3(LanguageExt.State{``0,LanguageExt.Try{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``3(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.Try{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``2(LanguageExt.State{``0,LanguageExt.Either{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``4(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,LanguageExt.Either{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``4(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``4(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``2(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``1,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``4(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``4(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},``3,System.Func{``3,``1,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``4(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``1(LanguageExt.State{``0,LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``3(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,LanguageExt.State{``0,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``3(LanguageExt.State{``0,LanguageExt.State{``0,``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``3(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.SumT``1(LanguageExt.State{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.CountT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.BindT``3(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ExistsT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FilterT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.FoldT``3(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},``2,System.Func{``2,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.ForAllT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.IterT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Action{``1})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.MapT``3(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.StateTMonadT.LiftUnsafeT``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.RwsTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``3(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``5(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,System.Collections.Generic.IEnumerable{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``5(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``5(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,LanguageExt.Option{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,LanguageExt.OptionUnsafe{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,LanguageExt.Lst{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,LanguageExt.Map{``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},``5,System.Func{``5,``3,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,LanguageExt.TryOption{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,LanguageExt.Try{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,LanguageExt.Either{``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},``5,System.Func{``5,``3,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``3,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,LanguageExt.EitherUnsafe{``4,``5}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},``5,System.Func{``5,``3,``5})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,``5})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``3(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,LanguageExt.Rws{``0,``1,``2,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.SumT``3(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.CountT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.BindT``5(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,System.Threading.Tasks.Task{``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ExistsT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FilterT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.FoldT``5(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},``4,System.Func{``4,``3,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.ForAllT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.IterT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Action{``3})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.MapT``5(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Tuple{``0,``2})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.RwsTMonadT.LiftUnsafeT``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Tuple{``0,``2})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.TaskTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT(System.Threading.Tasks.Task{LanguageExt.Option{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``2(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,LanguageExt.Option{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``2(System.Threading.Tasks.Task{LanguageExt.Option{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``2(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``2(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,LanguageExt.OptionUnsafe{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``2(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``2(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT(System.Threading.Tasks.Task{LanguageExt.Lst{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``2(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``2(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``2(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT``1(System.Threading.Tasks.Task{LanguageExt.Map{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``3(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,LanguageExt.Map{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``3(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``3(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT(System.Threading.Tasks.Task{LanguageExt.TryOption{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``2(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,LanguageExt.TryOption{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``2(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``2(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT(System.Threading.Tasks.Task{LanguageExt.Try{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``2(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,LanguageExt.Try{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``2(System.Threading.Tasks.Task{LanguageExt.Try{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``2(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT``1(System.Threading.Tasks.Task{LanguageExt.Either{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``3(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,LanguageExt.Either{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``3(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``3(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT``1(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``3(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,LanguageExt.EitherUnsafe{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``3(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``3(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT``1(System.Threading.Tasks.Task{LanguageExt.Reader{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``3(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,LanguageExt.Reader{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``3(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``3(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT``1(System.Threading.Tasks.Task{LanguageExt.Writer{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``3(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,LanguageExt.Writer{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``3(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``3(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT``1(System.Threading.Tasks.Task{LanguageExt.State{``0,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``3(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,LanguageExt.State{``1,``2}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``3(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},``2,System.Func{``2,``0,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``3(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT``3(System.Threading.Tasks.Task{LanguageExt.Rws{``0,``1,``2,System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``5(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,LanguageExt.Rws{``1,``2,``3,``4}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``5(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},``4,System.Func{``4,``0,``4})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``5(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.SumT(System.Threading.Tasks.Task{System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.CountT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.BindT``2(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ExistsT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Exists
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FilterT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.FoldT``2(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},``1,System.Func{``1,``0,``1})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.ForAllT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            ForAll
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.IterT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Action{``0})">
            <summary>
            Iter
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.MapT``2(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            Lift
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.TaskTMonadT.LiftUnsafeT``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            LiftUnsafe
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.ListMonad">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListMonad.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListMonad.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListMonad.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListMonad.Select``2(LanguageExt.Lst{``0},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListMonad.Where``1(LanguageExt.Lst{``0},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListMonad.SelectMany``3(LanguageExt.Lst{``0},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.OptionMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionMonad.Select``2(LanguageExt.Option{``0},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionMonad.Where``1(LanguageExt.Option{``0},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionMonad.SelectMany``3(LanguageExt.Option{``0},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.OptionUnsafeMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeMonad.Select``2(LanguageExt.OptionUnsafe{``0},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeMonad.Where``1(LanguageExt.OptionUnsafe{``0},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeMonad.SelectMany``3(LanguageExt.OptionUnsafe{``0},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.MapMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapMonad.Select``3(LanguageExt.Map{``0,``1},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapMonad.Where``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapMonad.SelectMany``4(LanguageExt.Map{``0,``1},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.TryOptionMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionMonad.Select``2(LanguageExt.TryOption{``0},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionMonad.Where``1(LanguageExt.TryOption{``0},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionMonad.SelectMany``3(LanguageExt.TryOption{``0},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.TryMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryMonad.Select``2(LanguageExt.Try{``0},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryMonad.Where``1(LanguageExt.Try{``0},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryMonad.SelectMany``3(LanguageExt.Try{``0},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.EitherMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherMonad.Select``3(LanguageExt.Either{``0,``1},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherMonad.Where``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherMonad.SelectMany``4(LanguageExt.Either{``0,``1},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.EitherUnsafeMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeMonad.Select``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeMonad.Where``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeMonad.SelectMany``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.ReaderMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderMonad.Select``3(LanguageExt.Reader{``0,``1},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderMonad.Where``2(LanguageExt.Reader{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderMonad.SelectMany``4(LanguageExt.Reader{``0,``1},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.WriterMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterMonad.Select``3(LanguageExt.Writer{``0,``1},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterMonad.Where``2(LanguageExt.Writer{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterMonad.SelectMany``4(LanguageExt.Writer{``0,``1},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.StateMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateMonad.Select``3(LanguageExt.State{``0,``1},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateMonad.Where``2(LanguageExt.State{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateMonad.SelectMany``4(LanguageExt.State{``0,``1},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.RwsMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsMonad.Select``5(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsMonad.Where``4(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsMonad.SelectMany``6(LanguageExt.Rws{``0,``1,``2,``3},System.Func{``3,``4},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.TaskMonad">
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskMonad.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskMonad.Where``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskMonad.SelectMany``3(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.ListTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(System.Collections.Generic.IEnumerable{LanguageExt.Lst{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.Map{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(System.Collections.Generic.IEnumerable{LanguageExt.TryOption{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(System.Collections.Generic.IEnumerable{LanguageExt.Try{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.Either{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.Reader{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.Writer{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(System.Collections.Generic.IEnumerable{LanguageExt.State{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``5(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``4(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``6(System.Collections.Generic.IEnumerable{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(LanguageExt.Lst{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(LanguageExt.Lst{LanguageExt.Option{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(LanguageExt.Lst{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(LanguageExt.Lst{LanguageExt.Lst{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(LanguageExt.Lst{LanguageExt.Map{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(LanguageExt.Lst{LanguageExt.TryOption{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(LanguageExt.Lst{LanguageExt.Try{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(LanguageExt.Lst{LanguageExt.Either{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(LanguageExt.Lst{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(LanguageExt.Lst{LanguageExt.Reader{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(LanguageExt.Lst{LanguageExt.Writer{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``3(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``2(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``4(LanguageExt.Lst{LanguageExt.State{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``5(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``4(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``6(LanguageExt.Lst{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Select``2(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.Where``1(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ListTMonadT.SelectMany``3(LanguageExt.Lst{System.Threading.Tasks.Task{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.OptionTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``2(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``1(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``3(LanguageExt.Option{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``2(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``1(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``3(LanguageExt.Option{LanguageExt.Option{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``2(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``1(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``3(LanguageExt.Option{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``2(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``1(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``3(LanguageExt.Option{LanguageExt.Lst{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``3(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``2(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``4(LanguageExt.Option{LanguageExt.Map{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``2(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``1(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``3(LanguageExt.Option{LanguageExt.TryOption{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``2(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``1(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``3(LanguageExt.Option{LanguageExt.Try{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``3(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``2(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``4(LanguageExt.Option{LanguageExt.Either{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``3(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``2(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``4(LanguageExt.Option{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``3(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``2(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``4(LanguageExt.Option{LanguageExt.Reader{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``3(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``2(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``4(LanguageExt.Option{LanguageExt.Writer{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``3(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``2(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``4(LanguageExt.Option{LanguageExt.State{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``5(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``4(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``6(LanguageExt.Option{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Select``2(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.Where``1(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionTMonadT.SelectMany``3(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.OptionUnsafeTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``2(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``1(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``3(LanguageExt.OptionUnsafe{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``2(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``1(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``3(LanguageExt.OptionUnsafe{LanguageExt.Option{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``2(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``1(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``3(LanguageExt.OptionUnsafe{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``2(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``1(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``3(LanguageExt.OptionUnsafe{LanguageExt.Lst{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``3(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``2(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.Map{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``2(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``1(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``3(LanguageExt.OptionUnsafe{LanguageExt.TryOption{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``2(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``1(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``3(LanguageExt.OptionUnsafe{LanguageExt.Try{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``3(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``2(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.Either{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``3(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``2(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``3(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``2(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.Reader{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``3(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``2(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.Writer{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``3(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``2(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``4(LanguageExt.OptionUnsafe{LanguageExt.State{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``5(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``4(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``6(LanguageExt.OptionUnsafe{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Select``2(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.Where``1(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.OptionUnsafeTMonadT.SelectMany``3(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.MapTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``3(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``2(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``4(LanguageExt.Map{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``3(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``2(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.Option{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``3(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``2(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``3(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``2(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.Lst{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``3(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``2(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.Map{``0,``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``3(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``2(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``3(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``2(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``4(LanguageExt.Map{``0,LanguageExt.Try{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``4(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``3(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``5(LanguageExt.Map{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``4(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``3(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``5(LanguageExt.Map{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``4(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``3(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``5(LanguageExt.Map{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``4(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``3(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``5(LanguageExt.Map{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``4(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``3(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``5(LanguageExt.Map{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``6(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``5(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``7(LanguageExt.Map{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5},System.Func{``1,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Select``3(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.Where``2(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.MapTMonadT.SelectMany``4(LanguageExt.Map{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.TryOptionTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``2(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``1(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``3(LanguageExt.TryOption{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``2(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``1(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``3(LanguageExt.TryOption{LanguageExt.Option{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``2(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``1(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``3(LanguageExt.TryOption{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``2(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``1(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``3(LanguageExt.TryOption{LanguageExt.Lst{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``3(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``2(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``4(LanguageExt.TryOption{LanguageExt.Map{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``2(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``1(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``3(LanguageExt.TryOption{LanguageExt.TryOption{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``2(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``1(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``3(LanguageExt.TryOption{LanguageExt.Try{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``3(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``2(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``4(LanguageExt.TryOption{LanguageExt.Either{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``3(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``2(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``4(LanguageExt.TryOption{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``3(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``2(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``4(LanguageExt.TryOption{LanguageExt.Reader{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``3(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``2(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``4(LanguageExt.TryOption{LanguageExt.Writer{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``3(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``2(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``4(LanguageExt.TryOption{LanguageExt.State{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``5(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``4(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``6(LanguageExt.TryOption{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Select``2(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.Where``1(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryOptionTMonadT.SelectMany``3(LanguageExt.TryOption{System.Threading.Tasks.Task{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.TryTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``2(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``1(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``3(LanguageExt.Try{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``2(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``1(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``3(LanguageExt.Try{LanguageExt.Option{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``2(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``1(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``3(LanguageExt.Try{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``2(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``1(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``3(LanguageExt.Try{LanguageExt.Lst{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``3(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``2(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``4(LanguageExt.Try{LanguageExt.Map{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``2(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``1(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``3(LanguageExt.Try{LanguageExt.TryOption{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``2(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``1(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``3(LanguageExt.Try{LanguageExt.Try{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``3(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``2(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``4(LanguageExt.Try{LanguageExt.Either{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``3(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``2(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``4(LanguageExt.Try{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``3(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``2(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``4(LanguageExt.Try{LanguageExt.Reader{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``3(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``2(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``4(LanguageExt.Try{LanguageExt.Writer{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``3(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``2(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``4(LanguageExt.Try{LanguageExt.State{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``5(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``4(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``6(LanguageExt.Try{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Select``2(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.Where``1(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TryTMonadT.SelectMany``3(LanguageExt.Try{System.Threading.Tasks.Task{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.EitherTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``3(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``2(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``4(LanguageExt.Either{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``3(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``2(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.Option{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``3(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``2(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``3(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``2(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.Lst{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``4(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``3(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``5(LanguageExt.Either{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``3(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``2(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``3(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``2(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.Try{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``3(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``2(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.Either{``0,``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``3(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``2(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``4(LanguageExt.Either{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``4(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``3(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``5(LanguageExt.Either{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``4(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``3(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``5(LanguageExt.Either{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``4(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``3(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``5(LanguageExt.Either{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``6(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``5(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``7(LanguageExt.Either{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5},System.Func{``1,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Select``3(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.Where``2(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherTMonadT.SelectMany``4(LanguageExt.Either{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.EitherUnsafeTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``3(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``2(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``4(LanguageExt.EitherUnsafe{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Option{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``3(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``2(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Lst{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``3(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``2(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Try{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``2(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Either{``0,``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``3(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``2(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``4(LanguageExt.EitherUnsafe{``0,LanguageExt.EitherUnsafe{``0,``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Reader{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``4(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``3(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Writer{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``4(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``3(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``5(LanguageExt.EitherUnsafe{``0,LanguageExt.State{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``6(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``5(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``7(LanguageExt.EitherUnsafe{``0,LanguageExt.Rws{``2,``3,``4,``1}},System.Func{``1,``5},System.Func{``1,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Select``3(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.Where``2(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.EitherUnsafeTMonadT.SelectMany``4(LanguageExt.EitherUnsafe{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.ReaderTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``3(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``2(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``4(LanguageExt.Reader{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``3(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``2(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.Option{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``3(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``2(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``3(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``2(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.Lst{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``4(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``3(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``5(LanguageExt.Reader{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``3(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``2(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``3(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``2(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.Try{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``4(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``3(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``5(LanguageExt.Reader{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``4(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``3(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``5(LanguageExt.Reader{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``3(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``2(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``4(LanguageExt.Reader{``0,LanguageExt.Reader{``0,``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Select``3(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.Where``2(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.ReaderTMonadT.SelectMany``4(LanguageExt.Reader{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.WriterTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``3(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``2(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``4(LanguageExt.Writer{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``3(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``2(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.Option{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``3(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``2(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``3(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``2(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.Lst{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``4(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``3(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``5(LanguageExt.Writer{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``3(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``2(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``3(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``2(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.Try{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``4(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``3(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``5(LanguageExt.Writer{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``4(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``3(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``5(LanguageExt.Writer{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``3(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``2(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``4(LanguageExt.Writer{``0,LanguageExt.Writer{``0,``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Select``3(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.Where``2(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.WriterTMonadT.SelectMany``4(LanguageExt.Writer{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.StateTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``3(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``2(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``4(LanguageExt.State{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``3(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``2(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``4(LanguageExt.State{``0,LanguageExt.Option{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``3(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``2(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``4(LanguageExt.State{``0,LanguageExt.OptionUnsafe{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``3(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``2(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``4(LanguageExt.State{``0,LanguageExt.Lst{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``4(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``3(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``5(LanguageExt.State{``0,LanguageExt.Map{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``3(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``2(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``4(LanguageExt.State{``0,LanguageExt.TryOption{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``3(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``2(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``4(LanguageExt.State{``0,LanguageExt.Try{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``4(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``3(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``5(LanguageExt.State{``0,LanguageExt.Either{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``4(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``3(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``5(LanguageExt.State{``0,LanguageExt.EitherUnsafe{``2,``1}},System.Func{``1,``3},System.Func{``1,``3,``4})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``3(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``2(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``4(LanguageExt.State{``0,LanguageExt.State{``0,``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Select``3(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.Where``2(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.StateTMonadT.SelectMany``4(LanguageExt.State{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,``2},System.Func{``1,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.RwsTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``5(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``4(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},System.Func{``3,``4},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Option{``3}},System.Func{``3,``4},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.OptionUnsafe{``3}},System.Func{``3,``4},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Lst{``3}},System.Func{``3,``4},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,``5})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``7(LanguageExt.Rws{``0,``1,``2,LanguageExt.Map{``4,``3}},System.Func{``3,``5},System.Func{``3,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.TryOption{``3}},System.Func{``3,``4},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Try{``3}},System.Func{``3,``4},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,``5})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``7(LanguageExt.Rws{``0,``1,``2,LanguageExt.Either{``4,``3}},System.Func{``3,``5},System.Func{``3,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,``5})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``7(LanguageExt.Rws{``0,``1,``2,LanguageExt.EitherUnsafe{``4,``3}},System.Func{``3,``5},System.Func{``3,``5,``6})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``5(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``4(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,LanguageExt.Rws{``0,``1,``2,``3}},System.Func{``3,``4},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Select``5(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.Where``4(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.RwsTMonadT.SelectMany``6(LanguageExt.Rws{``0,``1,``2,System.Threading.Tasks.Task{``3}},System.Func{``3,``4},System.Func{``3,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.Trans.Linq.TaskTMonadT">
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``2(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``1(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``3(System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``2(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``1(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``3(System.Threading.Tasks.Task{LanguageExt.Option{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``2(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``1(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``3(System.Threading.Tasks.Task{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``2(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``1(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``3(System.Threading.Tasks.Task{LanguageExt.Lst{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``3(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``2(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.Map{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``2(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``1(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``3(System.Threading.Tasks.Task{LanguageExt.TryOption{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``2(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``1(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``3(System.Threading.Tasks.Task{LanguageExt.Try{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``3(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``2(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.Either{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``3(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``2(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.EitherUnsafe{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``3(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``2(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.Reader{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``3(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``2(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.Writer{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``3(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``2(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``4(System.Threading.Tasks.Task{LanguageExt.State{``1,``0}},System.Func{``0,``2},System.Func{``0,``2,``3})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``5(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``4(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``6(System.Threading.Tasks.Task{LanguageExt.Rws{``1,``2,``3,``0}},System.Func{``0,``4},System.Func{``0,``4,``5})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Select``2(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,``1})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.Where``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Where
            </summary>
        </member>
        <member name="M:LanguageExt.Trans.Linq.TaskTMonadT.SelectMany``3(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}},System.Func{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            SelectMany
            </summary>
        </member>
        <member name="T:LanguageExt.IAppendable`1">
            <summary>
            Provides the Append method
            </summary>
            <typeparam name="T">T</typeparam>
        </member>
        <member name="M:LanguageExt.IAppendable`1.Append(`0)">
            <summary>
            Append rhs to this
            </summary>
            <param name="rhs">Right hand side to append</param>
            <returns>this with rhs appended</returns>
        </member>
        <member name="T:LanguageExt.IDivisible`1">
            <summary>
            Provides the Divide method
            </summary>
            <typeparam name="T">T</typeparam>
        </member>
        <member name="M:LanguageExt.IDivisible`1.Divide(`0)">
            <summary>
            Find this / rhs
            </summary>
            <param name="rhs">Right hand side of the divide</param>
            <returns>this / rhs</returns>
        </member>
        <member name="T:LanguageExt.IMultiplicable`1">
            <summary>
            Provides the Multiply method
            </summary>
            <typeparam name="T">T</typeparam>
        </member>
        <member name="M:LanguageExt.IMultiplicable`1.Multiply(`0)">
            <summary>
            Find the product of this and rhs
            </summary>
            <param name="rhs">Right hand side of the multiplication</param>
            <returns>this * rhs</returns>
        </member>
        <member name="T:LanguageExt.ISubtractable`1">
            <summary>
            Provides the Subtract method
            </summary>
            <typeparam name="T">T</typeparam>
        </member>
        <member name="M:LanguageExt.ISubtractable`1.Subtract(`0)">
            <summary>
            Subject rhs from lhs
            </summary>
            <param name="rhs">Right hand side to subtract</param>
            <returns>this with rhs subtracted</returns>
        </member>
        <member name="M:LanguageExt.List.empty``1">
            <summary>
            Create an empty IEnumerable T
            </summary>
        </member>
        <member name="M:LanguageExt.List.create``1">
            <summary>
            Create a new empty list
            </summary>
            <returns>Lst T</returns>
        </member>
        <member name="M:LanguageExt.List.create``1(``0[])">
            <summary>
            Create a list from a initial set of items
            </summary>
            <param name="items">Items</param>
            <returns>Lst T</returns>
        </member>
        <member name="M:LanguageExt.List.createRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a list from an initial set of items
            </summary>
            <param name="items">Items</param>
            <returns>Lst T</returns>
        </member>
        <member name="M:LanguageExt.List.init``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Generates a sequence of T using the provided delegate to initialise
            each item.
            </summary>
        </member>
        <member name="M:LanguageExt.List.initInfinite``1(System.Func{System.Int32,``0})">
            <summary>
            Generates an infinite sequence of T using the provided delegate to initialise
            each item.
            
              Remarks: Not truly infinite, will end at Int32.MaxValue
            
            </summary>
        </member>
        <member name="M:LanguageExt.List.repeat``1(``0,System.Int32)">
            <summary>
            Generates a sequence that contains one repeated value.
            </summary>
        </member>
        <member name="M:LanguageExt.List.add``1(LanguageExt.Lst{``0},``0)">
            <summary>
            Add an item to the list
            </summary>
            <param name="list">List</param>
            <param name="value">Item to add</param>
            <returns>A new Lst T</returns>
        </member>
        <member name="M:LanguageExt.List.addRange``1(LanguageExt.Lst{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to the list
            </summary>
            <param name="list">List</param>
            <param name="value">Items to add</param>
            <returns>A new Lst T</returns>
        </member>
        <member name="M:LanguageExt.List.remove``1(LanguageExt.Lst{``0},``0)">
            <summary>
            Remove an item from the list
            </summary>
            <param name="list">List</param>
            <param name="value">value to remove</param>
            <returns>A new Lst T</returns>
        </member>
        <member name="M:LanguageExt.List.removeAt``1(LanguageExt.Lst{``0},System.Int32)">
            <summary>
            Remove an item at a specified index in the list
            </summary>
            <param name="list">List</param>
            <param name="index">Index of item to remove</param>
            <returns>A new Lst T</returns>
        </member>
        <member name="M:LanguageExt.List.head``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the item at the head (first) of the list
            </summary>
            <param name="list">List</param>
            <returns>Head item</returns>
        </member>
        <member name="M:LanguageExt.List.headOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the item at the head (first) of the list or None if the list is empty
            </summary>
            <param name="list">List</param>
            <returns>Optional head item</returns>
        </member>
        <member name="M:LanguageExt.List.tail``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the tail of the list (skips the head item)
            </summary>
            <param name="list">List</param>
            <returns>Enumerable of T</returns>
        </member>
        <member name="M:LanguageExt.List.map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Projects the values in the enumerable using a map function into a new enumerable (Select in LINQ).
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="list">Enumerable to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.map``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.List.map``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:LanguageExt.List.map``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,``1})">
            <summary>
            Projects the values in the enumerable using a map function into a new enumerable (Select in LINQ).
            An index value is passed through to the map function also.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="list">Enumerable to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.filter``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes items from the list that do not match the given predicate (Where in LINQ)
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to filter</param>
            <param name="predicate">Predicate function</param>
            <returns>Filtered enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.choose``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.Option{``0}})">
            <summary>
            Applies the given function 'selector' to each element of the list. Returns the list comprised of 
            the results for each element where the function returns Some(f(x)).
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable</param>
            <param name="selector">Selector function</param>
            <returns>Mapped and filtered enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.choose``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,LanguageExt.Option{``0}})">
            <summary>
            Applies the given function 'selector' to each element of the list. Returns the list comprised of 
            the results for each element where the function returns Some(f(x)).
            An index value is passed through to the selector function also.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable</param>
            <param name="selector">Selector function</param>
            <returns>Mapped and filtered enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.collect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            For each element of the list, applies the given function. Concatenates all the results and 
            returns the combined list.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="list">Enumerable to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the sum total of all the items in the list (Sum in LINQ)
            </summary>
            <param name="list">List to sum</param>
            <returns>Sum total</returns>
        </member>
        <member name="M:LanguageExt.List.sum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the sum total of all the items in the list (Sum in LINQ)
            </summary>
            <param name="list">List to sum</param>
            <returns>Sum total</returns>
        </member>
        <member name="M:LanguageExt.List.sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the sum total of all the items in the list (Sum in LINQ)
            </summary>
            <param name="list">List to sum</param>
            <returns>Sum total</returns>
        </member>
        <member name="M:LanguageExt.List.sum(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the sum total of all the items in the list (Sum in LINQ)
            </summary>
            <param name="list">List to sum</param>
            <returns>Sum total</returns>
        </member>
        <member name="M:LanguageExt.List.rev``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Reverses the enumerable (Reverse in LINQ)
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to reverse</param>
            <returns>Reversed enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.rev``1(LanguageExt.Lst{``0})">
            <summary>
            Reverses the list (Reverse in LINQ)
            </summary>
            <typeparam name="T">List item type</typeparam>
            <param name="list">List to reverse</param>
            <returns>Reversed list</returns>
        </member>
        <member name="M:LanguageExt.List.append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenate two enumerables (Concat in LINQ)
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="lhs">First enumerable</param>
            <param name="rhs">Second enumerable</param>
            <returns>Concatenated enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Concatenate an enumerable and an enumerable of enumerables
            </summary>
            <typeparam name="T">List item type</typeparam>
            <param name="lhs">First list</param>
            <param name="rhs">Second list</param>
            <returns>Concatenated list</returns>
        </member>
        <member name="M:LanguageExt.List.append``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Concatenate N enumerables
            </summary>
            <typeparam name="T">Enumerable type</typeparam>
            <param name="lists">Enumerables to concatenate</param>
            <returns>A single enumerable with all of the items concatenated</returns>
        </member>
        <member name="M:LanguageExt.List.fold``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the list. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result. (Aggregate in LINQ)
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.foldBack``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an aggregate state through the computation. The fold function takes the state 
            argument, and applies the function 'folder' to it and the first element of the list. Then, 
            it feeds this result into the function 'folder' along with the second element, and so on. It 
            returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.foldWhile``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection whilst the predicate function 
            returns True for the item being processed, threading an aggregate state through the 
            computation. The fold function takes the state argument, and applies the function 'folder' 
            to it and the first element of the list. Then, it feeds this result into the function 'folder' 
            along with the second element, and so on. It returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.foldWhile``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation (and whilst the predicate function returns True when passed 
            the aggregate state). The fold function takes the state argument, and applies the function 
            'folder' to it and the first element of the list. Then, it feeds this result into the 
            function 'folder' along with the second element, and so on. It returns the final result. 
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.foldBackWhile``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first)
            whilst the predicate function returns True for the item being processed, threading an 
            aggregate state through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the list. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.foldBackWhile``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an accumulator argument through the computation (and whilst the predicate function 
            returns True when passed the aggregate state). The fold function takes the state argument, 
            and applies the function 'folder' to it and the first element of the list. Then, it feeds 
            this result into the function 'folder' along with the second element, and so on. It returns 
            the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.foldUntil``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection whilst the predicate function 
            returns False for the item being processed, threading an aggregate state through the 
            computation. The fold function takes the state argument, and applies the function 'folder' 
            to it and the first element of the list. Then, it feeds this result into the function 'folder' 
            along with the second element, and so on. It returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.foldUntil``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation (and whilst the predicate function returns False when passed 
            the aggregate state). The fold function takes the state argument, and applies the function 
            'folder' to it and the first element of the list. Then, it feeds this result into the 
            function 'folder' along with the second element, and so on. It returns the final result. 
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.foldBackUntil``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first)
            whilst the predicate function returns False for the item being processed, threading an 
            aggregate state through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the list. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.foldBackUntil``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an accumulator argument through the computation (and whilst the predicate function 
            returns False when passed the aggregate state). The fold function takes the state argument, 
            and applies the function 'folder' to it and the first element of the list. Then, it feeds 
            this result into the function 'folder' along with the second element, and so on. It returns 
            the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.reduce``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a function to each element of the collection (from last element to first), threading 
            an accumulator argument through the computation. This function first applies the function 
            to the first two elements of the list. Then, it passes this result into the function along 
            with the third element and so on. Finally, it returns the final result.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to reduce</param>
            <param name="reducer">Reduce function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.reduceBack``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a function to each element of the collection, threading an accumulator argument 
            through the computation. This function first applies the function to the first two 
            elements of the list. Then, it passes this result into the function along with the third 
            element and so on. Finally, it returns the final result.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to reduce</param>
            <param name="reducer">Reduce function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.List.scan``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function to each element of the collection, threading an accumulator argument 
            through the computation. This function takes the state argument, and applies the function 
            to it and the first element of the list. Then, it passes this result into the function 
            along with the second element, and so on. Finally, it returns the list of intermediate 
            results and the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Folding function</param>
            <returns>Aggregate state</returns>
        </member>
        <member name="M:LanguageExt.List.scanBack``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function to each element of the collection (from last element to first), 
            threading an accumulator argument through the computation. This function takes the state 
            argument, and applies the function to it and the first element of the list. Then, it 
            passes this result into the function along with the second element, and so on. Finally, 
            it returns the list of intermediate results and the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Folding function</param>
            <returns>Aggregate state</returns>
        </member>
        <member name="M:LanguageExt.List.find``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns Some(x) for the first item in the list that matches the predicate 
            provided, None otherwise.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to search</param>
            <param name="pred">Predicate</param>
            <returns>Some(x) for the first item in the list that matches the predicate 
            provided, None otherwise.</returns>
        </member>
        <member name="M:LanguageExt.List.freeze``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert any enumerable into an immutable Lst T
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to convert</param>
            <returns>Lst of T</returns>
        </member>
        <member name="M:LanguageExt.List.zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Joins two enumerables together either into a single enumerable
            using the join function provided
            </summary>
            <param name="list">First list to join</param>
            <param name="other">Second list to join</param>
            <param name="zipper">Join function</param>
            <returns>Joined enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Joins two enumerables together either into an enumerables of tuples
            </summary>
            <param name="list">First list to join</param>
            <param name="other">Second list to join</param>
            <param name="zipper">Join function</param>
            <returns>Joined enumerable of tuples</returns>
        </member>
        <member name="M:LanguageExt.List.length``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the number of items in the enumerable
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to count</param>
            <returns>The number of items in the enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Invokes an action for each item in the enumerable in order
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to iterate</param>
            <param name="action">Action to invoke with each item</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.List.iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Invokes an action for each item in the enumerable in order and supplies
            a running index value.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to iterate</param>
            <param name="action">Action to invoke with each item</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.List.forall``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if all items in the enumerable match a predicate (Any in LINQ)
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to test</param>
            <param name="pred">Predicate</param>
            <returns>True if all items in the enumerable match the predicate</returns>
        </member>
        <member name="M:LanguageExt.List.distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return a new enumerable with all duplicate values removed
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable</param>
            <returns>A new enumerable with all duplicate values removed</returns>
        </member>
        <member name="M:LanguageExt.List.distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Return a new enumerable with all duplicate values removed
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable</param>
            <returns>A new enumerable with all duplicate values removed</returns>
        </member>
        <member name="M:LanguageExt.List.take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a new enumerable with the first 'count' items from the enumerable provided
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable</param>
            <param name="count">Number of items to take</param>
            <returns>A new enumerable with the first 'count' items from the enumerable provided</returns>
        </member>
        <member name="M:LanguageExt.List.takeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterate the list, yielding items if they match the predicate provided, and stopping 
            as soon as one doesn't
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable</param>
            <param name="count">Number of items to take</param>
            <returns>A new enumerable with the first items that match the predicate</returns>
        </member>
        <member name="M:LanguageExt.List.takeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Iterate the list, yielding items if they match the predicate provided, and stopping 
            as soon as one doesn't.  An index value is also provided to the predicate function.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable</param>
            <param name="count">Number of items to take</param>
            <returns>A new enumerable with the first items that match the predicate</returns>
        </member>
        <member name="M:LanguageExt.List.unfold``1(``0,System.Func{``0,LanguageExt.Option{``0}})">
            <summary>
            Generate a new list from an intial state value and an 'unfolding' function.
            The unfold function generates the items in the resulting list until None is returned.
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="unfolder">Unfold function</param>
            <returns>Unfolded enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.unfold``2(``0,System.Func{``0,LanguageExt.Option{System.Tuple{``1,``0}}})">
            <summary>
            Generate a new list from an intial state value and an 'unfolding' function.  An aggregate
            state value is threaded through separately to the yielded value.
            The unfold function generates the items in the resulting list until None is returned.
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="unfolder">Unfold function</param>
            <returns>Unfolded enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.unfold``3(System.Tuple{``0,``1},System.Func{``0,``1,LanguageExt.Option{System.Tuple{``2,``0,``1}}})">
            <summary>
            Generate a new list from an intial state value and an 'unfolding' function.  An aggregate
            state value is threaded through separately to the yielded value.
            The unfold function generates the items in the resulting list until None is returned.
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="unfolder">Unfold function</param>
            <returns>Unfolded enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.unfold``4(System.Tuple{``0,``1,``2},System.Func{``0,``1,``2,LanguageExt.Option{System.Tuple{``3,``0,``1,``2}}})">
            <summary>
            Generate a new list from an intial state value and an 'unfolding' function.  An aggregate
            state value is threaded through separately to the yielded value.
            The unfold function generates the items in the resulting list until None is returned.
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="unfolder">Unfold function</param>
            <returns>Unfolded enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.unfold``5(System.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,LanguageExt.Option{System.Tuple{``4,``0,``1,``2,``3}}})">
            <summary>
            Generate a new list from an intial state value and an 'unfolding' function.  An aggregate
            state value is threaded through separately to the yielded value.
            The unfold function generates the items in the resulting list until None is returned.
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="unfolder">Unfold function</param>
            <returns>Unfolded enumerable</returns>
        </member>
        <member name="M:LanguageExt.List.exists``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if any item in the enumerable matches the predicate provided
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to test</param>
            <param name="pred">Predicate</param>
            <returns>True if any item in the enumerable matches the predicate provided</returns>
        </member>
        <member name="M:LanguageExt.List.apply``2(System.Collections.Generic.IEnumerable{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Apply an IEnumerable of values to an IEnumerable of functions
            </summary>
            <param name="opt">IEnumerable of functions</param>
            <param name="arg">IEnumerable of argument values</param>
            <returns>Returns the result of applying the IEnumerable argument values to the IEnumerable functions</returns>
        </member>
        <member name="M:LanguageExt.List.apply``3(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Apply an IEnumerable of values to an IEnumerable of functions of arity 2
            </summary>
            <param name="opt">IEnumerable of functions</param>
            <param name="arg">IEnumerable argument values</param>
            <returns>Returns the result of applying the IEnumerable of argument values to the 
            IEnumerable of functions: an IEnumerable of functions of arity 1</returns>
        </member>
        <member name="M:LanguageExt.List.apply``3(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Apply IEnumerable of values to an IEnumerable of functions of arity 2
            </summary>
            <param name="opt">IEnumerable of functions</param>
            <param name="arg1">IEnumerable of arguments</param>
            <param name="arg2">IEnumerable of arguments</param>
            <returns>Returns the result of applying the IEnumerables of arguments to the IEnumerable of functions</returns>
        </member>
        <member name="M:LanguageExt.List.tails``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            The tails function returns all final segments of the argument, longest first. For example,
             i.e. tails(['a','b','c']) == [['a','b','c'], ['b','c'], ['c'],[]]
            </summary>
            <typeparam name="T">List item type</typeparam>
            <param name="self">List</param>
            <returns>Enumerable of Enumerables of T</returns>
        </member>
        <member name="M:LanguageExt.List.span``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Span, applied to a predicate 'pred' and a list, returns a tuple where first element is 
            longest prefix (possibly empty) of elements that satisfy 'pred' and second element is the 
            remainder of the list:
            </summary>
            <example>
            List.span(List(1,2,3,4,1,2,3,4), x => x &lt; 3) == Tuple(List(1,2),List(3,4,1,2,3,4))
            </example>
            <example>
            List.span(List(1,2,3), x => x &lt; 9) == Tuple(List(1,2,3),List())
            </example>
            <example>
            List.span(List(1,2,3), x => x &lt; 0) == Tuple(List(),List(1,2,3))
            </example>
            <typeparam name="T">List element type</typeparam>
            <param name="self">List</param>
            <param name="pred">Predicate</param>
            <returns>Split list</returns>
        </member>
        <member name="T:LanguageExt.Lst`1">
            <summary>
            Immutable list
            </summary>
            <typeparam name="T">Value type</typeparam>
        </member>
        <member name="F:LanguageExt.Lst`1.Empty">
            <summary>
            Empty list
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.#ctor(LanguageExt.ListItem{`0},System.Boolean)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:LanguageExt.Lst`1.Item(System.Int32)">
            <summary>
            Index accessor
            </summary>
        </member>
        <member name="P:LanguageExt.Lst`1.Count">
            <summary>
            Number of items in the list
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.Add(`0)">
            <summary>
            Add an item to the end of the list
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of items to the end of the list
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.Clear">
            <summary>
            Clear the list
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.GetEnumerator">
            <summary>
            Get enumerator
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Find the index of an item
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.Insert(System.Int32,`0)">
            <summary>
            Insert value at specified index
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Insert range of values at specified index
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Find the last index of an item in the list
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.Remove(`0)">
            <summary>
            Remove an item from the list
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.Remove(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Remove an item from the list
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Remove all items that match a predicate
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.RemoveAt(System.Int32)">
            <summary>
            Remove item at location
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:LanguageExt.Lst`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of items
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.SetItem(System.Int32,`0)">
            <summary>
            Set an item at the specified index
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.Reverse">
            <summary>
            Reverse the order of the items in the list
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.Fold``1(``0,System.Func{``0,`0,``0})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.Map``1(System.Func{`0,``0})">
            <summary>
            Map
            </summary>
        </member>
        <member name="M:LanguageExt.Lst`1.Filter(System.Func{`0,System.Boolean})">
            <summary>
            Filter
            </summary>
        </member>
        <member name="M:LanguageExt.ListItem`1.#ctor(System.Byte,System.Int32,`0,LanguageExt.ListItem{`0},LanguageExt.ListItem{`0})">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:LanguageExt.Map">
            <summary>
            Immutable map module
            AVL tree implementation
            AVL tree is a self-balancing binary search tree. 
            http://en.wikipedia.org/wiki/AVL_tree
            </summary>
        </member>
        <member name="M:LanguageExt.Map.clear``2(LanguageExt.Map{``0,``1})">
            <summary>
            Clears all items from the map
            </summary>
            <param name="map">Map to clear</param>
            <remarks>Functionally equivalent to calling Map.empty as the original structure is untouched</remarks>
            <returns>Empty map</returns>
        </member>
        <member name="M:LanguageExt.Map.empty``2">
            <summary>
            Creates a new empty Map
            </summary>
        </member>
        <member name="M:LanguageExt.Map.create``2(System.Tuple{``0,``1}[])">
            <summary>
            Creates a new Map seeded with the keyValues provided
            </summary>
        </member>
        <member name="M:LanguageExt.Map.createRange``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Creates a new Map seeded with the keyValues provided
            </summary>
        </member>
        <member name="M:LanguageExt.Map.add``2(LanguageExt.Map{``0,``1},``0,``1)">
            <summary>
            Atomically adds a new item to the map
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the key already exists</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map.tryAdd``2(LanguageExt.Map{``0,``1},``0,``1)">
            <summary>
            Atomically adds a new item to the map.
            If the key already exists, then the new item is ignored
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map.tryAdd``2(LanguageExt.Map{``0,``1},``0,``1,System.Func{LanguageExt.Map{``0,``1},``1,LanguageExt.Map{``0,``1}})">
            <summary>
            Atomically adds a new item to the map.
            If the key already exists then the Fail handler is called with the unaltered map 
            and the value already set for the key, it expects a new map returned.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="Fail">Delegate to handle failure, you're given the unaltered map 
            and the value already set for the key</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map.addOrUpdate``2(LanguageExt.Map{``0,``1},``0,``1)">
            <summary>
            Atomically adds a new item to the map.
            If the key already exists, the new item replaces it.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map.addOrUpdate``2(LanguageExt.Map{``0,``1},``0,System.Func{``1,``1},System.Func{``1})">
            <summary>
            Retrieve a value from the map by key, map it to a new value,
            put it back.  If it doesn't exist, add a new one based on None result.
            </summary>
            <param name="key">Key to find</param>
            <exception cref="T:System.Exception">Throws Exception if None returns null</exception>
            <exception cref="T:System.Exception">Throws Exception if Some returns null</exception>
            <returns>New map with the mapped value</returns>
        </member>
        <member name="M:LanguageExt.Map.addOrUpdate``2(LanguageExt.Map{``0,``1},``0,System.Func{``1,``1},``1)">
            <summary>
            Retrieve a value from the map by key, map it to a new value,
            put it back.  If it doesn't exist, add a new one based on None result.
            </summary>
            <param name="key">Key to find</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException if None is null</exception>
            <exception cref="T:System.Exception">Throws Exception if Some returns null</exception>
            <returns>New map with the mapped value</returns>
        </member>
        <member name="M:LanguageExt.Map.addRange``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Atomically adds a range of items to the map.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="range">Range of tuples to add</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if any of the keys already exist</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keys or values are null</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map.addRange``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Atomically adds a range of items to the map.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="range">Range of tuples to add</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if any of the keys already exist</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keys or values are null</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map.tryAddRange``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Atomically adds a range of items to the map.  If any of the keys exist already
            then they're ignored.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="range">Range of tuples to add</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keys or values are null</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map.tryAddRange``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Atomically adds a range of items to the map.  If any of the keys exist already
            then they're ignored.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="range">Range of KeyValuePairs to add</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keys or values are null</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map.addOrUpdateRange``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Atomically adds a range of items to the map.  If any of the keys exist already
            then they're replaced.
            </summary>
            <param name="range">Range of tuples to add</param>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map.addOrUpdateRange``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Atomically adds a range of items to the map.  If any of the keys exist already
            then they're replaced.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="range">Range of KeyValuePairs to add</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keys or values are null</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map.remove``2(LanguageExt.Map{``0,``1},``0)">
            <summary>
            Atomically removes an item from the map
            If the key doesn't exists, the request is ignored.
            </summary>
            <param name="key">Key</param>
            <returns>New map with the item removed</returns>
        </member>
        <member name="M:LanguageExt.Map.containsKey``2(LanguageExt.Map{``0,``1},``0)">
            <summary>
            Checks for existence of a key in the map
            </summary>
            <param name="key">Key to check</param>
            <returns>True if an item with the key supplied is in the map</returns>
        </member>
        <member name="M:LanguageExt.Map.contains``2(LanguageExt.Map{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            Checks for existence of a key in the map
            </summary>
            <param name="key">Key to check</param>
            <returns>True if an item with the key supplied is in the map</returns>
        </member>
        <member name="M:LanguageExt.Map.contains``2(LanguageExt.Map{``0,``1},System.Tuple{``0,``1})">
            <summary>
            Checks for existence of a key in the map
            </summary>
            <param name="key">Key to check</param>
            <returns>True if an item with the key supplied is in the map</returns>
        </member>
        <member name="M:LanguageExt.Map.setItem``2(LanguageExt.Map{``0,``1},``0,``1)">
            <summary>
            Atomically updates an existing item
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map.trySetItem``2(LanguageExt.Map{``0,``1},``0,``1)">
            <summary>
            Atomically updates an existing item, unless it doesn't exist, in which case 
            it is ignored
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the value is null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map.trySetItem``2(LanguageExt.Map{``0,``1},``0,System.Func{``1,``1})">
            <summary>
            Atomically sets an item by first retrieving it, applying a map (Some), and then putting 
            it back. Silently fails if the value doesn't exist.
            </summary>
            <param name="key">Key to set</param>
            <exception cref="T:System.Exception">Throws Exception if Some returns null</exception>
            <param name="Some">delegate to map the existing value to a new one before setting</param>
            <returns>New map with the item set</returns>
        </member>
        <member name="M:LanguageExt.Map.trySetItem``2(LanguageExt.Map{``0,``1},``0,System.Func{``1,``1},System.Func{LanguageExt.Map{``0,``1},LanguageExt.Map{``0,``1}})">
            <summary>
            Atomically sets an item by first retrieving it, applying a map, and then putting it back.
            Calls the None delegate to return a new map if the item can't be found
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="Some">delegate to map the existing value to a new one before setting</param>
            <param name="None">delegate to return a new map if the item can't be found</param>
            <exception cref="T:System.Exception">Throws Exception if Some returns null</exception>
            <exception cref="T:System.Exception">Throws Exception if None returns null</exception>
            <returns>New map with the item set</returns>
        </member>
        <member name="M:LanguageExt.Map.setItems``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Atomically sets a series of items using the Tuples provided
            </summary>
            <param name="items">Items to set</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if any of the keys aren't in the map</exception>
            <returns>New map with the items set</returns>
        </member>
        <member name="M:LanguageExt.Map.setItems``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Atomically sets a series of items using the KeyValuePairs provided
            </summary>
            <param name="items">Items to set</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if any of the keys aren't in the map</exception>
            <returns>New map with the items set</returns>
        </member>
        <member name="M:LanguageExt.Map.trySetItems``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Atomically sets a series of items using the Tuples provided.
            </summary>
            <param name="items">Items to set</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if any of the keys aren't in the map</exception>
            <returns>New map with the items set</returns>
        </member>
        <member name="M:LanguageExt.Map.trySetItems``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Atomically sets a series of items using the KeyValuePairs provided.  If any of the 
            items don't exist then they're silently ignored.
            </summary>
            <param name="items">Items to set</param>
            <returns>New map with the items set</returns>
        </member>
        <member name="M:LanguageExt.Map.trySetItems``2(LanguageExt.Map{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Func{``1,``1})">
            <summary>
            Atomically sets a series of items using the keys provided to find the items
            and the Some delegate maps to a new value.  If the items don't exist then
            they're silently ignored.
            </summary>
            <param name="keys">Keys of items to set</param>
            <param name="Some">Function map the existing item to a new one</param>
            <returns>New map with the items set</returns>
        </member>
        <member name="M:LanguageExt.Map.find``2(LanguageExt.Map{``0,``1},``0)">
            <summary>
            Retrieve a value from the map by key
            </summary>
            <param name="key">Key to find</param>
            <returns>Found value</returns>
        </member>
        <member name="M:LanguageExt.Map.find``3(LanguageExt.Map{``0,``1},``0,System.Func{``1,``2},System.Func{``2})">
            <summary>
            Retrieve a value from the map by key and pattern match the
            result.
            </summary>
            <param name="key">Key to find</param>
            <returns>Found value</returns>
        </member>
        <member name="M:LanguageExt.Map.setItem``2(LanguageExt.Map{``0,``1},``0,System.Func{``1,``1})">
            <summary>
            Retrieve a value from the map by key, map it to a new value,
            put it back.
            </summary>
            <param name="key">Key to find</param>
            <returns>New map with the mapped value</returns>
        </member>
        <member name="M:LanguageExt.Map.findRange``2(LanguageExt.Map{``0,``1},``0,``0)">
            <summary>
            Retrieve a range of values 
            </summary>
            <param name="keyFrom">Range start (inclusive)</param>
            <param name="keyTo">Range to (inclusive)</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keyFrom or keyTo are null</exception>
            <returns>Range of values</returns>
        </member>
        <member name="M:LanguageExt.Map.skip``2(LanguageExt.Map{``0,``1},System.Int32)">
            <summary>
            Skips 'amount' values and returns a new tree without the 
            skipped values.
            </summary>
            <param name="amount">Amount to skip</param>
            <returns>Enumerable of map items</returns>
        </member>
        <member name="M:LanguageExt.Map.iter``2(LanguageExt.Map{``0,``1},System.Action{``1})">
            <summary>
            Atomically iterate through all key/value pairs in the map (in order) and execute an
            action on each
            </summary>
            <param name="action">Action to execute</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Map.iter``2(LanguageExt.Map{``0,``1},System.Action{``0,``1})">
            <summary>
            Atomically iterate through all key/value pairs in the map (in order) and execute an
            action on each
            </summary>
            <param name="action">Action to execute</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Map.forall``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Return true if all items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:LanguageExt.Map.forall``2(LanguageExt.Map{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Return true if all items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:LanguageExt.Map.forall``2(LanguageExt.Map{``0,``1},System.Func{System.Tuple{``0,``1},System.Boolean})">
            <summary>
            Return true if all items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:LanguageExt.Map.forall``2(LanguageExt.Map{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
            Return true if all items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:LanguageExt.Map.map``3(LanguageExt.Map{``0,``1},System.Func{``1,``2})">
            <summary>
            Atomically maps the map to a new map
            </summary>
            <returns>Mapped items in a new map</returns>
        </member>
        <member name="M:LanguageExt.Map.map``3(LanguageExt.Map{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            Atomically maps the map to a new map
            </summary>
            <returns>Mapped items in a new map</returns>
        </member>
        <member name="M:LanguageExt.Map.filter``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Atomically filter out items that return false when a predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>New map with items filtered</returns>
        </member>
        <member name="M:LanguageExt.Map.filter``2(LanguageExt.Map{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Atomically filter out items that return false when a predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>New map with items filtered</returns>
        </member>
        <member name="M:LanguageExt.Map.choose``2(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.Option{``1}})">
            <summary>
            Equivalent to map and filter but the filtering is done based on whether the returned
            Option is Some or None.  If the item is None then it's filtered out, if not the the
            mapped Some value is used.
            </summary>
            <param name="selector">Predicate</param>
            <returns>Filtered map</returns>
        </member>
        <member name="M:LanguageExt.Map.choose``2(LanguageExt.Map{``0,``1},System.Func{``0,``1,LanguageExt.Option{``1}})">
            <summary>
            Equivalent to map and filter but the filtering is done based on whether the returned
            Option is Some or None.  If the item is None then it's filtered out, if not the the
            mapped Some value is used.
            </summary>
            <param name="selector">Predicate</param>
            <returns>Filtered map</returns>
        </member>
        <member name="M:LanguageExt.Map.length``2(LanguageExt.Map{``0,``1})">
            <summary>
            Number of items in the map
            </summary>
        </member>
        <member name="M:LanguageExt.Map.fold``3(LanguageExt.Map{``1,``2},``0,System.Func{``0,``1,``2,``0})">
            <summary>
            Atomically folds all items in the map (in order) using the folder function provided.
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Map.fold``3(LanguageExt.Map{``1,``2},``0,System.Func{``0,``2,``0})">
            <summary>
            Atomically folds all items in the map (in order) using the folder function provided.
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Map.exists``2(LanguageExt.Map{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Return true if *any* items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:LanguageExt.Map.exists``2(LanguageExt.Map{``0,``1},System.Func{System.Tuple{``0,``1},System.Boolean})">
            <summary>
            Return true if *any* items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:LanguageExt.Map.exists``2(LanguageExt.Map{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
            Return true if *any* items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:LanguageExt.Map.exists``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Return true if *any* items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="T:LanguageExt.Map`2">
            <summary>
            Immutable map
            AVL tree implementation
            AVL tree is a self-balancing binary search tree. 
            http://en.wikipedia.org/wiki/AVL_tree
            </summary>
            <typeparam name="K">Key type</typeparam>
            <typeparam name="V">Value type</typeparam>
        </member>
        <member name="M:LanguageExt.Map`2.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.Map`2.#ctor(LanguageExt.MapItem{`0,`1},System.Boolean)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:LanguageExt.Map`2.Item(`0)">
            <summary>
            'this' accessor
            </summary>
            <param name="key">Key</param>
            <returns>Optional value</returns>
        </member>
        <member name="P:LanguageExt.Map`2.IsEmpty">
            <summary>
            Is the map empty
            </summary>
        </member>
        <member name="P:LanguageExt.Map`2.Count">
            <summary>
            Number of items in the map
            </summary>
        </member>
        <member name="P:LanguageExt.Map`2.Length">
            <summary>
            Alias of Count
            </summary>
        </member>
        <member name="M:LanguageExt.Map`2.Add(`0,`1)">
            <summary>
            Atomically adds a new item to the map
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the key already exists</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TryAdd(`0,`1)">
            <summary>
            Atomically adds a new item to the map.
            If the key already exists, then the new item is ignored
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TryAdd(`0,`1,System.Func{LanguageExt.Map{`0,`1},`1,LanguageExt.Map{`0,`1}})">
            <summary>
            Atomically adds a new item to the map.
            If the key already exists then the Fail handler is called with the unaltered map 
            and the value already set for the key, it expects a new map returned.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <param name="Fail">Delegate to handle failure, you're given the unaltered map 
            and the value already set for the key</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.AddRange(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>
            Atomically adds a range of items to the map.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="range">Range of tuples to add</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if any of the keys already exist</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keys or values are null</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TryAddRange(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>
            Atomically adds a range of items to the map.  If any of the keys exist already
            then they're ignored.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="range">Range of tuples to add</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keys or values are null</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TryAddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Atomically adds a range of items to the map.  If any of the keys exist already
            then they're ignored.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="range">Range of KeyValuePairs to add</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keys or values are null</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.AddOrUpdateRange(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>
            Atomically adds a range of items to the map.  If any of the keys exist already
            then they're replaced.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="range">Range of tuples to add</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keys or values are null</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.AddOrUpdateRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Atomically adds a range of items to the map.  If any of the keys exist already
            then they're replaced.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="range">Range of KeyValuePairs to add</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keys or values are null</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.Remove(`0)">
            <summary>
            Atomically removes an item from the map
            If the key doesn't exists, the request is ignored.
            </summary>
            <param name="key">Key</param>
            <returns>New map with the item removed</returns>
        </member>
        <member name="M:LanguageExt.Map`2.Find(`0)">
            <summary>
            Retrieve a value from the map by key
            </summary>
            <param name="key">Key to find</param>
            <returns>Found value</returns>
        </member>
        <member name="M:LanguageExt.Map`2.Find``1(`0,System.Func{`1,``0},System.Func{``0})">
            <summary>
            Retrieve a value from the map by key and pattern match the
            result.
            </summary>
            <param name="key">Key to find</param>
            <returns>Found value</returns>
        </member>
        <member name="M:LanguageExt.Map`2.SetItem(`0,`1)">
            <summary>
            Atomically updates an existing item
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.SetItem(`0,System.Func{`1,`1})">
            <summary>
            Retrieve a value from the map by key, map it to a new value,
            put it back.
            </summary>
            <param name="key">Key to set</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if the item isn't found</exception>
            <exception cref="T:System.Exception">Throws Exception if Some returns null</exception>
            <returns>New map with the mapped value</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TrySetItem(`0,`1)">
            <summary>
            Atomically updates an existing item, unless it doesn't exist, in which case 
            it is ignored
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the value is null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TrySetItem(`0,System.Func{`1,`1})">
            <summary>
            Atomically sets an item by first retrieving it, applying a map, and then putting it back.
            Silently fails if the value doesn't exist
            </summary>
            <param name="key">Key to set</param>
            <param name="Some">delegate to map the existing value to a new one before setting</param>
            <exception cref="T:System.Exception">Throws Exception if Some returns null</exception>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New map with the item set</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TrySetItem(`0,System.Func{`1,`1},System.Func{LanguageExt.Map{`0,`1},LanguageExt.Map{`0,`1}})">
            <summary>
            Atomically sets an item by first retrieving it, applying a map, and then putting it back.
            Calls the None delegate to return a new map if the item can't be found
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="Some">delegate to map the existing value to a new one before setting</param>
            <param name="None">delegate to return a new map if the item can't be found</param>
            <exception cref="T:System.Exception">Throws Exception if Some returns null</exception>
            <exception cref="T:System.Exception">Throws Exception if None returns null</exception>
            <returns>New map with the item set</returns>
        </member>
        <member name="M:LanguageExt.Map`2.AddOrUpdate(`0,`1)">
            <summary>
            Atomically adds a new item to the map.
            If the key already exists, the new item replaces it.
            </summary>
            <remarks>Null is not allowed for a Key or a Value</remarks>
            <param name="key">Key</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the key or value are null</exception>
            <returns>New Map with the item added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.AddOrUpdate(`0,System.Func{`1,`1},System.Func{`1})">
            <summary>
            Retrieve a value from the map by key, map it to a new value,
            put it back.  If it doesn't exist, add a new one based on None result.
            </summary>
            <param name="key">Key to find</param>
            <exception cref="T:System.Exception">Throws Exception if None returns null</exception>
            <exception cref="T:System.Exception">Throws Exception if Some returns null</exception>
            <returns>New map with the mapped value</returns>
        </member>
        <member name="M:LanguageExt.Map`2.AddOrUpdate(`0,System.Func{`1,`1},`1)">
            <summary>
            Retrieve a value from the map by key, map it to a new value,
            put it back.  If it doesn't exist, add a new one based on None result.
            </summary>
            <param name="key">Key to find</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException if None is null</exception>
            <exception cref="T:System.Exception">Throws Exception if Some returns null</exception>
            <returns>New map with the mapped value</returns>
        </member>
        <member name="M:LanguageExt.Map`2.FindRange(`0,`0)">
            <summary>
            Retrieve a range of values 
            </summary>
            <param name="keyFrom">Range start (inclusive)</param>
            <param name="keyTo">Range to (inclusive)</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException the keyFrom or keyTo are null</exception>
            <returns>Range of values</returns>
        </member>
        <member name="M:LanguageExt.Map`2.Skip(System.Int32)">
            <summary>
            Skips 'amount' values and returns a new tree without the 
            skipped values.
            </summary>
            <param name="amount">Amount to skip</param>
            <returns>New tree</returns>
        </member>
        <member name="M:LanguageExt.Map`2.ContainsKey(`0)">
            <summary>
            Checks for existence of a key in the map
            </summary>
            <param name="key">Key to check</param>
            <returns>True if an item with the key supplied is in the map</returns>
        </member>
        <member name="M:LanguageExt.Map`2.Contains(`0,`1)">
            <summary>
            Checks for existence of a key in the map
            </summary>
            <param name="key">Key to check</param>
            <returns>True if an item with the key supplied is in the map</returns>
        </member>
        <member name="M:LanguageExt.Map`2.Clear">
            <summary>
            Clears all items from the map 
            </summary>
            <remarks>Functionally equivalent to calling Map.empty as the original structure is untouched</remarks>
            <returns>Empty map</returns>
        </member>
        <member name="M:LanguageExt.Map`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Atomically adds a range of items to the map
            </summary>
            <param name="pairs">Range of KeyValuePairs to add</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if any of the keys already exist</exception>
            <returns>New Map with the items added</returns>
        </member>
        <member name="M:LanguageExt.Map`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Atomically sets a series of items using the KeyValuePairs provided
            </summary>
            <param name="items">Items to set</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if any of the keys aren't in the map</exception>
            <returns>New map with the items set</returns>
        </member>
        <member name="M:LanguageExt.Map`2.SetItems(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>
            Atomically sets a series of items using the Tuples provided.
            </summary>
            <param name="items">Items to set</param>
            <exception cref="T:System.ArgumentException">Throws ArgumentException if any of the keys aren't in the map</exception>
            <returns>New map with the items set</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TrySetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Atomically sets a series of items using the KeyValuePairs provided.  If any of the 
            items don't exist then they're silently ignored.
            </summary>
            <param name="items">Items to set</param>
            <returns>New map with the items set</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TrySetItems(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
            <summary>
            Atomically sets a series of items using the Tuples provided  If any of the 
            items don't exist then they're silently ignored.
            </summary>
            <param name="items">Items to set</param>
            <returns>New map with the items set</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TrySetItems(System.Collections.Generic.IEnumerable{`0},System.Func{`1,`1})">
            <summary>
            Atomically sets a series of items using the keys provided to find the items
            and the Some delegate maps to a new value.  If the items don't exist then
            they're silently ignored.
            </summary>
            <param name="keys">Keys of items to set</param>
            <param name="Some">Function map the existing item to a new one</param>
            <returns>New map with the items set</returns>
        </member>
        <member name="M:LanguageExt.Map`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Atomically removes a set of keys from the map
            </summary>
            <param name="keys">Keys to remove</param>
            <returns>New map with the items removed</returns>
        </member>
        <member name="M:LanguageExt.Map`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Returns true if a Key/Value pair exists in the map
            </summary>
            <param name="pair">Pair to find</param>
            <returns>True if exists, false otherwise</returns>
        </member>
        <member name="M:LanguageExt.Map`2.TryGetValue(`0,`1@)">
            <summary>
            TryGetValue
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:LanguageExt.Map`2.Keys">
            <summary>
            Enumerable of map keys
            </summary>
        </member>
        <member name="P:LanguageExt.Map`2.Values">
            <summary>
            Enumerable of map values
            </summary>
        </member>
        <member name="M:LanguageExt.Map`2.ToDictionary">
            <summary>
            Convert the map to an IDictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:LanguageExt.Map`2.ToDictionary``2(System.Func{LanguageExt.IMapItem{`0,`1},``0},System.Func{LanguageExt.IMapItem{`0,`1},``1})">
            <summary>
            Map the map the a dictionary
            </summary>
        </member>
        <member name="P:LanguageExt.Map`2.Tuples">
            <summary>
            Enumerable of in-order tuples that make up the map
            </summary>
            <returns>Tuples</returns>
        </member>
        <member name="M:LanguageExt.Map`2.GetEnumerator">
            <summary>
            GetEnumerator - IEnumerable interface
            </summary>
        </member>
        <member name="M:LanguageExt.Map`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            GetEnumerator - IEnumerable interface
            </summary>
        </member>
        <member name="M:LanguageExt.MapItem`2.#ctor(System.Byte,System.Int32,`0,`1,LanguageExt.MapItem{`0,`1},LanguageExt.MapItem{`0,`1})">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.MapModule.FindRange``2(LanguageExt.MapItem{``0,``1},``0,``0,System.Collections.Generic.Comparer{``0})">
            <summary>
            TODO: I suspect this is suboptimal, it would be better with a customer Enumerator 
            that maintains a stack of nodes to retrace.
            </summary>
        </member>
        <member name="T:LanguageExt.MemoEnumerable`1">
            <summary>
            Enumerable memoization.  As an enumerable is enumerated each item is retained
            in an internal list, so that future evalation of the enumerable isn't done. 
            Only items not seen before are evaluated.  
            
            This minimises one of the major problems with the IEnumerable / yield return 
            pattern by causing at-most-once evaluation of each item.  
            
            Use the IEnumerable extension method Memo for convenience.
            </summary>
            <remarks>
            Although this allows efficient lazy evaluation, it does come at a memory cost.
            Each item is cached internally, so this method doesn't allow for evaluation of
            infinite sequences.
            </remarks>
        </member>
        <member name="T:LanguageExt.ObservableExt">
            <summary>
            Observable extensions
            </summary>
        </member>
        <member name="M:LanguageExt.ObservableExt.PostSubscribe``1(System.IObservable{``0},System.Action)">
            <summary>
            Executes an action post-subscription.  This is useful when the action is 
            going to publish to the observable.  A kind of request/response.
            </summary>
        </member>
        <member name="M:LanguageExt.ObservableExt.PostSubscribe``1(System.IObservable{``0},System.Func{LanguageExt.Unit})">
            <summary>
            Executes an action post-subscription.  This is useful when the action is 
            going to publish to the observable.  A kind of request/response.
            </summary>
        </member>
        <member name="T:LanguageExt.Option`1">
            <summary>
            Option T can be in two states:
                1. Some(x) -- which means there is a value stored inside
                2. None    -- which means there's no value stored inside
            To extract the value you must use the 'match' function.
            </summary>
        </member>
        <member name="M:LanguageExt.Option`1.Some(`0)">
            <summary>
            Option Some(x) constructor
            </summary>
            <param name="value">Value</param>
            <returns>Some(value) as Option T</returns>
        </member>
        <member name="F:LanguageExt.Option`1.None">
            <summary>
            Option None of T
            </summary>
        </member>
        <member name="P:LanguageExt.Option`1.IsSome">
            <summary>
            true if the Option is in a Some(x) state
            </summary>
        </member>
        <member name="P:LanguageExt.Option`1.IsNone">
            <summary>
            true if the Option is in a None state
            </summary>
        </member>
        <member name="M:LanguageExt.Option`1.Match``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            Match the two states of the Option and return a non-null R.
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler.  Must not return null.</param>
            <param name="None">None handler.  Must not return null.</param>
            <returns>A non-null R</returns>
        </member>
        <member name="M:LanguageExt.Option`1.MatchUnsafe``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            Match the two states of the Option and return an R, which can be null.
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler.  May return null.</param>
            <param name="None">None handler.  May return null.</param>
            <returns>R, or null</returns>
        </member>
        <member name="M:LanguageExt.Option`1.MatchAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Func{``0})">
            <summary>
            Match the two states of the Option and return a promise for a non-null R.
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler.  Must not return null.</param>
            <param name="None">None handler.  Must not return null.</param>
            <returns>A promise to return a non-null R</returns>
        </member>
        <member name="M:LanguageExt.Option`1.MatchAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Match the two states of the Option and return a promise for a non-null R.
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler.  Must not return null.</param>
            <param name="None">None handler.  Must not return null.</param>
            <returns>A promise to return a non-null R</returns>
        </member>
        <member name="M:LanguageExt.Option`1.MatchObservable``1(System.Func{`0,System.IObservable{``0}},System.Func{``0})">
            <summary>
            Match the two states of the Option and return an observable stream of non-null Rs.
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler.  Must not return null.</param>
            <param name="None">None handler.  Must not return null.</param>
            <returns>A stream of non-null Rs</returns>
        </member>
        <member name="M:LanguageExt.Option`1.MatchObservable``1(System.Func{`0,System.IObservable{``0}},System.Func{System.IObservable{``0}})">
            <summary>
            Match the two states of the Option and return an observable stream of non-null Rs.
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler.  Must not return null.</param>
            <param name="None">None handler.  Must not return null.</param>
            <returns>A stream of non-null Rs</returns>
        </member>
        <member name="M:LanguageExt.Option`1.MatchUntyped``1(System.Func{System.Object,``0},System.Func{``0})">
            <summary>
            Match the two states of the Option and return an R, or null.
            </summary>
            <param name="Some">Some handler.  May return null.</param>
            <param name="None">None handler.  May return null.</param>
            <returns>An R, or null</returns>
        </member>
        <member name="M:LanguageExt.Option`1.Match(System.Action{`0},System.Action)">
            <summary>
            Match the two states of the Option T
            </summary>
            <param name="Some">Some match</param>
            <param name="None">None match</param>
            <returns></returns>
        </member>
        <member name="M:LanguageExt.Option`1.IfSome(System.Action{`0})">
            <summary>
            Invokes the someHandler if Option is in the Some state, otherwise nothing
            happens.
            </summary>
        </member>
        <member name="M:LanguageExt.Option`1.IfSome(System.Func{`0,LanguageExt.Unit})">
            <summary>
            Invokes the someHandler if Option is in the Some state, otherwise nothing
            happens.
            </summary>
        </member>
        <member name="M:LanguageExt.Option`1.op_Addition(LanguageExt.Option{`0},LanguageExt.Option{`0})">
            <summary>
            Append the Some(x) of one option to the Some(y) of another.
            For numeric values the behaviour is to sum the Somes (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the T type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.Option`1.Append(LanguageExt.Option{`0})">
            <summary>
            Append the Some(x) of one option to the Some(y) of another.
            For numeric values the behaviour is to sum the Somes (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the T type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.Option`1.op_Subtraction(LanguageExt.Option{`0},LanguageExt.Option{`0})">
            <summary>
            Subtract the Some(x) of one option from the Some(y) of another.  If either of the
            options are None then the result is None
            For numeric values the behaviour is to find the difference between the Somes (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the T type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.Option`1.Subtract(LanguageExt.Option{`0})">
            <summary>
            Subtract the Some(x) of one option from the Some(y) of another.
            For numeric values the behaviour is to find the difference between the Somes (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the T type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.Option`1.op_Multiply(LanguageExt.Option{`0},LanguageExt.Option{`0})">
            <summary>
            Find the product of the Somes.
            For numeric values the behaviour is to multiply the Somes (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the T type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.Option`1.Multiply(LanguageExt.Option{`0})">
            <summary>
            Find the product of the Somes.
            For numeric values the behaviour is to multiply the Somes (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the T type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.Option`1.op_Division(LanguageExt.Option{`0},LanguageExt.Option{`0})">
            <summary>
            Divide the Somes.
            For numeric values the behaviour is to divide the Somes (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the T type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.Option`1.Divide(LanguageExt.Option{`0})">
            <summary>
            Divide the Somes.
            For numeric values the behaviour is to divide the Somes (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the T type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="T:LanguageExt.OptionUnsafe`1">
            <summary>
            OptionUnsafe T can be in two states:
                1. Some(x) -- which means there is a value stored inside
                2. None    -- which means there's no value stored inside
            To extract the value you must use the 'matchUnsafe' function.
            This differs from Option T  in that it allows Some(null) which
            is expressly forbidden for Option T.  That is what makes this
            type 'unsafe'.  
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.MatchAsyncUnsafe``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Func{``0})">
            <summary>
            Match the two states of the Option
            The Some can return a Task R and the None an R.  The result is wrapped in a Task R
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler</param>
            <param name="None">None handler</param>
            <returns>A promise to return an R</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.MatchAsyncUnsafe``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Match the two states of the Option
            The Some and None can return a Task R and the None an R
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler</param>
            <param name="None">None handler</param>
            <returns>A promise to return an R</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.MatchObservableUnsafe``1(System.Func{`0,System.IObservable{``0}},System.Func{``0})">
            <summary>
            Match the two states of the Option
            The Some can return an IObservable R and the None an R.  The result is wrapped in an IObservable R
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler</param>
            <param name="None">None handler</param>
            <returns>A promise to return an stream of Rs</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.MatchObservableUnsafe``1(System.Func{`0,System.IObservable{``0}},System.Func{System.IObservable{``0}})">
            <summary>
            Match the two states of the Option
            The Some and None can return an IObservable R
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler</param>
            <param name="None">None handler</param>
            <returns>A promise to return an stream of Rs</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.IfSomeUnsafe(System.Func{`0,LanguageExt.Unit})">
            <summary>
            Invokes the someHandler if OptionUnsafe is in the Some state, otherwise nothing
            happens.
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.IfSomeUnsafe(System.Action{`0})">
            <summary>
            Invokes the someHandler if OptionUnsafe is in the Some state, otherwise nothing
            happens.
            </summary>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.op_Addition(LanguageExt.OptionUnsafe{`0},LanguageExt.OptionUnsafe{`0})">
            <summary>
            Append the Some(x) of one option to the Some(y) of another.
            For numeric values the behaviour is to sum the Somes (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the T type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.Append(LanguageExt.OptionUnsafe{`0})">
            <summary>
            Append the Some(x) of one option to the Some(y) of another.
            For numeric values the behaviour is to sum the Somes (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the T type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.op_Subtraction(LanguageExt.OptionUnsafe{`0},LanguageExt.OptionUnsafe{`0})">
            <summary>
            Subtract the Some(x) of one option from the Some(y) of another.
            For numeric values the behaviour is to find the difference between the Somes (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the T type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.Subtract(LanguageExt.OptionUnsafe{`0})">
            <summary>
            Subtract the Some(x) of one option from the Some(y) of another.
            For numeric values the behaviour is to find the difference between the Somes (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the T type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.op_Multiply(LanguageExt.OptionUnsafe{`0},LanguageExt.OptionUnsafe{`0})">
            <summary>
            Find the product of the Somes.
            For numeric values the behaviour is to multiply the Somes (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the T type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.Multiply(LanguageExt.OptionUnsafe{`0})">
            <summary>
            Find the product of the Somes.
            For numeric values the behaviour is to multiply the Somes (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the T type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.op_Division(LanguageExt.OptionUnsafe{`0},LanguageExt.OptionUnsafe{`0})">
            <summary>
            Divide the Somes.
            For numeric values the behaviour is to divide the Somes (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the T type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.OptionUnsafe`1.Divide(LanguageExt.OptionUnsafe{`0})">
            <summary>
            Divide the Somes.
            For numeric values the behaviour is to divide the Somes (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the T type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:LanguageExt.Queue.fold``2(LanguageExt.Que{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds each value of the QueT into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="queue">Queue to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:LanguageExt.Queue.foldBack``2(LanguageExt.Que{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds each value of the QueT into an S, but in reverse order.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="queue">Queue to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="T:LanguageExt.IntegerRange">
            <summary>
            Represents a range of integers lazily.
            </summary>
        </member>
        <member name="P:LanguageExt.IntegerRange.From">
            <summary>
            First integer in the range
            </summary>
        </member>
        <member name="P:LanguageExt.IntegerRange.Count">
            <summary>
            Count of integers in the range
            </summary>
        </member>
        <member name="P:LanguageExt.IntegerRange.Step">
            <summary>
            Step size between integers
            </summary>
        </member>
        <member name="T:LanguageExt.CharRange">
            <summary>
            Represents a range of chars lazily.
            </summary>
        </member>
        <member name="P:LanguageExt.CharRange.From">
            <summary>
            First char in the range
            </summary>
        </member>
        <member name="P:LanguageExt.CharRange.To">
            <summary>
            Last (and inclusive) in the range
            </summary>
        </member>
        <member name="T:LanguageExt.Reader`2">
            <summary>
            The reader monad
            Allows for an 'environment' value to be carried through bind functions
            </summary>
            <typeparam name="Env">Environment</typeparam>
            <typeparam name="T">The wrapped type</typeparam>
        </member>
        <member name="T:LanguageExt.ReaderResult`1">
            <summary>
            State result.
            </summary>
        </member>
        <member name="T:LanguageExt.ReaderExt">
            <summary>
            Reader monad extensions
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderExt.Select``3(LanguageExt.Reader{``0,``1},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderExt.SelectMany``4(LanguageExt.Reader{``0,``1},System.Func{``1,LanguageExt.Reader{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            Select Many
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderExt.SelectMany``5(LanguageExt.Reader{``0,``2},System.Func{``2,LanguageExt.Writer{``1,``3}},System.Func{``2,``3,``4})">
            <summary>
            Select Many
            </summary>
        </member>
        <member name="M:LanguageExt.ReaderExt.SelectMany``5(LanguageExt.Reader{``0,``2},System.Func{``2,LanguageExt.State{``1,``3}},System.Func{``2,``3,``4})">
            <summary>
            Select Many
            </summary>
        </member>
        <member name="T:LanguageExt.Rws`4">
            <summary>
            Reader Writer State monad
            </summary>
            <typeparam name="R">Reader type</typeparam>
            <typeparam name="W">Writer type</typeparam>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Wrapped type</typeparam>
        </member>
        <member name="T:LanguageExt.RwsResult`3">
            <summary>
            RWS result.
            </summary>
        </member>
        <member name="T:LanguageExt.Set">
            <summary>
            Immutable set module
            AVL tree implementation
            AVL tree is a self-balancing binary search tree. 
            http://en.wikipedia.org/wiki/AVL_tree
            </summary>
        </member>
        <member name="M:LanguageExt.Set.isEmpty``1(LanguageExt.Set{``0})">
            <summary>
            True if the set has no elements
            </summary>
            <typeparam name="T">Element type</typeparam>
            <returns>True if the set has no elements</returns>
        </member>
        <member name="M:LanguageExt.Set.create``1">
            <summary>
            Create a new empty set
            </summary>
            <typeparam name="T">Element type</typeparam>
            <returns>Empty set</returns>
        </member>
        <member name="M:LanguageExt.Set.createRange``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a new set pre-populated with the items in range
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="range">Range of items</param>
            <returns>Set</returns>
        </member>
        <member name="M:LanguageExt.Set.empty``1">
            <summary>
            Create a new empty set
            </summary>
            <typeparam name="T">Element type</typeparam>
            <returns>Empty set</returns>
        </member>
        <member name="M:LanguageExt.Set.add``1(LanguageExt.Set{``0},``0)">
            <summary>
            Add an item to the set
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="set">Set to add item to</param>
            <param name="value">Value to add to the set</param>
            <returns>New set with the item added</returns>
        </member>
        <member name="M:LanguageExt.Set.tryAdd``1(LanguageExt.Set{``0},``0)">
            <summary>
            Attempt to add an item to the set.  If an item already
            exists then return the Set as-is.
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="set">Set to add item to</param>
            <param name="value">Value to add to the set</param>
            <returns>New set with the item maybe added</returns>
        </member>
        <member name="M:LanguageExt.Set.addOrUpdate``1(LanguageExt.Set{``0},``0)">
            <summary>
            Add an item to the set.  If an item already
            exists then replace it.
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="set">Set to add item to</param>
            <param name="value">Value to add to the set</param>
            <returns>New set with the item maybe added</returns>
        </member>
        <member name="M:LanguageExt.Set.find``1(LanguageExt.Set{``0},``0)">
            <summary>
            Attempts to find an item in the set.  
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="set">Set</param>
            <param name="value">Value to find</param>
            <returns>Some(T) if found, None otherwise</returns>
        </member>
        <member name="M:LanguageExt.Set.exists``1(LanguageExt.Set{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check the existence of an item in the set using a 
            predicate.
            </summary>
            <remarks>Note this scans the entire set.</remarks>
            <typeparam name="T">Element type</typeparam>
            <param name="set">Set</param>
            <param name="pred">Predicate</param>
            <returns>True if predicate returns true for any item</returns>
        </member>
        <member name="M:LanguageExt.Set.equals``1(LanguageExt.Set{``0},LanguageExt.Set{``0})">
            <summary>
            Returns true if both sets contain the same elements
            </summary>
        </member>
        <member name="M:LanguageExt.Set.length``1(LanguageExt.Set{``0})">
            <summary>
            Get the number of elements in the set
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="set">Set</param>
            <returns>Number of elements</returns>
        </member>
        <member name="M:LanguageExt.Set.difference``1(LanguageExt.Set{``0},LanguageExt.Set{``0})">
            <summary>
            Returns setA - setB.  Only the items in setA that are not in 
            setB will be returned.
            </summary>
        </member>
        <member name="M:LanguageExt.Set.union``1(LanguageExt.Set{``0},LanguageExt.Set{``0})">
            <summary>
            Finds the union of two sets and produces a new set with 
            the results
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="setA">Set A</param>
            <param name="setB">Set A</param>
            <returns>A set which contains all items from both sets</returns>
        </member>
        <member name="M:LanguageExt.Set.filter``1(LanguageExt.Set{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters items from the set using the predicate.  If the predicate
            returns True for any item then it remains in the set, otherwise
            it's dropped.
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="set">Set</param>
            <param name="pred">Predicate</param>
            <returns>Filtered enumerable</returns>
        </member>
        <member name="M:LanguageExt.Set.fold``2(LanguageExt.Set{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the set. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result. (Aggregate in LINQ)
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Set element type</typeparam>
            <param name="set">Set to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Set.foldBack``2(LanguageExt.Set{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an aggregate state through the computation. The fold function takes the state 
            argument, and applies the function 'folder' to it and the first element of the set. Then, 
            it feeds this result into the function 'folder' along with the second element, and so on. It 
            returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Set element type</typeparam>
            <param name="set">Set to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Set.intersect``1(LanguageExt.Set{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the elements that are in both setA and setB
            </summary>
        </member>
        <member name="M:LanguageExt.Set.except``1(LanguageExt.Set{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the elements that are in both setA and setB
            </summary>
        </member>
        <member name="M:LanguageExt.Set.symmetricExcept``1(LanguageExt.Set{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Only items that are in one set or the other will be returned.
            If an item is in both, it is dropped.
            </summary>
        </member>
        <member name="M:LanguageExt.Set.map``2(LanguageExt.Set{``0},System.Func{``0,``1})">
            <summary>
            Maps the values of this set into a new set of values using the
            mapper function to tranform the source values.
            </summary>
            <typeparam name="T">Element type</typeparam>
            <typeparam name="R">Mapped element type</typeparam>
            <param name="set">Set</param>
            <param name="mapper">Mapping function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:LanguageExt.Set.contains``1(LanguageExt.Set{``0},``0)">
            <summary>
            Returns True if the value is in the set
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="set">Set</param>
            <param name="value">Value to check</param>
            <returns>True if the item 'value' is in the Set 'set'</returns>
        </member>
        <member name="M:LanguageExt.Set.remove``1(LanguageExt.Set{``0},``0)">
            <summary>
            Removes an item from the set (if it exists)
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="set">Set</param>
            <param name="value">Value to check</param>
            <returns>New set with item removed</returns>
        </member>
        <member name="M:LanguageExt.Set.isSubset``1(LanguageExt.Set{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns True if setB is a subset of setA
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="setA">Set A</param>
            <param name="setB">Set B</param>
            <returns>True is setB is a subset of setA</returns>
        </member>
        <member name="M:LanguageExt.Set.isSuperset``1(LanguageExt.Set{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns True if setB is a superset of setA
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="setA">Set A</param>
            <param name="setB">Set B</param>
            <returns>True is setB is a superset of setA</returns>
        </member>
        <member name="M:LanguageExt.Set.isProperSubset``1(LanguageExt.Set{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns True if setB is a proper subset of setA
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="setA">Set A</param>
            <param name="setB">Set B</param>
            <returns>True is setB is a proper subset of setA</returns>
        </member>
        <member name="M:LanguageExt.Set.isProperSuperset``1(LanguageExt.Set{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns True if setB is a proper superset of setA
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="setA">Set A</param>
            <param name="setB">Set B</param>
            <returns>True is setB is a proper subset of setA</returns>
        </member>
        <member name="M:LanguageExt.Set.overlaps``1(LanguageExt.Set{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns True if setA overlaps setB
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="setA">Set A</param>
            <param name="setB">Set B</param>
            <returns>True if setA overlaps setB</returns>
        </member>
        <member name="T:LanguageExt.Set`1">
            <summary>
            Immutable set
            AVL tree implementation
            AVL tree is a self-balancing binary search tree. 
            http://en.wikipedia.org/wiki/AVL_tree
            </summary>
            <typeparam name="T">List item type</typeparam>
        </member>
        <member name="M:LanguageExt.Set`1.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:LanguageExt.Set`1.#ctor(LanguageExt.SetItem{`0})">
            <summary>
            Ctor that takes a root element
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:LanguageExt.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Ctor that takes an initial (distinct) set of items
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:LanguageExt.Set`1.Count">
            <summary>
            Number of items in the set
            </summary>
        </member>
        <member name="M:LanguageExt.Set`1.Add(`0)">
            <summary>
            Add an item to the set
            </summary>
            <param name="value">Value to add to the set</param>
            <returns>New set with the item added</returns>
        </member>
        <member name="M:LanguageExt.Set`1.TryAdd(`0)">
            <summary>
            Attempt to add an item to the set.  If an item already
            exists then return the Set as-is.
            </summary>
            <param name="value">Value to add to the set</param>
            <returns>New set with the item maybe added</returns>
        </member>
        <member name="M:LanguageExt.Set`1.AddOrUpdate(`0)">
            <summary>
            Add an item to the set.  If an item already
            exists then replace it.
            </summary>
            <param name="value">Value to add to the set</param>
            <returns>New set with the item maybe added</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Compare(LanguageExt.Set{`0})">
            <summary>
            Returns true if both sets contain the same elements
            </summary>
        </member>
        <member name="M:LanguageExt.Set`1.Length">
            <summary>
            Get the number of elements in the set
            </summary>
            <returns>Number of elements</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Difference(LanguageExt.Set{`0})">
            <summary>
            Returns this - setB.  Only the items in this that are not in 
            setB will be returned.
            </summary>
        </member>
        <member name="M:LanguageExt.Set`1.Find(`0)">
            <summary>
            Attempts to find an item in the set.  
            </summary>
            <param name="value">Value to find</param>
            <returns>Some(T) if found, None otherwise</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns the elements that are in both this and other
            </summary>
        </member>
        <member name="M:LanguageExt.Set`1.Except(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns this - other.  Only the items in this that are not in 
            other will be returned.
            </summary>
        </member>
        <member name="M:LanguageExt.Set`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Only items that are in one set or the other will be returned.
            If an item is in both, it is dropped.
            </summary>
        </member>
        <member name="M:LanguageExt.Set`1.Union(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Finds the union of two sets and produces a new set with 
            the results
            </summary>
            <param name="other">Other set to union with</param>
            <returns>A set which contains all items from both sets</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Clear">
            <summary>
            Clears the set
            </summary>
            <returns>An empty set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns>IEnumerator T</returns>
        </member>
        <member name="M:LanguageExt.Set`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Remove(`0)">
            <summary>
            Removes an item from the set (if it exists)
            </summary>
            <param name="value">Value to check</param>
            <returns>New set with item removed</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Fold``1(``0,System.Func{``0,`0,``0})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the set. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result. (Aggregate in LINQ)
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Set`1.FoldBack``1(``0,System.Func{``0,`0,``0})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an aggregate state through the computation. The fold function takes the state 
            argument, and applies the function 'folder' to it and the first element of the set. Then, 
            it feeds this result into the function 'folder' along with the second element, and so on. It 
            returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Map``1(System.Func{`0,``0})">
            <summary>
            Maps the values of this set into a new set of values using the
            mapper function to tranform the source values.
            </summary>
            <typeparam name="R">Mapped element type</typeparam>
            <param name="mapper">Mapping function</param>
            <returns>Mapped Set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Filter(System.Func{`0,System.Boolean})">
            <summary>
            Filters items from the set using the predicate.  If the predicate
            returns True for any item then it remains in the set, otherwise
            it's dropped.
            </summary>
            <param name="pred">Predicate</param>
            <returns>Filtered enumerable</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Exists(System.Func{`0,System.Boolean})">
            <summary>
            Check the existence of an item in the set using a 
            predicate.
            </summary>
            <remarks>Note this scans the entire set.</remarks>
            <param name="pred">Predicate</param>
            <returns>True if predicate returns true for any item</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Contains(`0)">
            <summary>
            Returns True if the value is in the set
            </summary>
            <param name="value">Value to check</param>
            <returns>True if the item 'value' is in the Set 'set'</returns>
        </member>
        <member name="M:LanguageExt.Set`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns true if both sets contain the same elements
            </summary>
            <param name="other">Other distinct set to compare</param>
            <returns>True if the sets are equal</returns>
        </member>
        <member name="P:LanguageExt.Set`1.IsEmpty">
            <summary>
            True if the set has no elements
            </summary>
        </member>
        <member name="P:LanguageExt.Set`1.IsReadOnly">
            <summary>
            IsReadOnly - Always true
            </summary>
        </member>
        <member name="P:LanguageExt.Set`1.SyncRoot">
            <summary>
            Syncronisation root
            </summary>
        </member>
        <member name="P:LanguageExt.Set`1.IsSynchronized">
            <summary>
            IsSynchronized - Always true
            </summary>
        </member>
        <member name="M:LanguageExt.Set`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns True if 'other' is a proper subset of this set
            </summary>
            <returns>True if 'other' is a proper subset of this set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns True if 'other' is a proper superset of this set
            </summary>
            <returns>True if 'other' is a proper superset of this set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns True if 'other' is a superset of this set
            </summary>
            <returns>True if 'other' is a superset of this set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns True if 'other' is a superset of this set
            </summary>
            <returns>True if 'other' is a superset of this set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns True if other overlaps this set
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="setA">Set A</param>
            <param name="setB">Set B</param>
            <returns>True if other overlaps this set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy the items from the set into the specified array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="index">Index into the array to start</param>
        </member>
        <member name="M:LanguageExt.Set`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the items from the set into the specified array
            </summary>
            <param name="array">Array to copy to</param>
            <param name="index">Index into the array to start</param>
        </member>
        <member name="M:LanguageExt.Set`1.op_Addition(LanguageExt.Set{`0},LanguageExt.Set{`0})">
            <summary>
            Add operator - performs a union of the two sets
            </summary>
            <param name="lhs">Left hand side set</param>
            <param name="rhs">Right hand side set</param>
            <returns>Unioned set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Append(LanguageExt.Set{`0})">
            <summary>
            Add operator - performs a union of the two sets
            </summary>
            <param name="rhs">Right hand side set</param>
            <returns>Unioned set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.op_Subtraction(LanguageExt.Set{`0},LanguageExt.Set{`0})">
            <summary>
            Subtract operator - performs a difference of the two sets
            </summary>
            <param name="lhs">Left hand side set</param>
            <param name="rhs">Right hand side set</param>
            <returns>Differenced set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Subtract(LanguageExt.Set{`0})">
            <summary>
            Subtract operator - performs a difference of the two sets
            </summary>
            <param name="rhs">Right hand side set</param>
            <returns>Differenced set</returns>
        </member>
        <member name="M:LanguageExt.Set`1.op_Multiply(LanguageExt.Set{`0},LanguageExt.Set{`0})">
            <summary>
            Multiply operator - runs through every combination of
            items in the two sets and performs a multiply operation on
            them; and then puts the result in a new distinct set.
            </summary>
            <param name="lhs">Left hand side set</param>
            <param name="rhs">Right hand side set</param>
            <returns>Product of the two sets</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Multiply(LanguageExt.Set{`0})">
            <summary>
            Multiply operator - runs through every combination of
            items in the two sets and performs a multiply operation on
            them; and then puts the result in a new distinct set.
            </summary>
            <param name="rhs">Right hand side set</param>
            <returns>Product of the two sets</returns>
        </member>
        <member name="M:LanguageExt.Set`1.op_Division(LanguageExt.Set{`0},LanguageExt.Set{`0})">
            <summary>
            Divide operator - runs through every combination of
            items in the two sets and performs a divide operation on
            them; and then puts the result in a new distinct set.
            </summary>
            <param name="lhs">Left hand side set</param>
            <param name="rhs">Right hand side set</param>
            <returns>Result of the division of the two sets</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Divide(LanguageExt.Set{`0})">
            <summary>
            Divide operator - runs through every combination of
            items in the two sets and performs a divide operation on
            them; and then puts the result in a new distinct set.
            </summary>
            <param name="rhs">Right hand side set</param>
            <returns>Result of the division of the two sets</returns>
        </member>
        <member name="M:LanguageExt.Set`1.Equals(LanguageExt.Set{`0})">
            <summary>
            Equality test
            </summary>
            <param name="other">Other set to test</param>
            <returns>True if sets are equal</returns>
        </member>
        <member name="M:LanguageExt.SetItem`1.#ctor(System.Byte,System.Int32,`0,LanguageExt.SetItem{`0},LanguageExt.SetItem{`0})">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:LanguageExt.SetModule.FindRange``1(LanguageExt.SetItem{``0},``0,``0,System.Collections.Generic.Comparer{``0})">
            <summary>
            TODO: I suspect this is suboptimal, it would be better with a custom Enumerator 
            that maintains a stack of nodes to retrace.
            </summary>
        </member>
        <member name="T:LanguageExt.SomeHelp.SomeExt">
            <summary>
            Extension method for Some T to help with the lack of covariance of generic
            parameters in structs (and therefore Some T)
            </summary>
        </member>
        <member name="M:LanguageExt.SomeHelp.SomeExt.ToSome``1(``0)">
            <summary>
            Convert value to Some T.  Helps with the lack of covariance of generic
            parameters in structs (and therefore Some T)
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="value">Value</param>
            <returns>Value wrapped in a Some T</returns>
        </member>
        <member name="T:LanguageExt.Stack">
            <summary>
            Functional module for working with the Stck T type
            </summary>
        </member>
        <member name="M:LanguageExt.Stack.rev``1(LanguageExt.Stck{``0})">
            <summary>
            Reverses the order of the items in the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:LanguageExt.Stack.isEmpty``1(LanguageExt.Stck{``0})">
            <summary>
            True if the stack is empty
            </summary>
        </member>
        <member name="M:LanguageExt.Stack.clear``1(LanguageExt.Stck{``0})">
            <summary>
            Clear the stack (returns Empty)
            </summary>
            <returns>Stck.Empty of T</returns>
        </member>
        <member name="M:LanguageExt.Stack.peek``1(LanguageExt.Stck{``0})">
            <summary>
            Return the item on the top of the stack without affecting the stack itself
            NOTE: Will throw an InvalidOperationException if the stack is empty
            </summary>
            <exception cref="T:System.InvalidOperationException">Stack is empty</exception>
            <returns>Top item value</returns>
        </member>
        <member name="M:LanguageExt.Stack.peek``1(LanguageExt.Stck{``0},System.Action{``0},System.Action)">
            <summary>
            Peek and match
            </summary>
            <param name="Some">Handler if there is a value on the top of the stack</param>
            <param name="None">Handler if the stack is empty</param>
            <returns>Untouched stack</returns>
        </member>
        <member name="M:LanguageExt.Stack.peek``2(LanguageExt.Stck{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Peek and match
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Handler if there is a value on the top of the stack</param>
            <param name="None">Handler if the stack is empty</param>
            <returns>Return value from Some or None</returns>
        </member>
        <member name="M:LanguageExt.Stack.trypeek``1(LanguageExt.Stck{``0})">
            <summary>
            Safely return the item on the top of the stack without affecting the stack itself
            </summary>
            <returns>Returns the top item value, or None</returns>
        </member>
        <member name="M:LanguageExt.Stack.pop``1(LanguageExt.Stck{``0})">
            <summary>
            Pop an item off the top of the stack
            NOTE: Will throw an InvalidOperationException if the stack is empty
            </summary>
            <exception cref="T:System.InvalidOperationException">Stack is empty</exception>
            <returns>Stack with the top item popped</returns>
        </member>
        <member name="M:LanguageExt.Stack.trypop``1(LanguageExt.Stck{``0})">
            <summary>
            Safe pop
            </summary>
            <returns>Tuple of popped stack and optional top-of-stack value</returns>
        </member>
        <member name="M:LanguageExt.Stack.pop``1(LanguageExt.Stck{``0},System.Action{``0},System.Action)">
            <summary>
            Pop and match
            </summary>
            <param name="Some">Handler if there is a value on the top of the stack</param>
            <param name="None">Handler if the stack is empty</param>
            <returns>Popped stack</returns>
        </member>
        <member name="M:LanguageExt.Stack.pop``2(LanguageExt.Stck{``0},System.Func{LanguageExt.Stck{``0},``0,``1},System.Func{``1})">
            <summary>
            Pop and match
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Handler if there is a value on the top of the stack</param>
            <param name="None">Handler if the stack is empty</param>
            <returns>Return value from Some or None</returns>
        </member>
        <member name="M:LanguageExt.Stack.push``1(LanguageExt.Stck{``0},``0)">
            <summary>
            Push an item onto the stack
            </summary>
            <param name="value">Item to push</param>
            <returns>New stack with the pushed item on top</returns>
        </member>
        <member name="M:LanguageExt.Stack.map``2(LanguageExt.Stck{``0},System.Func{``0,``1})">
            <summary>
            Projects the values in the stack using a map function into a new enumerable (Select in LINQ).
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="stack">Stack to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:LanguageExt.Stack.map``2(LanguageExt.Stck{``0},System.Func{System.Int32,``0,``1})">
            <summary>
            Projects the values in the stack using a map function into a new enumerable (Select in LINQ).
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="stack">Stack to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:LanguageExt.Stack.filter``1(LanguageExt.Stck{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes items from the stack that do not match the given predicate (Where in LINQ)
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to filter</param>
            <param name="predicate">Predicate function</param>
            <returns>Filtered stack</returns>
        </member>
        <member name="M:LanguageExt.Stack.choose``1(LanguageExt.Stck{``0},System.Func{``0,LanguageExt.Option{``0}})">
            <summary>
            Applies the given function 'selector' to each element of the stack. Returns an enumerable comprised of 
            the results for each element where the function returns Some(f(x)).
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="selector">Selector function</param>
            <returns>Mapped and filtered enumerable</returns>
        </member>
        <member name="M:LanguageExt.Stack.choose``1(LanguageExt.Stck{``0},System.Func{System.Int32,``0,LanguageExt.Option{``0}})">
            <summary>
            Applies the given function 'selector' to each element of the stack. Returns an enumerable comprised of 
            the results for each element where the function returns Some(f(x)).
            An index value is passed through to the selector function also.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="selector">Selector function</param>
            <returns>Mapped and filtered enumerable</returns>
        </member>
        <member name="M:LanguageExt.Stack.collect``2(LanguageExt.Stck{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            For each element of the stack, applies the given function. Concatenates all the results and 
            returns the combined list.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="stack">Stack to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:LanguageExt.Stack.append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Append another stack to the top of this stack
            The rhs will be reversed and pushed onto 'this' stack.  That will
            maintain the order of the items in the resulting stack.  So the top
            of 'rhs' will be the top of the newly created stack.  'this' stack
            will be under the 'rhs' stack.
            </summary>
            <param name="rhs">Stack to append</param>
            <returns>Appended stacks</returns>
        </member>
        <member name="M:LanguageExt.Stack.fold``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the stack. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result. (Aggregate in LINQ)
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Stack.foldBack``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an aggregate state through the computation. The fold function takes the state 
            argument, and applies the function 'folder' to it and the first element of the stack. Then, 
            it feeds this result into the function 'folder' along with the second element, and so on. It 
            returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Stack.foldWhile``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection whilst the predicate function 
            returns true for the item being processed, threading an aggregate state through the 
            computation. The fold function takes the state argument, and applies the function 'folder' 
            to it and the first element of the stack. Then, it feeds this result into the function 'folder' 
            along with the second element, and so on. It returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Stack.foldWhile``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation (and whilst the predicate function returns true when passed 
            the aggregate state). The fold function takes the state argument, and applies the function 
            'folder' to it and the first element of the stack. Then, it feeds this result into the 
            function 'folder' along with the second element, and so on. It returns the final result. 
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Stack.foldBackWhile``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first)
            whilst the predicate function returns true for the item being processed, threading an 
            aggregate state through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the stack. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Stack.foldBackWhile``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an accumulator argument through the computation (and whilst the predicate function 
            returns true when passed the aggregate state). The fold function takes the state argument, 
            and applies the function 'folder' to it and the first element of the stack. Then, it feeds 
            this result into the function 'folder' along with the second element, and so on. It returns 
            the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Stack.reduce``1(LanguageExt.Stck{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a function to each element of the collection (from last element to first), threading 
            an accumulator argument through the computation. This function first applies the function 
            to the first two elements of the stack. Then, it passes this result into the function along 
            with the third element and so on. Finally, it returns the final result.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="reducer">Reduce function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Stack.reduceBack``1(LanguageExt.Stck{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a function to each element of the collection, threading an accumulator argument 
            through the computation. This function first applies the function to the first two 
            elements of the stack. Then, it passes this result into the function along with the third 
            element and so on. Finally, it returns the final result.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="reducer">Reduce function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:LanguageExt.Stack.scan``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function to each element of the collection, threading an accumulator argument 
            through the computation. This function takes the state argument, and applies the function 
            to it and the first element of the stack. Then, it passes this result into the function 
            along with the second element, and so on. Finally, it returns the list of intermediate 
            results and the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="state">Initial state</param>
            <param name="folder">Folding function</param>
            <returns>Aggregate state</returns>
        </member>
        <member name="M:LanguageExt.Stack.scanBack``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function to each element of the collection (from last element to first), 
            threading an accumulator argument through the computation. This function takes the state 
            argument, and applies the function to it and the first element of the stack. Then, it 
            passes this result into the function along with the second element, and so on. Finally, 
            it returns the list of intermediate results and the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="state">Initial state</param>
            <param name="folder">Folding function</param>
            <returns>Aggregate state</returns>
        </member>
        <member name="M:LanguageExt.Stack.find``1(LanguageExt.Stck{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns Some(x) for the first item in the stack that matches the predicate 
            provided, None otherwise.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="pred">Predicate</param>
            <returns>Some(x) for the first item in the stack that matches the predicate 
            provided, None otherwise.</returns>
        </member>
        <member name="M:LanguageExt.Stack.zip``3(LanguageExt.Stck{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Joins a stack and and enumerable together either into a single enumerable
            using the join function provided
            </summary>
            <param name="stack">First stack to join</param>
            <param name="other">Second list to join</param>
            <param name="zipper">Join function</param>
            <returns>Joined enumerable</returns>
        </member>
        <member name="M:LanguageExt.Stack.length``1(LanguageExt.Stck{``0})">
            <summary>
            Returns the number of items in the stack
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <returns>The number of items in the enumerable</returns>
        </member>
        <member name="M:LanguageExt.Stack.iter``1(LanguageExt.Stck{``0},System.Action{``0})">
            <summary>
            Invokes an action for each item in the stack in order
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to iterate</param>
            <param name="action">Action to invoke with each item</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Stack.iter``1(LanguageExt.Stck{``0},System.Action{System.Int32,``0})">
            <summary>
            Invokes an action for each item in the stack in order and supplies
            a running index value.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to iterate</param>
            <param name="action">Action to invoke with each item</param>
            <returns>Unit</returns>
        </member>
        <member name="M:LanguageExt.Stack.forall``1(LanguageExt.Stck{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if all items in the stack match a predicate (Any in LINQ)
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to test</param>
            <param name="pred">Predicate</param>
            <returns>True if all items in the stack match the predicate</returns>
        </member>
        <member name="M:LanguageExt.Stack.distinct``1(LanguageExt.Stck{``0})">
            <summary>
            Return an enumerable with all duplicate values removed
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <returns>An enumerable with all duplicate values removed</returns>
        </member>
        <member name="M:LanguageExt.Stack.distinct``1(LanguageExt.Stck{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Return an enumerable with all duplicate values removed
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <returns>An enumerable with all duplicate values removed</returns>
        </member>
        <member name="M:LanguageExt.Stack.take``1(LanguageExt.Stck{``0},System.Int32)">
            <summary>
            Returns a new enumerable with the first 'count' items from the stack
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="count">Number of items to take</param>
            <returns>A new enumerable with the first 'count' items from the enumerable provided</returns>
        </member>
        <member name="M:LanguageExt.Stack.takeWhile``1(LanguageExt.Stck{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterate the stack, yielding items if they match the predicate provided, and stopping 
            as soon as one doesn't
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="count">Number of items to take</param>
            <returns>A new enumerable with the first items that match the predicate</returns>
        </member>
        <member name="M:LanguageExt.Stack.takeWhile``1(LanguageExt.Stck{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Iterate the stack, yielding items if they match the predicate provided, and stopping 
            as soon as one doesn't  An index value is also provided to the predicate function.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="count">Number of items to take</param>
            <returns>A new enumerable with the first items that match the predicate</returns>
        </member>
        <member name="M:LanguageExt.Stack.exists``1(LanguageExt.Stck{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if any item in the stack matches the predicate provided
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="pred">Predicate</param>
            <returns>True if any item in the stack matches the predicate provided</returns>
        </member>
        <member name="T:LanguageExt.State`2">
            <summary>
            
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Wrapped type</typeparam>
        </member>
        <member name="T:LanguageExt.StateResult`2">
            <summary>
            State result.
            </summary>
        </member>
        <member name="M:LanguageExt.StateExt.SelectMany``5(LanguageExt.State{``0,``2},System.Func{``2,LanguageExt.Reader{``1,``3}},System.Func{``2,``3,``4})">
            <summary>
            Select Many
            </summary>
        </member>
        <member name="M:LanguageExt.StateExt.SelectMany``5(LanguageExt.State{``0,``2},System.Func{``2,LanguageExt.Writer{``1,``3}},System.Func{``2,``3,``4})">
            <summary>
            Select Many
            </summary>
        </member>
        <member name="T:LanguageExt.Stck`1">
            <summary>
            Immutable stack
            </summary>
            <typeparam name="T">Stack element type</typeparam>
        </member>
        <member name="M:LanguageExt.Stck`1.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:LanguageExt.Stck`1.#ctor(`0,LanguageExt.Stck{`0})">
            <summary>
            Ctor for Push
            </summary>
            <param name="value"></param>
            <param name="tail"></param>
        </member>
        <member name="M:LanguageExt.Stck`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Ctor that takes an initial state as an IEnumerable T
            </summary>
        </member>
        <member name="M:LanguageExt.Stck`1.#ctor(LanguageExt.Lst{`0})">
            <summary>
            Ctor that takes an initial state as a Lst T
            </summary>
        </member>
        <member name="P:LanguageExt.Stck`1.Count">
            <summary>
            Number of items in the stack
            </summary>
        </member>
        <member name="M:LanguageExt.Stck`1.Reverse">
            <summary>
            Reverses the order of the items in the stack
            </summary>
            <returns></returns>
        </member>
        <member name="P:LanguageExt.Stck`1.IsEmpty">
            <summary>
            True if the stack is empty
            </summary>
        </member>
        <member name="M:LanguageExt.Stck`1.Clear">
            <summary>
            Clear the stack (returns Empty)
            </summary>
            <returns>Stck.Empty of T</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns>IEnumerator of T</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.AsEnumerable">
            <summary>
            Returns the stack as an IEnumerable.  The first item in the enumerable
            will be the item at the top of the stack.
            </summary>
            <returns>IEnumerable of T</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.Peek">
            <summary>
            Return the item on the top of the stack without affecting the stack itself
            NOTE: Will throw an InvalidOperationException if the stack is empty
            </summary>
            <exception cref="T:System.InvalidOperationException">Stack is empty</exception>
            <returns>Top item value</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.Peek(System.Action{`0},System.Action)">
            <summary>
            Peek and match
            </summary>
            <param name="Some">Handler if there is a value on the top of the stack</param>
            <param name="None">Handler if the stack is empty</param>
            <returns>Untouched stack (this)</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.Peek``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            Peek and match
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Handler if there is a value on the top of the stack</param>
            <param name="None">Handler if the stack is empty</param>
            <returns>Return value from Some or None</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.TryPeek">
            <summary>
            Safely return the item on the top of the stack without affecting the stack itself
            </summary>
            <returns>Returns the top item value, or None</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.Pop">
            <summary>
            Pop an item off the top of the stack
            NOTE: Will throw an InvalidOperationException if the stack is empty
            </summary>
            <exception cref="T:System.InvalidOperationException">Stack is empty</exception>
            <returns>Stack with the top item popped</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.TryPop">
            <summary>
            Safe pop
            </summary>
            <returns>Tuple of popped stack and optional top-of-stack value</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.Pop(System.Action{`0},System.Action)">
            <summary>
            Pop and match
            </summary>
            <param name="Some">Handler if there is a value on the top of the stack</param>
            <param name="None">Handler if the stack is empty</param>
            <returns>Popped stack</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.Pop``1(System.Func{LanguageExt.Stck{`0},`0,``0},System.Func{``0})">
            <summary>
            Pop and match
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Handler if there is a value on the top of the stack</param>
            <param name="None">Handler if the stack is empty</param>
            <returns>Return value from Some or None</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.Push(`0)">
            <summary>
            Push an item onto the stack
            </summary>
            <param name="value">Item to push</param>
            <returns>New stack with the pushed item on top</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns>IEnumerator of T</returns>
        </member>
        <member name="M:LanguageExt.Stck`1.op_Addition(LanguageExt.Stck{`0},LanguageExt.Stck{`0})">
            <summary>
            Append another stack to the top of this stack
            The rhs will be reversed and pushed onto 'this' stack.  That will
            maintain the order of the items in the resulting stack.  So the top
            of 'rhs' will be the top of the newly created stack.  'this' stack
            will be under the 'rhs' stack.
            </summary>
        </member>
        <member name="M:LanguageExt.Stck`1.Append(LanguageExt.Stck{`0})">
            <summary>
            Append another stack to the top of this stack
            The rhs will be reversed and pushed onto 'this' stack.  That will
            maintain the order of the items in the resulting stack.  So the top
            of 'rhs' will be the top of the newly created stack.  'this' stack
            will be under the 'rhs' stack.
            </summary>
            <param name="rhs">Stack to append</param>
            <returns>Appended stacks</returns>
        </member>
        <member name="M:LanguageExt.__TaskExt.AsTask``1(``0)">
            <summary>
            Convert a value to a Task that completes immediately
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Standard LINQ Select implementation for Task
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Where``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            Standard LINQ Where implementation for Task
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.SelectMany``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Standard LINQ SelectMany implementation for Task
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.SelectMany``3(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
            <summary>
            Standard LINQ SelectMany implementation for Task
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Sum(System.Threading.Tasks.Task{System.Int32})">
            <summary>
            Get the Sum of a Task int.  Returns either the wrapped value or 0 if cancelled or faulted.
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Count``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Get the Count of a Task T.  Returns either 1 or 0 if cancelled or faulted.
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Bind``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Monadic bind operation for Task
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Exists``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns false if the Task is cancelled or faulted, otherwise
            it returns the result of pred(Result)
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.ForAll``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns false if the Task is cancelled or faulted, otherwise
            it returns the result of pred(Result)
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Filter``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the task.  This throws a BottomException when pred(Result)
            returns false
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Fold``2(System.Threading.Tasks.Task{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Folds the Task.  Returns folder(state,Result) if not faulted or
            cancelled.  Returns state otherwise.
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Iter``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <summary>
            Iterates the Task.  Invokes f(Result) if not faulted or cancelled
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Map``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Returns map(Result) if not faulted or cancelled.
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.LiftUnsafe``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Extracts the value from the Task - here for completeness so that
            the HKT work.
            </summary>
        </member>
        <member name="M:LanguageExt.__TaskExt.Lift``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Extracts the value from the Task - here for completeness so that
            the HKT work.
            </summary>
        </member>
        <member name="T:LanguageExt.Try`1">
            <summary>
            Try delegate
            </summary>
        </member>
        <member name="T:LanguageExt.TryResult`1">
            <summary>
            Holds the state of the Try post invocation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:LanguageExt.TryOption`1">
            <summary>
            TryOption delegate
            </summary>
        </member>
        <member name="T:LanguageExt.TryOptionResult`1">
            <summary>
            Holds the state of the TryOption post invocation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:LanguageExt.TypeConv" -->
        <member name="T:LanguageExt.Unit">
            <summary>
            A unit type is a type that allows only one value (and thus can hold no information)
            </summary>
        </member>
        <member name="M:LanguageExt.Unit.Return``1(``0)">
            <summary>
            Provide an alternative value to unit
            </summary>
            <typeparam name="T">Alternative value type</typeparam>
            <param name="anything">Alternative value</param>
            <returns>Alternative value</returns>
        </member>
        <member name="M:LanguageExt.Unit.Return``1(System.Func{``0})">
            <summary>
            Provide an alternative value to unit
            </summary>
            <typeparam name="T">Alternative value type</typeparam>
            <param name="anything">Alternative value</param>
            <returns>Alternative value</returns>
        </member>
        <member name="T:LanguageExt.Writer`2">
            <summary>
            Writer monad
            </summary>
            <typeparam name="Out">Writer output</typeparam>
            <typeparam name="T">Wrapped type</typeparam>
        </member>
        <member name="T:LanguageExt.WriterExt">
            <summary>
            Writer extension methods
            </summary>
        </member>
        <member name="M:LanguageExt.WriterExt.Select``3(LanguageExt.Writer{``0,``1},System.Func{``1,``2})">
            <summary>
            Select
            </summary>
        </member>
        <member name="M:LanguageExt.WriterExt.SelectMany``4(LanguageExt.Writer{``0,``1},System.Func{``1,LanguageExt.Writer{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            Select Many
            </summary>
        </member>
        <member name="M:LanguageExt.WriterExt.SelectMany``5(LanguageExt.Writer{``0,``2},System.Func{``2,LanguageExt.Reader{``1,``3}},System.Func{``2,``3,``4})">
            <summary>
            Select Many
            </summary>
        </member>
        <member name="M:LanguageExt.WriterExt.SelectMany``5(LanguageExt.Writer{``0,``2},System.Func{``2,LanguageExt.State{``1,``3}},System.Func{``2,``3,``4})">
            <summary>
            Select Many
            </summary>
        </member>
        <member name="T:LanguageExt.UnitsOfMeasure.Accel">
            <summary>
            Numeric acceleration value
            Handles unit conversions automatically
            Internally all speeds are stored as metres per-second squared
            All standard arithmetic operators work on the Accel
            type.  So keep all accelerations wrapped until you need the
            value, then extract using various unit-of-measure
            accessors (MetresPerSecond2, etc.) or divide by 1.MetresPerSecond2()
            </summary>
        </member>
        <member name="T:LanguageExt.UnitsOfMeasure.Area">
            <summary>
            Numeric area value
            Handles unit conversions automatically
            Internally all areas are stored as metres^2
            All standard arithmetic operators work on the Area
            type.  So keep all Areas wrapped until you need the
            value, then extract using various unit-of-measure
            accessors (SqMetres, SqCentimetres, etc.) or divide by 1.SqMetre()
            </summary>
        </member>
        <member name="T:LanguageExt.UnitsOfMeasure.Length">
            <summary>
            Numeric length value
            Handles unit conversions automatically
            Internally all lengths are stored as metres
            All standard arithmetic operators work on the Length
            type.  So keep all Lengths wrapped until you need the
            value, then extract using various unit-of-measure
            accessors (Metres, Centimetres, etc.) or divide by 1.Metre()
            </summary>
        </member>
        <member name="T:LanguageExt.UnitsOfMeasure.Time">
            <summary>
            Numeric time-span value
            Handles unit conversions automatically
            All standard arithmetic operators work on the Time
            type.  So keep all Times wrapped until you need the
            value, then extract using various unit-of-measure
            accessors (Milliseconds, Seconds, etc.) or divide by 1.Second()
            Implicitly convertible to TimeSpan
            </summary>
        </member>
        <member name="T:LanguageExt.UnitsOfMeasure.TimeSq">
            <summary>
            Numeric time-span squared value
            </summary>
        </member>
        <member name="T:LanguageExt.UnitsOfMeasure.Velocity">
            <summary>
            Numeric velocity value
            Handles unit conversions automatically
            Internally all speeds are stored as metres per second
            All standard arithmetic operators work on the Velocity
            type.  So keep all velocities wrapped until you need the
            value, then extract using various unit-of-measure
            accessors (MetresPerSecond, etc.) or divide by 1.MetrePerSecond()
            </summary>
        </member>
        <member name="T:LanguageExt.UnitsOfMeasure.VelocitySq">
            <summary>
            Numeric VelocitySquared value
            Handles unit conversions automatically
            </summary>
        </member>
        <member name="T:__EitherExt">
            <summary>
            Extension methods for Either
            </summary>
        </member>
        <member name="M:__EitherExt.Apply``3(LanguageExt.Either{``0,System.Func{``1,``2}},LanguageExt.Either{``0,``1})">
            <summary>
            Apply an Either value to an Either function
            </summary>
            <param name="self">Either function</param>
            <param name="arg">Either argument</param>
            <returns>Returns the result of applying the Either argument to the Either function</returns>
        </member>
        <member name="M:__EitherExt.Apply``4(LanguageExt.Either{``0,System.Func{``1,``2,``3}},LanguageExt.Either{``0,``1})">
            <summary>
            Apply an Either value to an Either function of arity 2
            </summary>
            <param name="self">Either function</param>
            <param name="arg">Either argument</param>
            <returns>Returns the result of applying the Either argument to the Either function:
            an Either function of arity 1</returns>
        </member>
        <member name="M:__EitherExt.Apply``4(LanguageExt.Either{``0,System.Func{``1,``2,``3}},LanguageExt.Either{``0,``1},LanguageExt.Either{``0,``2})">
            <summary>
            Apply Either values to an Either function of arity 2
            </summary>
            <param name="self">Either function</param>
            <param name="arg1">Either argument</param>
            <param name="arg2">Either argument</param>
            <returns>Returns the result of applying the optional arguments to the optional function</returns>
        </member>
        <member name="M:__EitherExt.Lefts``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``0,``1}})">
            <summary>
            Extracts from a list of 'Either' all the 'Left' elements.
            All the 'Left' elements are extracted in order.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>An enumerable of L</returns>
        </member>
        <member name="M:__EitherExt.Rights``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``0,``1}})">
            <summary>
            Extracts from a list of 'Either' all the 'Right' elements.
            All the 'Right' elements are extracted in order.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>An enumerable of L</returns>
        </member>
        <member name="M:__EitherExt.Partition``2(System.Collections.Generic.IEnumerable{LanguageExt.Either{``0,``1}})">
            <summary>
            Partitions a list of 'Either' into two lists.
            All the 'Left' elements are extracted, in order, to the first
            component of the output.  Similarly the 'Right' elements are extracted
            to the second component of the output.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>A tuple containing the an enumerable of L and an enumerable of R</returns>
        </member>
        <member name="M:__EitherExt.Count``2(LanguageExt.Either{``0,``1})">
            <summary>
            Counts the Either
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to count</param>
            <returns>1 if the Either is in a Right state, 0 otherwise.</returns>
        </member>
        <member name="M:__EitherExt.Sum``1(LanguageExt.Either{``0,System.Int32})">
            <summary>
            Sum of the Either
            </summary>
            <typeparam name="L">Left</typeparam>
            <param name="self">Either to count</param>
            <returns>0 if Left, or value of Right</returns>
        </member>
        <member name="M:__EitherExt.Iter``2(LanguageExt.Either{``0,``1},System.Action{``1})">
            <summary>
            Iterate the Either
            action is invoked if in the Right state
            </summary>
        </member>
        <member name="M:__EitherExt.Iter``2(LanguageExt.Either{``0,``1},System.Action{``0})">
            <summary>
            Iterate the Either
            action is invoked if in the Left state
            </summary>
        </member>
        <member name="M:__EitherExt.Iter``2(LanguageExt.Either{``0,``1},System.Action{``1},System.Action{``0})">
            <summary>
            Iterate the Either
            Appropriate action is invoked depending on the state of the Either
            </summary>
        </member>
        <member name="M:__EitherExt.ForAll``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to forall</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Left state.  
            True if the Either is in a Right state and the predicate returns True.  
            False otherwise.</returns>
        </member>
        <member name="M:__EitherExt.ForAll``2(LanguageExt.Either{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Left state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to forall</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Right state.  
            True if the Either is in a Left state and the predicate returns True.  
            False otherwise.</returns>
        </member>
        <member name="M:__EitherExt.ForAll``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to forall</param>
            <param name="Right">Right predicate</param>
            <param name="Left">Left predicate</param>
            <returns>True if the predicate returns True.  True if the Either is in a bottom state.</returns>
        </member>
        <member name="M:__EitherExt.Fold``3(LanguageExt.Either{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__EitherExt.Fold``3(LanguageExt.Either{``0,``1},``2,System.Func{``2,``0,``2})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__EitherExt.Fold``3(LanguageExt.Either{``0,``1},``2,System.Func{``2,``1,``2},System.Func{``2,``0,``2})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="Right">Right fold function</param>
            <param name="Left">Left fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__EitherExt.Exists``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to check existence of</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Right state and the predicate returns True.  False otherwise.</returns>
        </member>
        <member name="M:__EitherExt.Exists``2(LanguageExt.Either{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Left state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to check existence of</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Left state and the predicate returns True.  False otherwise.</returns>
        </member>
        <member name="M:__EitherExt.Exists``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to check existence of</param>
            <param name="Right">Right predicate</param>
            <param name="Left">Left predicate</param>
            <returns>True if the predicate returns True.  False otherwise or if the Either is in a bottom state.</returns>
        </member>
        <member name="M:__EitherExt.Map``3(LanguageExt.Either{``0,``1},System.Func{``1,``2})">
            <summary>
            Maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped Either type</typeparam>
            <param name="self">Either to map</param>
            <param name="mapper">Map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:__EitherExt.MapLeft``3(LanguageExt.Either{``0,``1},System.Func{``0,``2})">
            <summary>
            Maps the value in the Either if it's in a Left state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped Either type</typeparam>
            <param name="self">Either to map</param>
            <param name="mapper">Map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:__EitherExt.BiMap``4(LanguageExt.Either{``0,``1},System.Func{``1,``3},System.Func{``0,``2})">
            <summary>
            Bi-maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="LRet">Left return</typeparam>
            <typeparam name="RRet">Right return</typeparam>
            <param name="self">Either to map</param>
            <param name="Right">Right map function</param>
            <param name="Left">Left map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:__EitherExt.Map``4(LanguageExt.Either{``0,``1},System.Func{``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__EitherExt.Map``5(LanguageExt.Either{``0,``1},System.Func{``1,``2,``3,``4})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__EitherExt.Bind``3(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Either{``0,``2}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="self"></param>
            <param name="binder"></param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:__EitherExt.Bind``3(LanguageExt.Either{``0,``1},System.Func{``0,LanguageExt.Either{``2,``1}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="self"></param>
            <param name="binder"></param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:__EitherExt.Bind``4(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Either{``2,``3}},System.Func{``0,LanguageExt.Either{``2,``3}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="self">this</param>
            <param name="Right">Right bind function</param>
            <param name="Left">Left bind function</param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:__EitherExt.Filter``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>If the Either is in the Left state it is returned as-is.  
            If in the Right state the predicate is applied to the Right value.
            If the predicate returns True the Either is returned as-is.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:__EitherExt.Filter``2(LanguageExt.Either{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>If the Either is in the Right state it is returned as-is.  
            If in the Left state the predicate is applied to the Left value.
            If the predicate returns True the Either is returned as-is.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:__EitherExt.Filter``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Bi-filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>
            If the Either is in the Left state then the Left predicate is run against it.
            If the Either is in the Right state then the Right predicate is run against it.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:__EitherExt.Where``2(LanguageExt.Either{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>If the Either is in the Left state it is returned as-is.  
            If in the Right state the predicate is applied to the Right value.
            If the predicate returns True the Either is returned as-is.
            If the predicate returns False the Either is returned in a 'Bottom' state.  IsLeft will return True, but the value 
            of Left = default(L)</returns>
        </member>
        <member name="M:__EitherExt.Select``3(LanguageExt.Either{``0,``1},System.Func{``1,``2})">
            <summary>
            Maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="TR">Right</typeparam>
            <typeparam name="UR">Mapped Either type</typeparam>
            <param name="self">Either to map</param>
            <param name="map">Map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:__EitherExt.SelectMany``4(LanguageExt.Either{``0,``1},System.Func{``1,LanguageExt.Either{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <returns>Bound Either</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Apply``3(LanguageExt.EitherUnsafe{``0,System.Func{``1,``2}},LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Apply an Either value to an Either function
            </summary>
            <param name="self">Either function</param>
            <param name="arg">Either argument</param>
            <returns>Returns the result of applying the Either argument to the Either function</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Apply``4(LanguageExt.EitherUnsafe{``0,System.Func{``1,``2,``3}},LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Apply an Either value to an Either function of arity 2
            </summary>
            <param name="self">Either function</param>
            <param name="arg">Either argument</param>
            <returns>Returns the result of applying the Either argument to the Either function:
            an Either function of arity 1</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Apply``4(LanguageExt.EitherUnsafe{``0,System.Func{``1,``2,``3}},LanguageExt.EitherUnsafe{``0,``1},LanguageExt.EitherUnsafe{``0,``2})">
            <summary>
            Apply Either values to an Either function of arity 2
            </summary>
            <param name="self">Either function</param>
            <param name="arg1">Either argument</param>
            <param name="arg2">Either argument</param>
            <returns>Returns the result of applying the optional arguments to the optional function</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Lefts``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Extracts from a list of 'Either' all the 'Left' elements.
            All the 'Left' elements are extracted in order.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>An enumerable of L</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Rights``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Extracts from a list of 'Either' all the 'Right' elements.
            All the 'Right' elements are extracted in order.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>An enumerable of L</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Partition``2(System.Collections.Generic.IEnumerable{LanguageExt.EitherUnsafe{``0,``1}})">
            <summary>
            Partitions a list of 'Either' into two lists.
            All the 'Left' elements are extracted, in order, to the first
            component of the output.  Similarly the 'Right' elements are extracted
            to the second component of the output.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either list</param>
            <returns>A tuple containing the an enumerable of L and an enumerable of R</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Select``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2})">
            <summary>
            Maps the value in the Either if it's in a Right state
            </summary>
        </member>
        <member name="M:__EitherUnsafeExt.Sum``1(LanguageExt.EitherUnsafe{``0,System.Int32})">
            <summary>
            Sum of the Either
            </summary>
        </member>
        <member name="M:__EitherUnsafeExt.Count``2(LanguageExt.EitherUnsafe{``0,``1})">
            <summary>
            Counts the Either
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to count</param>
            <returns>1 if the Either is in a Right state, 0 otherwise.</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Iter``2(LanguageExt.EitherUnsafe{``0,``1},System.Action{``1})">
            <summary>
            Iterate the Either
            action is invoked if in the Right state
            </summary>
        </member>
        <member name="M:__EitherUnsafeExt.Iter``2(LanguageExt.EitherUnsafe{``0,``1},System.Action{``0})">
            <summary>
            Iterate the Either
            action is invoked if in the Left state
            </summary>
        </member>
        <member name="M:__EitherUnsafeExt.Iter``2(LanguageExt.EitherUnsafe{``0,``1},System.Action{``1},System.Action{``0})">
            <summary>
            Iterate the Either
            Appropriate action is invoked depending on the state of the Either
            </summary>
        </member>
        <member name="M:__EitherUnsafeExt.ForAll``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to forall</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Left state.  
            True if the Either is in a Right state and the predicate returns True.  
            False otherwise.</returns>
        </member>
        <member name="M:__EitherUnsafeExt.ForAll``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Left state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to forall</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Right state.  
            True if the Either is in a Left state and the predicate returns True.  
            False otherwise.</returns>
        </member>
        <member name="M:__EitherUnsafeExt.ForAll``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to forall</param>
            <param name="Right">Right predicate</param>
            <param name="Left">Left predicate</param>
            <returns>True if the predicate returns True.  True if the Either is in a bottom state.</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Fold``3(LanguageExt.EitherUnsafe{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Fold``3(LanguageExt.EitherUnsafe{``0,``1},``2,System.Func{``2,``0,``2})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Fold``3(LanguageExt.EitherUnsafe{``0,``1},``2,System.Func{``2,``1,``2},System.Func{``2,``0,``2})">
            <summary>
            Folds the either into an S
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <typeparam name="S">State</typeparam>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to fold</param>
            <param name="state">Initial state</param>
            <param name="Right">Right fold function</param>
            <param name="Left">Left fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Exists``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to check existence of</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Right state and the predicate returns True.  False otherwise.</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Exists``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either if it's in the Left state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to check existence of</param>
            <param name="pred">Predicate</param>
            <returns>True if the Either is in a Left state and the predicate returns True.  False otherwise.</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Exists``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Invokes a predicate on the value of the Either
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to check existence of</param>
            <param name="Right">Right predicate</param>
            <param name="Left">Left predicate</param>
            <returns>True if the predicate returns True.  False otherwise or if the Either is in a bottom state.</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Map``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2})">
            <summary>
            Maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped Either type</typeparam>
            <param name="self">Either to map</param>
            <param name="mapper">Map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:__EitherUnsafeExt.MapLeft``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,``2})">
            <summary>
            Maps the value in the Either if it's in a Left state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret">Mapped Either type</typeparam>
            <param name="self">Either to map</param>
            <param name="mapper">Map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:__EitherUnsafeExt.BiMap``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``3},System.Func{``0,``2})">
            <summary>
            Bi-maps the value in the Either if it's in a Right state
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="LRet">Left return</typeparam>
            <typeparam name="RRet">Right return</typeparam>
            <param name="self">Either to map</param>
            <param name="Right">Right map function</param>
            <param name="Left">Left map function</param>
            <returns>Mapped Either</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Map``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__EitherUnsafeExt.Map``5(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,``2,``3,``4})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__EitherUnsafeExt.Bind``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="self"></param>
            <param name="binder"></param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Bind``3(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,LanguageExt.EitherUnsafe{``2,``1}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="self"></param>
            <param name="binder"></param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Bind``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``2,``3}},System.Func{``0,LanguageExt.EitherUnsafe{``2,``3}})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <typeparam name="Ret"></typeparam>
            <param name="self">this</param>
            <param name="Right">Right bind function</param>
            <param name="Left">Left bind function</param>
            <returns>Bound Either</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Where``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter the Either
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filterd and that
            should be checked.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>If the Either is in the Left state it is returned as-is.  
            If in the Right state the predicate is applied to the Right value.
            If the predicate returns True the Either is returned as-is.
            If the predicate returns False the Either is returned in a 'Bottom' state.  IsLeft will return True, but the value 
            of Left = default(L)</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Filter``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Filter the Either
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filterd and that
            should be checked.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>If the Either is in the Left state it is returned as-is.  
            If in the Right state the predicate is applied to the Right value.
            If the predicate returns True the Either is returned as-is.
            If the predicate returns False the Either is returned in a 'Bottom' state.  IsLeft will return True, but the value 
            of Left = default(L)</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Filter``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Filter the Either
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filterd and that
            should be checked.
            </summary>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>If the Either is in the Left state it is returned as-is.  
            If in the Left state the predicate is applied to the Left value.
            If the predicate returns True the Either is returned as-is.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:__EitherUnsafeExt.Filter``2(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Bi-filter the Either
            </summary>
            <remarks>
            This may give unpredictable results for a filtered value.  The Either won't
            return true for IsLeft or IsRight.  IsBottom is True if the value is filtered and that
            should be checked for.
            </remarks>
            <typeparam name="L">Left</typeparam>
            <typeparam name="R">Right</typeparam>
            <param name="self">Either to filter</param>
            <param name="pred">Predicate function</param>
            <returns>
            If the Either is in the Left state then the Left predicate is run against it.
            If the Either is in the Right state then the Right predicate is run against it.
            If the predicate returns False the Either is returned in a 'Bottom' state.</returns>
        </member>
        <member name="M:__EitherUnsafeExt.SelectMany``4(LanguageExt.EitherUnsafe{``0,``1},System.Func{``1,LanguageExt.EitherUnsafe{``0,``2}},System.Func{``1,``2,``3})">
            <summary>
            Monadic bind function
            https://en.wikipedia.org/wiki/Monad_(functional_programming)
            </summary>
            <returns>Bound Either</returns>
        </member>
        <member name="T:ExceptionExt">
            <summary>
            Exception extensions
            </summary>
        </member>
        <member name="M:ExceptionExt.Match``1(System.Exception)">
            <summary>
            Pattern matching for exceptions.  This is to aid expression based error handling.
            </summary>
            <example>
                ex.Match&lt;string&gt;()
                  .With&lt;SystemException&gt;(e =&gt; "It's a system exception")
                  .With&lt;ArgumentNullException&gt;(e =&gt; "Arg null")
                  .Otherwise("Not handled")
            </example>
        </member>
        <member name="M:__EnumnerableExt.Match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List pattern matching
            </summary>
        </member>
        <member name="M:__EnumnerableExt.Match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List pattern matching
            </summary>
        </member>
        <member name="M:__EnumnerableExt.Match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,``0,``1},System.Func{``0,``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List pattern matching
            </summary>
        </member>
        <member name="M:__EnumnerableExt.Match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,``0,``1},System.Func{``0,``0,``0,``1},System.Func{``0,``0,``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List pattern matching
            </summary>
        </member>
        <member name="M:__EnumnerableExt.Match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,``0,``1},System.Func{``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List matching
            </summary>
        </member>
        <member name="M:__EnumnerableExt.Match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,``0,``1},System.Func{``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List matching
            </summary>
        </member>
        <member name="M:__EnumnerableExt.Match``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,``1},System.Func{``0,``0,``1},System.Func{``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``0,``0,``1},System.Func{``0,``0,``0,``0,``0,``0,System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
            List matching
            </summary>
        </member>
        <member name="M:__EnumnerableExt.Head``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the item at the head (first) of the list
            </summary>
            <param name="list">List</param>
            <returns>Head item</returns>
        </member>
        <member name="M:__EnumnerableExt.HeadOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the item at the head (first) of the list or None if the list is empty
            </summary>
            <param name="list">List</param>
            <returns>Optional head item</returns>
        </member>
        <member name="M:__EnumnerableExt.Tail``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the tail of the list (skips the head item)
            </summary>
            <param name="list">List</param>
            <returns>Enumerable of T</returns>
        </member>
        <member name="M:__EnumnerableExt.Apply``2(System.Collections.Generic.IEnumerable{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Apply an IEnumerable of values to an IEnumerable of functions
            </summary>
            <param name="opt">IEnumerable of functions</param>
            <param name="arg">IEnumerable of argument values</param>
            <returns>Returns the result of applying the IEnumerable argument values to the IEnumerable functions</returns>
        </member>
        <member name="M:__EnumnerableExt.Apply``3(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Apply an IEnumerable of values to an IEnumerable of functions of arity 2
            </summary>
            <param name="opt">IEnumerable of functions</param>
            <param name="arg">IEnumerable argument values</param>
            <returns>Returns the result of applying the IEnumerable of argument values to the 
            IEnumerable of functions: an IEnumerable of functions of arity 1</returns>
        </member>
        <member name="M:__EnumnerableExt.Apply``3(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Apply IEnumerable of values to an IEnumerable of functions of arity 2
            </summary>
            <param name="opt">IEnumerable of functions</param>
            <param name="arg1">IEnumerable of arguments</param>
            <param name="arg2">IEnumerable of arguments</param>
            <returns>Returns the result of applying the IEnumerables of arguments to the IEnumerable of functions</returns>
        </member>
        <member name="M:__EnumnerableExt.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Projects the values in the enumerable using a map function into a new enumerable (Select in LINQ).
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="list">Enumerable to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:__EnumnerableExt.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,``1})">
            <summary>
            Projects the values in the enumerable using a map function into a new enumerable (Select in LINQ).
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="list">Enumerable to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:__EnumnerableExt.Map``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__EnumnerableExt.Map``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__EnumnerableExt.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes items from the list that do not match the given predicate (Where in LINQ)
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to filter</param>
            <param name="predicate">Predicate function</param>
            <returns>Filtered enumerable</returns>
        </member>
        <member name="M:__EnumnerableExt.Choose``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,LanguageExt.Option{``0}})">
            <summary>
            Applies the given function 'selector' to each element of the list. Returns the list comprised of 
            the results for each element where the function returns Some(f(x)).
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable</param>
            <param name="selector">Selector function</param>
            <returns>Mapped and filtered enumerable</returns>
        </member>
        <member name="M:__EnumnerableExt.Choose``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,LanguageExt.Option{``0}})">
            <summary>
            Applies the given function 'selector' to each element of the list. Returns the list comprised of 
            the results for each element where the function returns Some(f(x)).
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable</param>
            <param name="selector">Selector function</param>
            <returns>Mapped and filtered enumerable</returns>
        </member>
        <member name="M:__EnumnerableExt.Collect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            For each element of the list, applies the given function. Concatenates all the results and 
            returns the combined list.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="list">Enumerable to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:__EnumnerableExt.Rev``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Reverses the enumerable (Reverse in LINQ)
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to reverse</param>
            <returns>Reversed enumerable</returns>
        </member>
        <member name="M:__EnumnerableExt.Rev``1(LanguageExt.Lst{``0})">
            <summary>
            Reverses the list (Reverse in LINQ)
            </summary>
            <typeparam name="T">List item type</typeparam>
            <param name="list">Listto reverse</param>
            <returns>Reversed list</returns>
        </member>
        <member name="M:__EnumnerableExt.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenate two enumerables (Concat in LINQ)
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="lhs">First enumerable</param>
            <param name="rhs">Second enumerable</param>
            <returns>Concatenated enumerable</returns>
        </member>
        <member name="M:__EnumnerableExt.Fold``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the list. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result. (Aggregate in LINQ)
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.FoldBack``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an aggregate state through the computation. The fold function takes the state 
            argument, and applies the function 'folder' to it and the first element of the list. Then, 
            it feeds this result into the function 'folder' along with the second element, and so on. It 
            returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.FoldWhile``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection whilst the predicate function 
            returns True for the item being processed, threading an aggregate state through the 
            computation. The fold function takes the state argument, and applies the function 'folder' 
            to it and the first element of the list. Then, it feeds this result into the function 'folder' 
            along with the second element, and so on. It returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.FoldWhile``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation (and whilst the predicate function returns True when passed 
            the aggregate state). The fold function takes the state argument, and applies the function 
            'folder' to it and the first element of the list. Then, it feeds this result into the 
            function 'folder' along with the second element, and so on. It returns the final result. 
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.FoldBackWhile``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first)
            whilst the predicate function returns True for the item being processed, threading an 
            aggregate state through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the list. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.FoldBackWhile``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an accumulator argument through the computation (and whilst the predicate function 
            returns True when passed the aggregate state). The fold function takes the state argument, 
            and applies the function 'folder' to it and the first element of the list. Then, it feeds 
            this result into the function 'folder' along with the second element, and so on. It returns 
            the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.FoldUntil``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection whilst the predicate function 
            returns False for the item being processed, threading an aggregate state through the 
            computation. The fold function takes the state argument, and applies the function 'folder' 
            to it and the first element of the list. Then, it feeds this result into the function 'folder' 
            along with the second element, and so on. It returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.FoldUntil``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation (and whilst the predicate function returns False when passed 
            the aggregate state). The fold function takes the state argument, and applies the function 
            'folder' to it and the first element of the list. Then, it feeds this result into the 
            function 'folder' along with the second element, and so on. It returns the final result. 
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.FoldBackUntil``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first)
            whilst the predicate function returns False for the item being processed, threading an 
            aggregate state through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the list. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.FoldBackUntil``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an accumulator argument through the computation (and whilst the predicate function 
            returns False when passed the aggregate state). The fold function takes the state argument, 
            and applies the function 'folder' to it and the first element of the list. Then, it feeds 
            this result into the function 'folder' along with the second element, and so on. It returns 
            the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.Reduce``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a function to each element of the collection (from last element to first), threading 
            an accumulator argument through the computation. This function first applies the function 
            to the first two elements of the list. Then, it passes this result into the function along 
            with the third element and so on. Finally, it returns the final result.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to reduce</param>
            <param name="reducer">Reduce function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.ReduceBack``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a function to each element of the collection, threading an accumulator argument 
            through the computation. This function first applies the function to the first two 
            elements of the list. Then, it passes this result into the function along with the third 
            element and so on. Finally, it returns the final result.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to reduce</param>
            <param name="reducer">Reduce function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__EnumnerableExt.Scan``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function to each element of the collection, threading an accumulator argument 
            through the computation. This function takes the state argument, and applies the function 
            to it and the first element of the list. Then, it passes this result into the function 
            along with the second element, and so on. Finally, it returns the list of intermediate 
            results and the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Folding function</param>
            <returns>Aggregate state</returns>
        </member>
        <member name="M:__EnumnerableExt.ScanBack``2(System.Collections.Generic.IEnumerable{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function to each element of the collection (from last element to first), 
            threading an accumulator argument through the computation. This function takes the state 
            argument, and applies the function to it and the first element of the list. Then, it 
            passes this result into the function along with the second element, and so on. Finally, 
            it returns the list of intermediate results and the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Folding function</param>
            <returns>Aggregate state</returns>
        </member>
        <member name="M:__EnumnerableExt.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Joins two enumerables together either into a single enumerable of tuples
            </summary>
            <param name="list">First list to join</param>
            <param name="other">Second list to join</param>
            <param name="zipper">Join function</param>
            <returns>Joined enumerable</returns>
        </member>
        <member name="M:__EnumnerableExt.Find``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns Some(x) for the first item in the list that matches the predicate 
            provided, None otherwise.
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to search</param>
            <param name="pred">Predicate</param>
            <returns>Some(x) for the first item in the list that matches the predicate 
            provided, None otherwise.</returns>
        </member>
        <member name="M:__EnumnerableExt.Freeze``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert any enumerable into an immutable Lst T
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to convert</param>
            <returns>Lst of T</returns>
        </member>
        <member name="M:__EnumnerableExt.Length``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the number of items in the Lst T
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="list">List to count</param>
            <returns>The number of items in the list</returns>
        </member>
        <member name="M:__EnumnerableExt.Iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Invokes an action for each item in the enumerable in order
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to iterate</param>
            <param name="action">Action to invoke with each item</param>
            <returns>Unit</returns>
        </member>
        <member name="M:__EnumnerableExt.Iter``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Invokes an action for each item in the enumerable in order
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to iterate</param>
            <param name="action">Action to invoke with each item</param>
            <returns>Unit</returns>
        </member>
        <member name="M:__EnumnerableExt.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if all items in the enumerable match a predicate (Any in LINQ)
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to test</param>
            <param name="pred">Predicate</param>
            <returns>True if all items in the enumerable match the predicate</returns>
        </member>
        <member name="M:__EnumnerableExt.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Return a new enumerable with all duplicate values removed
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable</param>
            <returns>A new enumerable with all duplicate values removed</returns>
        </member>
        <member name="M:__EnumnerableExt.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if any item in the enumerable matches the predicate provided
            </summary>
            <typeparam name="T">Enumerable item type</typeparam>
            <param name="list">Enumerable to test</param>
            <param name="pred">Predicate</param>
            <returns>True if any item in the enumerable matches the predicate provided</returns>
        </member>
        <member name="M:__EnumnerableExt.Tails``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            The tails function returns all final segments of the argument, longest first. For example,
             i.e. tails(['a','b','c']) == [['a','b','c'], ['b','c'], ['c'],[]]
            </summary>
            <typeparam name="T">List item type</typeparam>
            <param name="self">List</param>
            <returns>Enumerable of Enumerables of T</returns>
        </member>
        <member name="M:__EnumnerableExt.Span``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Span, applied to a predicate 'pred' and a list, returns a tuple where first element is 
            longest prefix (possibly empty) of elements that satisfy 'pred' and second element is the 
            remainder of the list:
            </summary>
            <example>
            List.span(List(1,2,3,4,1,2,3,4), x => x &lt; 3) == Tuple(List(1,2),List(3,4,1,2,3,4))
            </example>
            <example>
            List.span(List(1,2,3), x => x &lt; 9) == Tuple(List(1,2,3),List())
            </example>
            <example>
            List.span(List(1,2,3), x => x &lt; 0) == Tuple(List(),List(1,2,3))
            </example>
            <typeparam name="T">List element type</typeparam>
            <param name="self">List</param>
            <param name="pred">Predicate</param>
            <returns>Split list</returns>
        </member>
        <member name="M:__EnumnerableExt.Bind``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Monadic bind function for IEnumerable
            </summary>
        </member>
        <member name="M:__EnumnerableExt.Select``2(LanguageExt.Lst{``0},System.Func{``0,``1})">
            <summary>
            LINQ Select implementation for Lst
            </summary>
        </member>
        <member name="M:__EnumnerableExt.BindEnumerable``2(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Monadic bind function for Lst that returns an IEnumerable
            </summary>
        </member>
        <member name="M:__EnumnerableExt.Bind``2(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Lst{``1}})">
            <summary>
            Monadic bind function
            </summary>
        </member>
        <member name="M:__EnumnerableExt.Count``1(LanguageExt.Lst{``0})">
            <summary>
            Returns the number of items in the Lst T
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="list">List to count</param>
            <returns>The number of items in the list</returns>
        </member>
        <member name="M:__EnumnerableExt.SelectMany``3(LanguageExt.Lst{``0},System.Func{``0,LanguageExt.Lst{``1}},System.Func{``0,``1,``2})">
            <summary>
            LINQ bind implementation for Lst
            </summary>
        </member>
        <member name="M:__MapExt.Map``3(LanguageExt.Map{``0,``1},System.Func{``1,``2})">
            <summary>
            Atomically maps the map to a new map
            </summary>
            <returns>Mapped items in a new map</returns>
        </member>
        <member name="M:__MapExt.Map``3(LanguageExt.Map{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            Atomically maps the map to a new map
            </summary>
            <returns>Mapped items in a new map</returns>
        </member>
        <member name="M:__MapExt.Count``2(LanguageExt.Map{``0,``1})">
            <summary>
            Number of items in the map
            </summary>
        </member>
        <member name="M:__MapExt.Select``3(LanguageExt.Map{``0,``1},System.Func{``1,``2})">
            <summary>
            Atomically maps the map to a new map
            </summary>
            <returns>Mapped items in a new map</returns>
        </member>
        <member name="M:__MapExt.Select``3(LanguageExt.Map{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            Atomically maps the map to a new map
            </summary>
            <returns>Mapped items in a new map</returns>
        </member>
        <member name="M:__MapExt.Where``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Atomically filter out items that return false when a predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>New map with items filtered</returns>
        </member>
        <member name="M:__MapExt.Where``2(LanguageExt.Map{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Atomically filter out items that return false when a predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>New map with items filtered</returns>
        </member>
        <member name="M:__MapExt.Filter``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Atomically filter out items that return false when a predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>New map with items filtered</returns>
        </member>
        <member name="M:__MapExt.Filter``2(LanguageExt.Map{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Atomically filter out items that return false when a predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>New map with items filtered</returns>
        </member>
        <member name="M:__MapExt.ForAll``2(LanguageExt.Map{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Return true if all items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:__MapExt.ForAll``2(LanguageExt.Map{``0,``1},System.Func{System.Tuple{``0,``1},System.Boolean})">
            <summary>
            Return true if all items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:__MapExt.ForAll``2(LanguageExt.Map{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
            Return true if *all* items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:__MapExt.ForAll``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Return true if all items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:__MapExt.Exists``2(LanguageExt.Map{``0,``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Return true if *any* items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:__MapExt.Exists``2(LanguageExt.Map{``0,``1},System.Func{System.Tuple{``0,``1},System.Boolean})">
            <summary>
            Return true if *any* items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:__MapExt.Exists``2(LanguageExt.Map{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
            Return true if *any* items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:__MapExt.Exists``2(LanguageExt.Map{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Return true if *any* items in the map return true when the predicate is applied
            </summary>
            <param name="pred">Predicate</param>
            <returns>True if all items in the map return true when the predicate is applied</returns>
        </member>
        <member name="M:__MapExt.Iter``2(LanguageExt.Map{``0,``1},System.Action{``0,``1})">
            <summary>
            Atomically iterate through all key/value pairs in the map (in order) and execute an
            action on each
            </summary>
            <param name="action">Action to execute</param>
            <returns>Unit</returns>
        </member>
        <member name="M:__MapExt.Iter``2(LanguageExt.Map{``0,``1},System.Action{``1})">
            <summary>
            Atomically iterate through all values in the map (in order) and execute an
            action on each
            </summary>
            <param name="action">Action to execute</param>
            <returns>Unit</returns>
        </member>
        <member name="M:__MapExt.Iter``2(LanguageExt.Map{``0,``1},System.Action{System.Tuple{``0,``1}})">
            <summary>
            Atomically iterate through all key/value pairs (as tuples) in the map (in order) 
            and execute an action on each
            </summary>
            <param name="action">Action to execute</param>
            <returns>Unit</returns>
        </member>
        <member name="M:__MapExt.Iter``2(LanguageExt.Map{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Atomically iterate through all key/value pairs in the map (in order) and execute an
            action on each
            </summary>
            <param name="action">Action to execute</param>
            <returns>Unit</returns>
        </member>
        <member name="M:__MapExt.Choose``2(LanguageExt.Map{``0,``1},System.Func{``0,``1,LanguageExt.Option{``1}})">
            <summary>
            Equivalent to map and filter but the filtering is done based on whether the returned
            Option is Some or None.  If the item is None then it's filtered out, if not the the
            mapped Some value is used.
            </summary>
            <param name="selector">Predicate</param>
            <returns>Filtered map</returns>
        </member>
        <member name="M:__MapExt.Choose``2(LanguageExt.Map{``0,``1},System.Func{``1,LanguageExt.Option{``1}})">
            <summary>
            Equivalent to map and filter but the filtering is done based on whether the returned
            Option is Some or None.  If the item is None then it's filtered out, if not the the
            mapped Some value is used.
            </summary>
            <param name="selector">Predicate</param>
            <returns>Filtered map</returns>
        </member>
        <member name="M:__MapExt.Fold``3(LanguageExt.Map{``0,``1},``2,System.Func{``2,``0,``1,``2})">
            <summary>
            Atomically folds all items in the map (in order) using the folder function provided.
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__MapExt.Fold``3(LanguageExt.Map{``0,``1},``2,System.Func{``2,``1,``2})">
            <summary>
            Atomically folds all items in the map (in order) using the folder function provided.
            </summary>
            <typeparam name="S">State type</typeparam>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__NullableExt.ToOption``1(System.Nullable{``0})">
            <summary>
            Convert NullableT to OptionT
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">Value to convert</param>
            <returns>OptionT with Some or None, depending on HasValue</returns>
        </member>
        <member name="M:__NullableExt.AsEnumerable``1(System.Nullable{``0})">
            <summary>
            Convert NullableT to IEnumerableT (0..1 entries)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self">Value to convert</param>
            <returns>Zero or One enumerable values, depending on HasValue</returns>
        </member>
        <member name="M:__OptionExt.Somes``1(System.Collections.Generic.IEnumerable{LanguageExt.Option{``0}})">
            <summary>
            Extracts from a list of 'Option' all the 'Some' elements.
            All the 'Some' elements are extracted in order.
            </summary>
        </member>
        <member name="M:__OptionExt.Apply``2(LanguageExt.Option{System.Func{``0,``1}},LanguageExt.Option{``0})">
            <summary>
            Apply an Optional value to an Optional function
            </summary>
            <param name="opt">Optional function</param>
            <param name="arg">Optional argument</param>
            <returns>Returns the result of applying the optional argument to the optional function</returns>
        </member>
        <member name="M:__OptionExt.Apply``3(LanguageExt.Option{System.Func{``0,``1,``2}},LanguageExt.Option{``0})">
            <summary>
            Apply an Optional value to an Optional function of arity 2
            </summary>
            <param name="opt">Optional function</param>
            <param name="arg">Optional argument</param>
            <returns>Returns the result of applying the optional argument to the optional function:
            an optonal function of arity 1</returns>
        </member>
        <member name="M:__OptionExt.Apply``3(LanguageExt.Option{System.Func{``0,``1,``2}},LanguageExt.Option{``0},LanguageExt.Option{``1})">
            <summary>
            Apply Optional values to an Optional function of arity 2
            </summary>
            <param name="opt">Optional function</param>
            <param name="arg1">Optional argument</param>
            <param name="arg2">Optional argument</param>
            <returns>Returns the result of applying the optional arguments to the optional function</returns>
        </member>
        <member name="M:__OptionExt.Fold``2(LanguageExt.Option{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds Option into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="tryDel">Try to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__OptionExt.Fold``2(LanguageExt.Option{``1},``0,System.Func{``0,``1,``0},System.Func{``0,``0})">
            <summary>
            Folds Option into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="tryDel">Try to fold</param>
            <param name="state">Initial state</param>
            <param name="Some">Fold function for Some</param>
            <param name="None">Fold function for None</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__OptionExt.Map``3(LanguageExt.Option{``0},System.Func{``0,``1,``2})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__OptionExt.Map``4(LanguageExt.Option{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__OptionExt.MatchAsync``2(LanguageExt.Option{System.Threading.Tasks.Task{``0}},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Match the two states of the Option and return a promise of a non-null R.
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler.  Cannot return null.</param>
            <param name="None">None handler.  Cannot return null.</param>
            <returns>A promise to return a non-null R</returns>
        </member>
        <member name="M:__OptionExt.MatchObservable``2(LanguageExt.Option{System.IObservable{``0}},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Match the two states of the Option and return a stream of non-null Rs.
            </summary>
            <param name="Some">Some handler.  Cannot return null.</param>
            <param name="None">None handler.  Cannot return null.</param>
            <returns>A stream of non-null Rs</returns>
        </member>
        <member name="M:__OptionExt.MatchObservable``2(System.IObservable{LanguageExt.Option{``0}},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Match the two states of the IObservable&lt;Option&lt;T&gt;&gt; and return a stream of non-null Rs.
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler.  Cannot return null.</param>
            <param name="None">None handler.  Cannot return null.</param>
            <returns>A stream of non-null Rs</returns>
        </member>
        <member name="M:__OptionUnsafeExt.Somes``1(System.Collections.Generic.IEnumerable{LanguageExt.OptionUnsafe{``0}})">
            <summary>
            Extracts from a list of 'Option' all the 'Some' elements.
            All the 'Some' elements are extracted in order.
            </summary>
        </member>
        <member name="M:__OptionUnsafeExt.Apply``2(LanguageExt.OptionUnsafe{System.Func{``0,``1}},LanguageExt.OptionUnsafe{``0})">
            <summary>
            Apply an Optional value to an Optional function
            </summary>
            <param name="opt">Optional function</param>
            <param name="arg">Optional argument</param>
            <returns>Returns the result of applying the optional argument to the optional function</returns>
        </member>
        <member name="M:__OptionUnsafeExt.Apply``3(LanguageExt.OptionUnsafe{System.Func{``0,``1,``2}},LanguageExt.OptionUnsafe{``0})">
            <summary>
            Apply an Optional value to an Optional function of arity 2
            </summary>
            <param name="opt">Optional function</param>
            <param name="arg">Optional argument</param>
            <returns>Returns the result of applying the optional argument to the optional function:
            an optonal function of arity 1</returns>
        </member>
        <member name="M:__OptionUnsafeExt.Apply``3(LanguageExt.OptionUnsafe{System.Func{``0,``1,``2}},LanguageExt.OptionUnsafe{``0},LanguageExt.OptionUnsafe{``1})">
            <summary>
            Apply Optional values to an Optional function of arity 2
            </summary>
            <param name="opt">Optional function</param>
            <param name="arg1">Optional argument</param>
            <param name="arg2">Optional argument</param>
            <returns>Returns the result of applying the optional arguments to the optional function</returns>
        </member>
        <member name="M:__OptionUnsafeExt.Map``3(LanguageExt.OptionUnsafe{``0},System.Func{``0,``1,``2})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__OptionUnsafeExt.Map``4(LanguageExt.OptionUnsafe{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__OptionUnsafeExt.MatchAsync``2(LanguageExt.OptionUnsafe{System.Threading.Tasks.Task{``0}},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Match the two states of the OptionUnsafe&lt;Task&lt;T&gt;&gt;
            
                If Some then the result of the Task is passed to Some and returned as a Task R.
                If None then the result of None() is returned as a Task R
                
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler</param>
            <param name="None">None handler</param>
            <returns>A promise to return an R</returns>
        </member>
        <member name="M:__OptionUnsafeExt.MatchObservable``2(LanguageExt.OptionUnsafe{System.IObservable{``0}},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Match the two states of the OptionUnsafe&lt;IObservable&lt;T&gt;&gt;
            
                If Some then the observable stream is mapped with Some (until the subscription ends)
                If None the a single value observable is returned with the None result in
            
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler</param>
            <param name="None">None handler</param>
            <returns>A stream of Rs</returns>
        </member>
        <member name="M:__OptionUnsafeExt.MatchObservable``2(System.IObservable{LanguageExt.OptionUnsafe{``0}},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Match the two states of the IObservable&lt;OptionUnsafe&lt;T&gt;&gt;
            
                Matches a stream of options
            
            </summary>
            <typeparam name="R">Return type</typeparam>
            <param name="Some">Some handler</param>
            <param name="None">None handler</param>
            <returns>A stream of Rs</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:__MemoExt.Memo``1(System.Func{``0})" -->
        <!-- Badly formed XML comment ignored for member "M:__MemoExt.Memo``2(System.Func{``0,``1})" -->
        <!-- Badly formed XML comment ignored for member "M:__MemoExt.MemoUnsafe``2(System.Func{``0,``1})" -->
        <member name="M:__MemoExt.Memo``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerable memoization.  As an enumerable is enumerated each item is retained
            in an internal list, so that future evalation of the enumerable isn't done. 
            Only items not seen before are evaluated.  
            
            This minimises one of the major problems with the IEnumerable / yield return 
            pattern by causing at-most-once evaluation of each item.  
            
            Use the IEnumerable extension method Memo for convenience.
            </summary>
            <remarks>
            Although this allows efficient lazy evaluation, it does come at a memory cost.
            Each item is cached internally, so this method doesn't allow for evaluation of
            infinite sequences.
            </remarks>
            <param name="seq">Enumerable to memoize</param>
            <returns>IEnumerable with caching properties</returns>
        </member>
        <member name="M:__StackExt.Map``2(LanguageExt.Stck{``0},System.Func{``0,``1})">
            <summary>
            Projects the values in the stack using a map function into a new enumerable (Select in LINQ).
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="stack">Stack to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:__StackExt.Map``2(LanguageExt.Stck{``0},System.Func{System.Int32,``0,``1})">
            <summary>
            Projects the values in the stack using a map function into a new enumerable (Select in LINQ).
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="stack">Stack to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:__StackExt.Filter``1(LanguageExt.Stck{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes items from the stack that do not match the given predicate (Where in LINQ)
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to filter</param>
            <param name="predicate">Predicate function</param>
            <returns>Filtered stack</returns>
        </member>
        <member name="M:__StackExt.Choose``1(LanguageExt.Stck{``0},System.Func{``0,LanguageExt.Option{``0}})">
            <summary>
            Applies the given function 'selector' to each element of the stack. Returns an enumerable comprised of 
            the results for each element where the function returns Some(f(x)).
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="selector">Selector function</param>
            <returns>Mapped and filtered enumerable</returns>
        </member>
        <member name="M:__StackExt.Choose``1(LanguageExt.Stck{``0},System.Func{System.Int32,``0,LanguageExt.Option{``0}})">
            <summary>
            Applies the given function 'selector' to each element of the stack. Returns an enumerable comprised of 
            the results for each element where the function returns Some(f(x)).
            An index value is passed through to the selector function also.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="selector">Selector function</param>
            <returns>Mapped and filtered enumerable</returns>
        </member>
        <member name="M:__StackExt.Collect``2(LanguageExt.Stck{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            For each element of the stack, applies the given function. Concatenates all the results and 
            returns the combined list.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <typeparam name="R">Return enumerable item type</typeparam>
            <param name="stack">Stack to map</param>
            <param name="map">Map function</param>
            <returns>Mapped enumerable</returns>
        </member>
        <member name="M:__StackExt.Rev``1(LanguageExt.Stck{``0})">
            <summary>
            Reverses the order of the items in the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:__StackExt.Fold``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the stack. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result. (Aggregate in LINQ)
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__StackExt.FoldBack``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an aggregate state through the computation. The fold function takes the state 
            argument, and applies the function 'folder' to it and the first element of the stack. Then, 
            it feeds this result into the function 'folder' along with the second element, and so on. It 
            returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__StackExt.FoldWhile``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection whilst the predicate function 
            returns true for the item being processed, threading an aggregate state through the 
            computation. The fold function takes the state argument, and applies the function 'folder' 
            to it and the first element of the stack. Then, it feeds this result into the function 'folder' 
            along with the second element, and so on. It returns the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__StackExt.FoldWhile``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection, threading an accumulator 
            argument through the computation (and whilst the predicate function returns true when passed 
            the aggregate state). The fold function takes the state argument, and applies the function 
            'folder' to it and the first element of the stack. Then, it feeds this result into the 
            function 'folder' along with the second element, and so on. It returns the final result. 
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__StackExt.FoldBackWhile``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0},System.Func{``1,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first)
            whilst the predicate function returns true for the item being processed, threading an 
            aggregate state through the computation. The fold function takes the state argument, and 
            applies the function 'folder' to it and the first element of the stack. Then, it feeds this 
            result into the function 'folder' along with the second element, and so on. It returns the 
            final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__StackExt.FoldBackWhile``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Boolean})">
            <summary>
            Applies a function 'folder' to each element of the collection (from last element to first), 
            threading an accumulator argument through the computation (and whilst the predicate function 
            returns true when passed the aggregate state). The fold function takes the state argument, 
            and applies the function 'folder' to it and the first element of the stack. Then, it feeds 
            this result into the function 'folder' along with the second element, and so on. It returns 
            the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <param name="pred">Predicate function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__StackExt.ReduceBack``1(LanguageExt.Stck{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a function to each element of the collection, threading an accumulator argument 
            through the computation. This function first applies the function to the first two 
            elements of the stack. Then, it passes this result into the function along with the third 
            element and so on. Finally, it returns the final result.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="reducer">Reduce function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__StackExt.Reduce``1(LanguageExt.Stck{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies a function to each element of the collection (from last element to first), threading 
            an accumulator argument through the computation. This function first applies the function 
            to the first two elements of the stack. Then, it passes this result into the function along 
            with the third element and so on. Finally, it returns the final result.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to fold</param>
            <param name="reducer">Reduce function</param>
            <returns>Aggregate value</returns>
        </member>
        <member name="M:__StackExt.Scan``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function to each element of the collection, threading an accumulator argument 
            through the computation. This function takes the state argument, and applies the function 
            to it and the first element of the stack. Then, it passes this result into the function 
            along with the second element, and so on. Finally, it returns the list of intermediate 
            results and the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="state">Initial state</param>
            <param name="folder">Folding function</param>
            <returns>Aggregate state</returns>
        </member>
        <member name="M:__StackExt.ScanBack``2(LanguageExt.Stck{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Applies a function to each element of the collection (from last element to first), 
            threading an accumulator argument through the computation. This function takes the state 
            argument, and applies the function to it and the first element of the stack. Then, it 
            passes this result into the function along with the second element, and so on. Finally, 
            it returns the list of intermediate results and the final result.
            </summary>
            <typeparam name="S">State type</typeparam>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="state">Initial state</param>
            <param name="folder">Folding function</param>
            <returns>Aggregate state</returns>
        </member>
        <member name="M:__StackExt.Find``1(LanguageExt.Stck{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns Some(x) for the first item in the stack that matches the predicate 
            provided, None otherwise.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="pred">Predicate</param>
            <returns>Some(x) for the first item in the stack that matches the predicate 
            provided, None otherwise.</returns>
        </member>
        <member name="M:__StackExt.Length``1(LanguageExt.Stck{``0})">
            <summary>
            Returns the number of items in the stack
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <returns>The number of items in the enumerable</returns>
        </member>
        <member name="M:__StackExt.Iter``1(LanguageExt.Stck{``0},System.Action{``0})">
            <summary>
            Invokes an action for each item in the stack in order
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to iterate</param>
            <param name="action">Action to invoke with each item</param>
            <returns>Unit</returns>
        </member>
        <member name="M:__StackExt.Iter``1(LanguageExt.Stck{``0},System.Action{System.Int32,``0})">
            <summary>
            Invokes an action for each item in the stack in order and supplies
            a running index value.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack to iterate</param>
            <param name="action">Action to invoke with each item</param>
            <returns>Unit</returns>
        </member>
        <member name="M:__StackExt.ForAll``1(LanguageExt.Stck{``0},System.Func{``0,System.Boolean})">
            <summary>
            Return an enumerable with all duplicate values removed
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <returns>An enumerable with all duplicate values removed</returns>
        </member>
        <member name="M:__StackExt.Distinct``1(LanguageExt.Stck{``0})">
            <summary>
            Return an enumerable with all duplicate values removed
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <returns>An enumerable with all duplicate values removed</returns>
        </member>
        <member name="M:__StackExt.Distinct``1(LanguageExt.Stck{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Return an enumerable with all duplicate values removed
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <returns>An enumerable with all duplicate values removed</returns>
        </member>
        <member name="M:__StackExt.Take``1(LanguageExt.Stck{``0},System.Int32)">
            <summary>
            Returns a new enumerable with the first 'count' items from the stack
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="count">Number of items to take</param>
            <returns>A new enumerable with the first 'count' items from the enumerable provided</returns>
        </member>
        <member name="M:__StackExt.TakeWhile``1(LanguageExt.Stck{``0},System.Func{``0,System.Boolean})">
            <summary>
            Iterate the stack, yielding items if they match the predicate provided, and stopping 
            as soon as one doesn't
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="count">Number of items to take</param>
            <returns>A new enumerable with the first items that match the predicate</returns>
        </member>
        <member name="M:__StackExt.TakeWhile``1(LanguageExt.Stck{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Iterate the stack, yielding items if they match the predicate provided, and stopping 
            as soon as one doesn't  An index value is also provided to the predicate function.
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="count">Number of items to take</param>
            <returns>A new enumerable with the first items that match the predicate</returns>
        </member>
        <member name="M:__StackExt.Exists``1(LanguageExt.Stck{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if any item in the stack matches the predicate provided
            </summary>
            <typeparam name="T">Stack item type</typeparam>
            <param name="stack">Stack</param>
            <param name="pred">Predicate</param>
            <returns>True if any item in the stack matches the predicate provided</returns>
        </member>
        <member name="T:__TryExt">
            <summary>
            Extension methods for the Try monad
            </summary>
        </member>
        <member name="M:__TryExt.Append``1(LanguageExt.Try{``0},LanguageExt.Try{``0})">
            <summary>
            Append the Try(x) to Try(y).  If either of the Trys throw then the result is Fail
            For numeric values the behaviour is to sum the Trys (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:__TryExt.Subtract``1(LanguageExt.Try{``0},LanguageExt.Try{``0})">
            <summary>
            Subtract the Try(x) from Try(y).  If either of the Trys throw then the result is Fail
            For numeric values the behaviour is to find the difference between the Trys (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:__TryExt.Multiply``1(LanguageExt.Try{``0},LanguageExt.Try{``0})">
            <summary>
            Find the product of Try(x) and Try(y).  If either of the Trys throw then the result is Fail
            For numeric values the behaviour is to multiply the Trys (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:__TryExt.Divide``1(LanguageExt.Try{``0},LanguageExt.Try{``0})">
            <summary>
            Divide Try(x) by Try(y).  If either of the Trys throw then the result is Fail
            For numeric values the behaviour is to divide the Trys (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:__TryExt.Apply``2(LanguageExt.Try{System.Func{``0,``1}},LanguageExt.Try{``0})">
            <summary>
            Apply a Try value to a Try function
            </summary>
            <param name="self">Try function</param>
            <param name="arg">Try argument</param>
            <returns>Returns the result of applying the Try argument to the Try function</returns>
        </member>
        <member name="M:__TryExt.Apply``3(LanguageExt.Try{System.Func{``0,``1,``2}},LanguageExt.Try{``0})">
            <summary>
            Apply a Try value to a Try function of arity 2
            </summary>
            <param name="self">Try function</param>
            <param name="arg">Try argument</param>
            <returns>Returns the result of applying the Try argument to the Try function:
            a Try function of arity 1</returns>
        </member>
        <member name="M:__TryExt.Apply``3(LanguageExt.Try{System.Func{``0,``1,``2}},LanguageExt.Try{``0},LanguageExt.Try{``1})">
            <summary>
            Apply Try values to a Try function of arity 2
            </summary>
            <param name="self">Try function</param>
            <param name="arg1">Try argument</param>
            <param name="arg2">Try argument</param>
            <returns>Returns the result of applying the Try arguments to the Try function</returns>
        </member>
        <member name="M:__TryExt.IfSucc``1(LanguageExt.Try{``0},System.Action{``0})">
            <summary>
            Invokes the succHandler if Try is in the Success state, otherwise nothing
            happens.
            </summary>
        </member>
        <member name="M:__TryExt.IfFail``1(LanguageExt.Try{``0},``0)">
            <summary>
            Returns the Succ(value) of the Try or a default if it's Fail
            </summary>
        </member>
        <member name="M:__TryExt.IfFail``1(LanguageExt.Try{``0},System.Func{``0})">
            <summary>
            Returns the Succ(value) of the Try or a default if it's Fail
            </summary>
        </member>
        <member name="M:__TryExt.IfFail``1(LanguageExt.Try{``0},System.Func{System.Exception,``0})">
            <summary>
            Returns the Succ(value) of the Try or a default if it's Fail
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:__TryExt.IfFail``1(LanguageExt.Try{``0})" -->
        <member name="M:__TryExt.Fold``2(LanguageExt.Try{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds Try value into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="self">Try to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__TryExt.Fold``2(LanguageExt.Try{``1},``0,System.Func{``0,``1,``0},System.Func{``0,System.Exception,``0})">
            <summary>
            Folds Try value into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="self">Try to fold</param>
            <param name="state">Initial state</param>
            <param name="Succ">Fold function for Success</param>
            <param name="Fail">Fold function for Failure</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__TryExt.Map``3(LanguageExt.Try{``0},System.Func{``0,``1,``2})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__TryExt.Map``4(LanguageExt.Try{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="T:__TryOptionExt">
            <summary>
            Extension methods for the TryOption monad
            </summary>
        </member>
        <member name="M:__TryOptionExt.Append``1(LanguageExt.TryOption{``0},LanguageExt.TryOption{``0})">
            <summary>
            Append the TryOption(x) to TryOption(y).
            If either of the TryOptions throw then the result is Fail
            If either of the TryOptions return None then the result is None
            For numeric values the behaviour is to sum the TryOptions (lhs + rhs)
            For string values the behaviour is to concatenate the strings
            For Lst/Stck/Que values the behaviour is to concatenate the lists
            For Map or Set values the behaviour is to merge the sets
            Otherwise if the R type derives from IAppendable then the behaviour
            is to call lhs.Append(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs + rhs</returns>
        </member>
        <member name="M:__TryOptionExt.Subtract``1(LanguageExt.TryOption{``0},LanguageExt.TryOption{``0})">
            <summary>
            Subtract the TryOption(x) from TryOption(y).
            If either of the TryOptions throw then the result is Fail
            If either of the TryOptions return None then the result is None
            For numeric values the behaviour is to find the difference between the TryOptions (lhs - rhs)
            For Lst values the behaviour is to remove items in the rhs from the lhs
            For Map or Set values the behaviour is to remove items in the rhs from the lhs
            Otherwise if the R type derives from ISubtractable then the behaviour
            is to call lhs.Subtract(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs - rhs</returns>
        </member>
        <member name="M:__TryOptionExt.Multiply``1(LanguageExt.TryOption{``0},LanguageExt.TryOption{``0})">
            <summary>
            Find the product of TryOption(x) and TryOption(y).
            If either of the TryOptions throw then the result is Fail
            If either of the TryOptions return None then the result is None
            For numeric values the behaviour is to multiply the TryOptions (lhs * rhs)
            For Lst values the behaviour is to multiply all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IMultiplicable then the behaviour
            is to call lhs.Multiply(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs * rhs</returns>
        </member>
        <member name="M:__TryOptionExt.Divide``1(LanguageExt.TryOption{``0},LanguageExt.TryOption{``0})">
            <summary>
            Divide TryOption(x) by TryOption(y).  
            If either of the TryOptions throw then the result is Fail
            If either of the TryOptions return None then the result is None
            For numeric values the behaviour is to divide the TryOptions (lhs / rhs)
            For Lst values the behaviour is to divide all combinations of values in both lists 
            to produce a new list
            Otherwise if the R type derives from IDivisible then the behaviour
            is to call lhs.Divide(rhs);
            </summary>
            <param name="lhs">Left-hand side of the operation</param>
            <param name="rhs">Right-hand side of the operation</param>
            <returns>lhs / rhs</returns>
        </member>
        <member name="M:__TryOptionExt.Apply``2(LanguageExt.TryOption{System.Func{``0,``1}},LanguageExt.TryOption{``0})">
            <summary>
            Apply a TryOption value to a TryOption function
            </summary>
            <param name="self">TryOption function</param>
            <param name="arg">TryOption argument</param>
            <returns>Returns the result of applying the TryOption argument to the TryOption function</returns>
        </member>
        <member name="M:__TryOptionExt.Apply``3(LanguageExt.TryOption{System.Func{``0,``1,``2}},LanguageExt.TryOption{``0})">
            <summary>
            Apply a TryOption value to a TryOption function of arity 2
            </summary>
            <param name="self">TryOption function</param>
            <param name="arg">TryOption argument</param>
            <returns>Returns the result of applying the TryOption argument to the TryOption function:
            a TryOption function of arity 1</returns>
        </member>
        <member name="M:__TryOptionExt.Apply``3(LanguageExt.TryOption{System.Func{``0,``1,``2}},LanguageExt.TryOption{``0},LanguageExt.TryOption{``1})">
            <summary>
            Apply TryOption values to a TryOption function of arity 2
            </summary>
            <param name="self">TryOption function</param>
            <param name="arg1">TryOption argument</param>
            <param name="arg2">TryOption argument</param>
            <returns>Returns the result of applying the TryOption arguments to TryOption Try function</returns>
        </member>
        <member name="M:__TryOptionExt.IfSome``1(LanguageExt.TryOption{``0},System.Func{``0,LanguageExt.Unit})">
            <summary>
            Invokes the someHandler if TryOption is in the Some state, otherwise nothing
            happens.
            </summary>
        </member>
        <member name="M:__TryOptionExt.IfSome``1(LanguageExt.TryOption{``0},System.Action{``0})">
            <summary>
            Invokes the someHandler if TryOption is in the Some state, otherwise nothing
            happens.
            </summary>
        </member>
        <member name="M:__TryOptionExt.IfNone``1(LanguageExt.TryOption{``0},``0)">
            <summary>
            Returns the Some(value) of the TryOption or a default if it's None or Fail
            </summary>
        </member>
        <member name="M:__TryOptionExt.IfNone``1(LanguageExt.TryOption{``0},System.Func{``0})">
            <summary>
            Returns the Some(value) of the TryOption or a default if it's None or Fail
            </summary>
        </member>
        <member name="M:__TryOptionExt.Fold``2(LanguageExt.TryOption{``1},``0,System.Func{``0,``1,``0})">
            <summary>
            Folds TryOption value into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="self">Try to fold</param>
            <param name="state">Initial state</param>
            <param name="folder">Fold function</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__TryOptionExt.Fold``2(LanguageExt.TryOption{``1},``0,System.Func{``0,``1,``0},System.Func{``0,``0},System.Func{``0,System.Exception,``0})">
            <summary>
            Folds TryOption value into an S.
            https://en.wikipedia.org/wiki/Fold_(higher-order_function)
            </summary>
            <param name="self">Try to fold</param>
            <param name="state">Initial state</param>
            <param name="Some">Fold function for Some</param>
            <param name="None">Fold function for None</param>
            <param name="Fail">Fold function for Failure</param>
            <returns>Folded state</returns>
        </member>
        <member name="M:__TryOptionExt.Map``3(LanguageExt.TryOption{``0},System.Func{``0,``1,``2})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__TryOptionExt.Map``4(LanguageExt.TryOption{``0},System.Func{``0,``1,``2,``3})">
            <summary>
            Partial application map
            </summary>
            <remarks>TODO: Better documentation of this function</remarks>
        </member>
        <member name="M:__TryOutExt.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Get a value out of a dictionary as Some, otherwise None.
            </summary>
            <typeparam name="K">Key type</typeparam>
            <typeparam name="V">Value type</typeparam>
            <param name="self">Dictionary</param>
            <param name="key">Key</param>
            <returns>OptionT filled Some(value) or None</returns>
        </member>
        <member name="M:__TryOutExt.TryGetValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Get a value out of a dictionary as Some, otherwise None.
            </summary>
            <typeparam name="K">Key type</typeparam>
            <typeparam name="V">Value type</typeparam>
            <param name="self">Dictionary</param>
            <param name="key">Key</param>
            <returns>OptionT filled Some(value) or None</returns>
        </member>
        <member name="M:__Tuple2.Append``3(System.Tuple{``0,``1},``2)">
            <summary>
            Append an extra item to the tuple
            </summary>
        </member>
        <member name="M:__Tuple2.Sum(System.Tuple{System.Int32,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:__Tuple2.Sum(System.Tuple{System.Double,System.Double})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:__Tuple2.Sum(System.Tuple{System.Single,System.Single})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:__Tuple2.Sum(System.Tuple{System.Decimal,System.Decimal})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:__Tuple2.Map``3(System.Tuple{``0,``1},System.Func{``0,``1,``2})">
            <summary>
            Map to R
            </summary>
        </member>
        <member name="M:__Tuple2.Map``4(System.Tuple{``0,``1},System.Func{System.Tuple{``0,``1},System.Tuple{``2,``3}})">
            <summary>
            Map to tuple
            </summary>
        </member>
        <member name="M:__Tuple2.Map``4(System.Tuple{``0,``1},System.Func{``0,``2},System.Func{``1,``3})">
            <summary>
            Bi-map to tuple
            </summary>
        </member>
        <member name="M:__Tuple2.MapFirst``3(System.Tuple{``0,``1},System.Func{``0,``2})">
            <summary>
            First item-map to tuple
            </summary>
        </member>
        <member name="M:__Tuple2.MapSecond``3(System.Tuple{``0,``1},System.Func{``1,``2})">
            <summary>
            Second item-map to tuple
            </summary>
        </member>
        <member name="M:__Tuple2.Select``4(System.Tuple{``0,``1},System.Func{System.Tuple{``0,``1},System.Tuple{``2,``3}})">
            <summary>
            Map to tuple
            </summary>
        </member>
        <member name="M:__Tuple2.Iter``2(System.Tuple{``0,``1},System.Action{``0,``1})">
            <summary>
            Iterate
            </summary>
        </member>
        <member name="M:__Tuple2.Iter``2(System.Tuple{``0,``1},System.Action{``0},System.Action{``1})">
            <summary>
            Iterate
            </summary>
        </member>
        <member name="M:__Tuple2.Fold``3(System.Tuple{``0,``1},``2,System.Func{``2,``0,``1,``2})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:__Tuple2.Fold``3(System.Tuple{``0,``1},``2,System.Func{``2,``0,``2},System.Func{``2,``1,``2})">
            <summary>
            Bi-fold
            </summary>
        </member>
        <member name="M:__Tuple2.FoldBack``3(System.Tuple{``0,``1},``2,System.Func{``2,``1,``2},System.Func{``2,``0,``2})">
            <summary>
            Bi-fold
            </summary>
        </member>
        <member name="M:__Tuple3.Append``4(System.Tuple{``0,``1,``2},``3)">
            <summary>
            Append an extra item to the tuple
            </summary>
        </member>
        <member name="M:__Tuple3.Sum(System.Tuple{System.Int32,System.Int32,System.Int32})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:__Tuple3.Sum(System.Tuple{System.Double,System.Double,System.Double})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:__Tuple3.Sum(System.Tuple{System.Single,System.Single,System.Single})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:__Tuple3.Sum(System.Tuple{System.Decimal,System.Decimal,System.Decimal})">
            <summary>
            Sum
            </summary>
        </member>
        <member name="M:__Tuple3.Map``4(System.Tuple{``0,``1,``2},System.Func{``0,``1,``2,``3})">
            <summary>
            Map to R
            </summary>
        </member>
        <member name="M:__Tuple3.Map``6(System.Tuple{``0,``1,``2},System.Func{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5}})">
            <summary>
            Map to tuple
            </summary>
        </member>
        <member name="M:__Tuple3.Map``6(System.Tuple{``0,``1,``2},System.Func{``0,``3},System.Func{``1,``4},System.Func{``2,``5})">
            <summary>
            Tri-map to tuple
            </summary>
        </member>
        <member name="M:__Tuple3.MapFirst``4(System.Tuple{``0,``1,``2},System.Func{``0,``3})">
            <summary>
            First item-map to tuple
            </summary>
        </member>
        <member name="M:__Tuple3.MapSecond``4(System.Tuple{``0,``1,``2},System.Func{``1,``3})">
            <summary>
            Second item-map to tuple
            </summary>
        </member>
        <member name="M:__Tuple3.MapThird``4(System.Tuple{``0,``1,``2},System.Func{``2,``3})">
            <summary>
            Second item-map to tuple
            </summary>
        </member>
        <member name="M:__Tuple3.Select``6(System.Tuple{``0,``1,``2},System.Func{System.Tuple{``0,``1,``2},System.Tuple{``3,``4,``5}})">
            <summary>
            Map to tuple
            </summary>
        </member>
        <member name="M:__Tuple3.Iter``3(System.Tuple{``0,``1,``2},System.Action{``0,``1,``2})">
            <summary>
            Iterate
            </summary>
        </member>
        <member name="M:__Tuple3.Iter``3(System.Tuple{``0,``1,``2},System.Action{``0},System.Action{``1},System.Action{``2})">
            <summary>
            Iterate
            </summary>
        </member>
        <member name="M:__Tuple3.Fold``4(System.Tuple{``0,``1,``2},``3,System.Func{``3,``0,``1,``2,``3})">
            <summary>
            Fold
            </summary>
        </member>
        <member name="M:__Tuple3.Fold``4(System.Tuple{``0,``1,``2},``3,System.Func{``3,``0,``3},System.Func{``3,``1,``3},System.Func{``3,``2,``3})">
            <summary>
            Tri-fold
            </summary>
        </member>
        <member name="M:__Tuple3.FoldBack``4(System.Tuple{``0,``1,``2},``3,System.Func{``3,``2,``3},System.Func{``3,``1,``3},System.Func{``3,``0,``3})">
            <summary>
            Tri-fold
            </summary>
        </member>
        <member name="M:__TupleExt.Map``5(System.Tuple{``0,``1,``2,``3},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Tuple map
            </summary>
        </member>
        <member name="M:__TupleExt.Map``6(System.Tuple{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Tuple map
            </summary>
        </member>
        <member name="M:__TupleExt.Map``7(System.Tuple{``0,``1,``2,``3,``4,``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Tuple map
            </summary>
        </member>
        <member name="M:__TupleExt.Map``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Tuple map
            </summary>
        </member>
        <member name="M:__TupleExt.Iter``4(System.Tuple{``0,``1,``2,``3},System.Action{``0,``1,``2,``3})">
            <summary>
            Tuple iterate
            </summary>
        </member>
        <member name="M:__TupleExt.Iter``5(System.Tuple{``0,``1,``2,``3,``4},System.Action{``0,``1,``2,``3,``4})">
            <summary>
            Tuple iterate
            </summary>
        </member>
        <member name="M:__TupleExt.Iter``6(System.Tuple{``0,``1,``2,``3,``4,``5},System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            Tuple iterate
            </summary>
        </member>
        <member name="M:__TupleExt.Iter``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6},System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Tuple iterate
            </summary>
        </member>
    </members>
</doc>
